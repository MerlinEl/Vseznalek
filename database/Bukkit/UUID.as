			case "uuid":uuidToName(player, args[0]); return true;			case "name":nameToUuid(player, args[0]); return true;	private void uuidToName(Player player, String string) {				UUID uuid = UUID.fromString(string);		String player_name = Bukkit.getServer().getOfflinePlayer(uuid).getName().toString();		player.sendMessage(ChatColor.GRAY+"Player name:"+player_name);	}		@SuppressWarnings("deprecation")	private void nameToUuid(Player player, String string) {				UUID player_uuid = Bukkit.getServer().getOfflinePlayer(string).getUniqueId();		ClipboradMan.set(player_uuid.toString());		player.sendMessage(ChatColor.GRAY+"Player uuid:"+player_uuid);	}	public String getOfflinePlayerName(String str_uuid, boolean set_clipboard) {				UUID player_uuid = UUID.fromString(str_uuid);		OfflinePlayer offline_player = Bukkit.getOfflinePlayer(player_uuid);		if (set_clipboard) ClipboradMan.set(offline_player.getName());		return offline_player.getName();	}    public final String getPlayerName(Player player, final UUID uuid) {        if (uuid == null) {            return null;        }        for (final OfflinePlayer offline_player : player.getServer().getOfflinePlayers()) {            if (uuid.equals(offline_player.getUniqueId())) {                return offline_player.getName();            }        }        return null;    }Bukkit.getServer().getOfflinePlayer("Alshain01").getUniqueID();Bukkit.getServer().getOfflinePlayer(UUID.fromString("067e6162-3b6f-4ae2-a171-2470b63dff00")).getName();    UUID pID= UUID.fromString("067e6162-3b6f-4ae2-a171-2470b63dff00");    String pIdString = pID.toString();//conversion from 16 binary bytes to uuid InputStream is = ..binarty input..;  byte[] bytes = IOUtils.toByteArray(is);  ByteBuffer bb = ByteBuffer.wrap(bytes);  UUID uuidWithDashesObj = new UUID(bb.getLong(), bb.getLong());  String uuidWithDashes = uuidWithDashesObj.toString();I have a UUID in binary format in my Lua program (just 16 bytes in string). I need to convert it to string format, for example 550e8400-e29b-41d4-a716-446655440000.string.format("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", string.byte(str,1,16))local str = "\x55\x0e"local result = string.format("%02x%02x", string.byte(str, 1, 2))print(result)Output: 550estring.byte gets the internal numeric representation of the characters, and then use string.format to get the hex format.        int a = 44;        String s = String.format("id=%d", new Object[] { Integer.valueOf(a)});        player.sendMessage(ChatColor.GREEN + "string byte:"+s);        //output:id=44;        byte  e = b0;        byte  f = b1;String.format(", yRot=%d, xRot=%d", new Object[] { Byte.valueOf(e), Byte.valueOf(f)});String.format("%.2f", new Object[] { Float.valueOf((float) j / ((float) i / 1000.0F))})).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");Plain String: f424376fe38e496eb77d7841d915b074UUID formatted String: f424376f-e38e-496e-b77d-7841d915b074//string formatString plain = "f424376fe38e496eb77d7841d915b074";String uuid = String.format("%1$-%2$-%3$-%4$", plain.substring(0,7), plain.substring(7,11), plain.substring(11,15), plain.substring(15,20));//apache codecsbyte[] data = Hex.decodeHex("f424376fe38e496eb77d7841d915b074".toCharArray());String uuid = new UUID(ByteBuffer.wrap(data, 0, 8).getLong(), ByteBuffer.wrap(data, 8, 8).getLong()).toString();//regexString digits = "5231b533ba17478798a3f2df37de2aD7";                         String uuid = digits.replaceAll(                                                "(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})",                                "$1-$2-$3-$4-$5");                                                      System.out.println(uuid); // => 5231b533-ba17-4787-98a3-f2df37de2aD7var newId = "2b6f0cc904d137be2e1730235f5664094b831186";Bytes = StringToByteArray(newId)   public static byte[] StringToByteArray(String hex)        {            int NumberChars = hex.Length;            byte[] bytes = new byte[NumberChars / 2];            for (int i = 0; i < NumberChars; i += 2)                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);            return bytes;        }        public static string ByteArrayToString(byte[] ba)        {            StringBuilder hex = new StringBuilder(ba.Length * 2);            foreach (byte b in ba)                hex.AppendFormat("{0:x2}", b);            return hex.ToString();        }bukkit print byte arrayOfflinePlayer[] oflist = Bukkit.getOfflinePlayers();                    for(OfflinePlayer of:oflist){                        if(of.getUniqueId().equals(UUID)){                            String name = of.getName();                        }                    } UUID id = UUID.fromString("d63ad7cd-d1d9-3129-9fc4-888888888888");        OfflinePlayer player =Bukkit.getOfflinePlayer(id);        if(player.hasPlayedBefore()) {            Bukkit.getLogger().info(player.getName());        }    private static byte[] toBytes(UUID uuid) {        ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[16]);        byteBuffer.putLong(uuid.getMostSignificantBits());        byteBuffer.putLong(uuid.getLeastSignificantBits());        return byteBuffer.array();    }        public static UUID fromBytes(byte[] array) {        if (array.length != 16) return null;        ByteBuffer byteBuffer = ByteBuffer.wrap(array);        long mostSignificant = byteBuffer.getLong();        long leastSignificant = byteBuffer.getLong();        return new UUID(mostSignificant, leastSignificant);    }        public static String nameFromUUIDString(String uuid_str){		    	UUID uuid = UUID.fromString(uuid_str);    	byte[] bytes = toBytes(uuid);    	String name = new String( bytes );    	return name;    }	private void uuidToName(Player player, String uuid_str) {		String player_name = nameFromUUIDString(uuid_str);		player.sendMessage(ChatColor.GREEN + "player uuid : " + uuid_str);		player.sendMessage(ChatColor.GREEN + "player name : " + player_name);	}	private void nameToUuid(Player player, String player_name) {				byte[] bytes = null;		try {			bytes = player_name.getBytes("UTF-8");		} catch (UnsupportedEncodingException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		player.sendMessage(ChatColor.GREEN + "player bytes : " + player_name+ " len:"+bytes.length);		UUID player_uuid = fromBytes(bytes); //UUID.nameUUIDFromBytes(bytes);		player.sendMessage(ChatColor.GREEN + "player name : " + player_name);		player.sendMessage(ChatColor.GREEN + "player uuid : " + player_uuid);		if (player_uuid != null)ClipboradMan.set(player_uuid.toString());	}