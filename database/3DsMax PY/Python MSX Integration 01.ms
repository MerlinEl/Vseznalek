-----in_maxscript-----temp = "flux"-----in_python(max)–msString ="'temp'"ret = MaxPlus.Core.EvalMAXScript(msString)print ret.Get()--> flux        ↑        ↓-----in_python(max)–msString ='temp = "capacitor"'MaxPlus.Core.EvalMAXScript(msString)--> <MaxPlus.FPValue; proxy of <Swig Object of type 'Autodesk::Max::FPValue *' at 0x000001E4B8A75690> >-----in_maxscript-----print temp--> "capacitor"-------------------------------------------------------------------------------------import MaxPlusMaxPlus.Core.EvalMAXScript("print #aaa")commandString1 = "import MaxPlusMaxPlus.Core.EvalMAXScript(\"print #aaa\")"python.execute commandString1-------------------------------------------------------------------------------------<FPValue> = MaxPlus.Core.EvalMAXScript(<string>)res = MaxPlus.FPValue()evaluation_success = MaxPlus.Core.EvalMAXScript(<string>, res)import MaxPlushelp(MaxPlus.FPTypeConstants)'''    Demonstrates evaluating a MAXScript expression and getting a node value from it.'''import MaxPlus obj = MaxPlus.Factory.CreateGeomObject(MaxPlus.ClassIds.Cone) obj.ParameterBlock.radius1.Value = 5.0obj.ParameterBlock.radius2.Value = 10.0node = MaxPlus.Factory.CreateNode(obj) node.Name = 'PythonCone001' r = MaxPlus.Core.EvalMAXScript('$'+node.Name) print r.GetType(), MaxPlus.FPTypeGetName(r.GetType()), r.Get()-------------------------------------------------------------------------------------global mxsPythonHelperstruct mxsPythonHelperStruct (		py =  python.import("__builtin__"),	json = python.import("json"),		fn buildPyDictFromArray keyArray valueArray =  (					local pyDict		if keyArray.count == valueArray.count then (								pyDict = py.dict()			for each = 1 to keyArray.count do								pyDict[keyArray[each]] = valueArray[each]				)		pyDict			),		fn writeJson file data = (				jsonFile = py.open file "wb"		json.dump data jsonFile indent:4		jsonFile.close()	),	fn readJson file asDataPair:false = (		jsonFile = py.open file "r"		dLoad =json.load jsonFile		jsonFile.close()				if asDatapair then			for each in (dLoad.items() as array) collect (dataPair key:each[1] value:each[2])		else			dLoad	)	)mxsPythonHelper = mxsPythonHelperStruct()dictObj = mxsPythonHelper.buildPyDictFromArray #("woop", "yeah", "cmon") #(true, "meh", 2017)strJPath =  @"C:\Temp\Woop.json" mxsPythonHelper.writeJson strJPath dictObjrj = mxsPythonHelper.readJson strJPath asDatapair:true/*Woop.json{    "cmon": 2017,     "yeah": "meh",     "woop": true}*/