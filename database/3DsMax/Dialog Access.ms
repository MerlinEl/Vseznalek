RenderSceneDialog.open()moveDialogByName "Render Setup:" 100 200fn moveDialogByName dia_name x y = (	--This gets me the hWnd for the window	local hWndIntPtr = (for w in windows.GetChildrenHwnd 0 where matchPattern w[5] pattern:"Render Setup:*" collect w[1])[1]	--Build Assembly script	fn createAssembly =(		str="using System;\n"		str+="using System.Runtime.InteropServices;\n"		str+="namespace Win32Helper\n"		str+="{\n"		str+=" class Win32HelperClass\n"		str+=" {\n"		str+=" [DllImport(\"user32.dll\")]\n"		str+=" [return: MarshalAs(UnmanagedType.Bool)]\n"		str+=" public static extern bool SetWindowPos(IntPtr hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);\n"		str+=" }\n"		str+="}\n"		local csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"		local compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"		compilerParams.ReferencedAssemblies.addRange #("System.dll")		compilerParams.GenerateInMemory = on		local compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(str)		for er = 0 to compilerResults.errors.count-1 do print (compilerResults.errors.item[er].tostring())		return compilerResults.CompiledAssembly.createInstance "Win32Helper.Win32HelperClass"	)	--Compile Assembly and move Dialog	local win32Helper = createAssembly()	win32Helper.setWindowPos (dotNetObject "System.IntPtr" hWndIntPtr) 0 x y 0 0 1 )