fn getNextVerts obj used_edges everts start_verts = (	local vert_1 = start_verts[1]	local vert_2 = start_verts[2]	local vert_edges_1 = polyOp.getEdgesUsingVert obj vert_1	local vert_edges_2 = polyOp.getEdgesUsingVert obj vert_2	local edge_1 = used_edges * vert_edges_1	local edge_2 = used_edges * vert_edges_2	local edge_verts_1 = polyOp.getVertsUsingEdge obj edge_1	local edge_verts_2 = polyOp.getVertsUsingEdge obj edge_2	#(		( (edge_verts_1 - #{vert_1}) as Array)[1], 		( (edge_verts_2 - #{vert_2}) as Array)[1]	))fn isUniqueSet set_array pair_array = (	for arr in set_array where (		arr[1] == pair_array[1] and arr[1] == pair_array[1] 	) do return false	true)fn stitchVerts obj vert_1 vert_2 = (	local p1 = polyOp.getVert obj vert_1	local p2 = polyOp.getVert obj vert_2	local center = (p1 + p2)  / 2 	polyOp.setVert obj vert_1 center	polyOp.setVert obj vert_2 center)fn stitchEdges obj = ( 	local sel_edges = polyOp.getEdgeSelection obj	local sel_verts = polyOp.getVertSelection obj	local edge_verts = polyOp.getVertsUsingEdge obj sel_edges	if sel_verts.numberset != 2 do (			messageBox "Select two vertices of each side." title:"Aborted:"		return false	)	local next_verts = sel_verts as Array	local verts_pairs = #()	local cnt = 0    while next_verts.count == 2 and isUniqueSet verts_pairs next_verts and cnt < 50 do ( 		append verts_pairs next_verts		next_verts = getNextVerts obj sel_edges edge_verts next_verts 		format "next_verts:%\n" next_verts		cnt += 1	)	print verts_pairs	for pair in verts_pairs do (		stitchVerts obj pair[1] pair[2]	))stitchEdges $obj = $