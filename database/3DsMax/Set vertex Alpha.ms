		local obj = selection[1]		if classOf obj != Editable_Poly do return false		if  not (polyOp.getMapSupport obj -2) do polyOp.setMapSupport obj -2 true		local vsel = (getVertSelection obj) as Array		if subobjectLevel != 1 or vsel.count == 0 do return false		local col = [1,1,1] * (val / 100.0)		--format "vsel:% val:% col:%\n" vsel val col		with redraw off (for v in  vsel do polyOp.setMapVert obj -2 v col)		obj.SetVertexColor (color 0 0 0) 3 --update change only		/*		polyop.getMapVert <Poly poly> <int mapChannel> <int index>		polyop.setMapVert <Poly poly> <int mapChannel> <int index> <Point3 uvw>		polyop.setMapFace <Poly poly> <int mapChannel> <int map face index> <map vertex array>				polyop.setVDataChannelSupport obj 3 true		polyop.resetVData obj 3		polyop.freeVData obj 3		*/		/* --Not works	channel 1: Soft Selection	channel 2: Vertex weights (for NURMS MeshSmooth)	channel 3: Vertex Alpha values	channel 4: Cornering values for subdivision use	channel_index = 1	vertex_index = 7	alpha_value = 0.5	polyop.setVDataChannelSupport $ channel_index true	polyop.getVDataChannelSupport $ channel_index	polyop.getVDataValue $ channel_index vertex_index	polyop.setVDataValue $ channel_index #(vertex_index) alpha_value	update $	*/			/* --Works for Ediatble Mesh	fn setSelectedVerticesAlpha val = (		local obj = (selection as array)[1]		if obj == undefined do return false		if classOf obj != Editable_Mesh do convertToMesh obj		local vsel = getVertSelection obj		if (vsel as array).count == 0 do return false		meshop.setVertAlpha obj -2 vsel val		update obj	)*/