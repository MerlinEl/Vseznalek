-- VCanvas = undefinedif PolyBoost.ViewportCanvasOpen then (	cui.unRegisterDialogBar VCMainFloater	closeRolloutFloater VCMainFloater)if (not PolyBoost.ViewportCanvasOpen) do filein ((GetDir #maxroot) + "stdplugs\\stdscripts\\(PolyTools)\\ViewportCanvas.ms")fn createPSD size_w size_h save_dir image_name clr layers = (	local bmp_fpath = save_dir + image_name + ".bmp"	local bm = bitmap size_w size_h color:clr filename:bmp_fpath	save bm; close bm	local btex = BitmapTexture filename:bmp_fpath	format "btex:% bmp_fpath:%\n" btex btex.filename		local bo = box width:100 heighr:100 length:100 wirecolor:blue selected:true	convertToPoly bo	select bo	polyop.setMapSupport bo 1 true --enable map channel 1		local map_channel = 1	VCanvas.currentObject = bo	bo.material = StandardMaterial()	bo.material.diffuseMap = btex	bo.material.diffuseMap.coords.mapchannel = map_channel	VCanvas.currentMaterial =  bo.material	VCanvas.usedMapSlot = btex	VCanvas.currentTextureFile = bmp_fpath	VCSetup.createTextureIndices = [2,2]	ViewportCanvasSetup 1 bmp_fpath "" "" false		VCSetLayerSetting 8 1 layers[1] --rename frist layer			--generate layers	for i=2 to layers.count do (				VCNewLayer() --create next layer		VCSetLayerSetting 8 i layers[i] --rename  layer	)-- 	VCLayers.OpenLayerDialog()	local psd_fpath = save_dir + image_name + ".psd"	VCSavePSD psd_fpath	---final clean-- 	ViewportCanvasEnd()-- 	VCLayers.CloseLayerDialog()-- 	VCanvas.RemoveCallbacksInViewportCanvas()	cui.unRegisterDialogBar VCMainFloater	closeRolloutFloater VCMainFloater-- 	PolyBoost.ViewportCanvasOpen = false	resumeEditing()	bo.material.diffuseMap = undefined	delete bo	deleteFile bmp_fpath	enablesceneredraw()	CompleteRedraw())createPSD 256 128 "c:\\temp\\"  "bmp_test_7" blue #("opacity", "diffuse", "normalmap", "roughness", "alpha")http://lonerobot.net/?page_id=1079http://discourse.techart.online/t/automating-photoshop-via-3dsmax-with-dotnet-and-com-interop/466/25http://www.lonerobot.com/DotNetControls/PhotoShopInterop.zipBitmapLayerManager-- make sure this points to where your assembly is houseddotnet.loadassembly ((getDir #scripts) +@"\LoneRobot\ClassLib\PhotoShop.dll")dotnet.loadassembly ((getDir #scripts) +@"\LoneRobot\ClassLib\Interop.Photoshop.dll")oPhotoShop = dotnetobject "LoneRobot.Imaging.PhotoshopBot"--- Setup the TGA optionsoTGA = dotnetobject "LoneRobot.Imaging.ImageTypes+TGA"show oTGA--  .AlphaChannels : <System.Boolean>--   .BitsPerPixel : <LoneRobot.Imaging.ImageTypes+Tga+TGAResolution>--   .RLECompression : <System.Boolean>-- .bitsperpixel is an enumeration, so will need to be specified if you want an alpha channel to be savedshow (dotnetclass "LoneRobot.Imaging.ImageTypes+Tga+TGAResolution")-- dotNetClass:LoneRobot.Imaging.ImageTypes+Tga+TGAResolution--   .TGA16Bit : <LoneRobot.Imaging.ImageTypes+Tga+TGAResolution>, read-only, static--   .TGA24bit : <LoneRobot.Imaging.ImageTypes+Tga+TGAResolution>, read-only, static--   .TGA32bit : <LoneRobot.Imaging.ImageTypes+Tga+TGAResolution>, read-only, staticoTGA.AlphaChannels = trueoTGA.RLECompression = true-- set the bit depth to include the 8 bit aplha channeloTGA.BitsPerPixel = (dotnetclass "LoneRobot.Imaging.ImageTypes+Tga+TGAResolution").TGA32bitoTGA.BitsPerPixel.value__-- 32oPhotoShop.saveas "c:\	est32" oTGAClick the Windows "Start" button. Click "All Programs," then click "Microsoft .NET Framework" to view the Windows programming tools. Click "Visual Studio" to open your workspace.Click "File," then click "Open." Double-click the SLN file for your Web project. All C# programming application projects end with the SLN extension.Load your PSD file to initialize and prepare it for the new layer. Type the following code into your C# code file:PsdFile psd = new PsdFile();psd.Load("c:\myfile.psd");Replace "myfile.psd" with your own PSD file name.Create a new layer. Type the following code to add the layer:TreeNode layer = new TreeNode("Layer Name=NewLayer");You can replace "NewLayer" with your own layer name.Add the layer to the PSD file. The image is loaded and the layer is created, so now you combine the two to add the layer to your image. Add the final code:psd.Nodes.Add(layer);macros.run "Viewport Canvas" "ViewportCanvas"WIN > Viewport Canvas HWND:266730PWIN > Viewport Canvas HWND:659682PWIN > Layers HWND:332298PWIN > Layers Dialog HWND:200928PWIN > Layers HWND:134502PSave Texture HWND:200852PWIN > Paint HWND:397922PWIN > Layer: HWND:200628PWIN > Layers Dialog HWND:200728PBox pos:[-7.31341,-0.324885,0] isSelected:on width:40.7119 length:35.2919 height:31.6199macros.run "Tools" "Move"for w in windows.getChildrenHwnd hWnd where win32.IsWindowVisible (ToIntPtr w[1]) do format "%\n"  (grabControl w[1])for w in windows.getChildrenHwnd 2 do format "%\n" wdotNetObject:Win32Utils.Win32Helper#Struct:windows(  postMessage:<fn>; Public,  getDesktopHWND:<fn>; Public,  screenToClient:<fn>; Public,  getChildHWND:<fn>; Public,  sendMessage:<fn>; Public,  getWindowPos:<fn>; Public,  getParentHWND:<fn>; Public,  addChild:<fn>; Public,  processPostedMessages:<fn>; Public,  snapshot:<fn>; Public,  getMAXHWND:<fn>; Public,  getChildrenHWND:<fn>; Public,  clientToScreen:<fn>; Public,  setWindowPos:<fn>; Public,  getHWNDData:<fn>; Public)fn printAllUIAccessors = (	local max_hwnd = windows.getChildrenHWND #max	local win_hwnd = windows.getChildrenHWND (windows.getDesktopHWND())	for i in max_hwnd where i[5].count != 0 do format "MAX > % HWND:%\n" i[5] i[1]	for i in win_hwnd where i[5].count != 0 do format "WIN > % HWND:%\n" i[5] i[1])printAllUIAccessors()UIAccessor.PressButton (for i in (windows.getChildrenHWND (windows.getDesktopHWND())) where i[5]=="Fill" do exit with i[1])UIAccessor.PressButton 200928PUIAccessor.PressButton 134502PUIAccessor.PressButton 397922P --PaintUIAccessor.PressButton 200728P --Layers Dialog UIAccessor.PressButton 200852P --Save Textureif (not PolyBoost.ViewportCanvasOpen) do filein ((GetDir #maxroot) + "stdplugs\\stdscripts\\(PolyTools)\\ViewportCanvas.ms")VCanvas.StartPaintTool 1VCanvas.EndPaintTool()VCanvas.StartPaintTool 11 --MoveLayerVCanvas.StartPaintTool 12 --ScaleLayerVCanvas.StartPaintTool 13 --RotateLayerVCLayers.OpenLayerDialog()VCLayers.CloseLayerDialog()VCGetSetting 100 trueVCSetSetting 100 trueif (VCGetSetting 100) do VCNewLayer() --NewLayerif (VCGetSetting 100) do VCDeleteLayer() --DeleteLayerif (VCGetSetting 100) do VCDuplicateLayer() --DuplicateLayer--SavePSDAsVCSavePSD "c:\\temp\\psd_test.psd"if (VCGetSetting 100) do(	filename = getSaveFileName caption:~GETSAVEFILENAME_CAPTION~ filename:"" types:"PSD(*.psd)|*.psd"	if filename != undefined and filename != "" do	(		VCSavePSD filename	))if (not PolyBoost.ViewportCanvasOpen) do filein ((GetDir #maxroot) + "stdplugs\\stdscripts\\(PolyTools)\\ViewportCanvas.ms")$.material = StandardMaterial() -- width height filename  colorval show mapchannelsuccess = VCSetup.CreateNewTexture 256 128 "c:\\temp\\bmp_test.bmp" green true 1if success do (	$.material.diffuseMap = VCanvas.usedMapSlot	VCOptionsRoll.mapbut.text = VCanvas.mapSlotName	VCSetUsingNewTexture() --using a new texture so it should be fit to the 2D window	if VCanvas.doRestartTool do VCanvas.StartPaintTool 1)VCSetup.createTextureIndices = [2,2]VCanvas.currentMaterial = $.materialVCanvas.mapSlotName = getSubTexmapSlotName $.material 2VCNewLayer() --NewLayerVCLayers.OpenLayerDialog()VCLayers.CloseLayerDialog()VCanvas.doRestartTool = falseVCMapSlotTree = VCMapSlotStruct()BuildMenuString VCMapSlotTreeVCanvas.currentMaterialVCSetup.VCCreateTextureDialog() VCanvas.doRestartTool VCSetup.BuildMapMenu $.materialVCanvas.StartPaintTool 1VCLayers.LayerDialogLeftOpenVCanvas.brushDir + "Settings\\Default.txt"VCSetup.CreateNewTexture 256 128 "c:\\temp\\bmp_test.bmp" green true 1VCMapMenu	(not (VCGetLayerSetting 7 index) and (index != 1))show $on menu2 picked do (                VCSetup.createTextureIndices = [2,2]                VCanvas.currentMaterial = $.material                VCanvas.mapSlotName = getSubTexmapSlotName VCSetup.mapSlotArray[2] 2                VCSetup.VCCreateTextureDialog()                )