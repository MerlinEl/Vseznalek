-- macroScript Global_Vert_Painter -- 			category:"MBG Tools" -- 			tooltip:"Global Vertex Painter 1.0 by MBG" -- 			icon:#("PolyTools",15)-- (------------------------------------------------------------------- GLOBAL VERTEX PAINTER v 1.0-- by Mauricio B. G.-- mbg@southlogic.com-- 04/04-- This tool will make global modification in vertex color / illumination / alpha values.-- Read the values from one object and apply the modification to others.-- Other features: Apply the same values to similar objects (same number of vertices)-- 				   Copy between color -> illumination / illumination -> color / swap values in several objects--				   Global relative modifications with viewport preview--                 HELP button included ! :)-- Installation: -- Copy in maxdir/UI/MacroSripts-- Run the script and Customize -> Customize User Interface -> "MBG Tools" category-- Now put somewhere (toolbar / quadmenu / mainmenu ...)-- Thanks for Luiz Gama to help me fight against this evil slider !-- Know Problems:-- If you use vertex paint modifier before using this script, strange things will happen...-- When changing values with the slider or picking other color, the new color will be in just one face and doesn't affect others.-- Why??? I don't know! If you figure out, let me know!------------------------------------------------------------------- init varsglobal val_array = #()global grupo_array = #()global gruponew_array = #()global ni = #()global objreadglobal tipo = 0global grpcal = #()global cortemp = (color 0 0 0)global sat_save = 0global hue_save = 0global vert_array = #()global list_current = 1global rest_go = falseglobal valglobal = 0global valglobal_array = #()global sat_save_array = #()global hue_save_array = #()global vert_temp = #()global vert_ready = falseglobal shaded_state = true-- compare functionfn compare_qsort v1 v2 = ( local soma1 = v1[1]+v1[2]+v1[3]local soma2  = v2[1]+v2[2]+v2[3]case of ( (soma1 < soma2): -1 (soma1  > soma2 ): 1 default: 0 ) )-- restore values function -> if used viewport previewfn restore =(novosel = getcurrentselection()select objread[1]If classof $ == Editable_mesh then ( For x=1 to $.numverts do meshop.setmapvert $ tipo x (val_array[x]/255)) else ( For x=1 to $.numverts do polyop.setmapvert $ tipo x (val_array[x]/255))rest_go = falseselect novosel)-- Function Show verts type in viewportfn show_vv =(	$.showVertexColors = on	$.vertexColorType = tipo*-1If shaded_state == true then  $.vertexColorsShaded = on						else $.vertexColorsShaded = off)-----------------------------------------------------------------rollout main "Global Vertex Painter 1.0 by MBG " width:232 height:645(	radiobuttons tipo_vert "" pos:[9,14] width:215 height:16 labels:#("Color", "Illumination", "Alpha") default:3 columns:3	button read_val "<<  READ FROM SELECTED  >>" pos:[16,38] width:200 height:21	spinner spin "New alpha value" pos:[42,272] width:130 height:16 enabled:false scale:1 visible:false	listbox List "Values Groups     -->     New Values" pos:[8,95] width:200 height:10	label label4 "Verts in group: ..." pos:[6,252] width:207 height:13	button apply "<<  Apply new values on selected  >>" pos:[8,386] width:200 height:21 enabled:false	listbox warning "Different values found:" pos:[8,410] width:200 height:5 	button write_sim "<<  Put EXACT values on similar objects  >>" pos:[8,510] width:216 height:21 enabled:false	colorPicker color1 "Current" pos:[10,270] width:88 height:24 enabled:false visible:false	GroupBox grp1 "Vertex Type" pos:[5,0] width:218 height:34	label label5 "Master Obj:" pos:[5,61] width:221 height:14	GroupBox grp2 "Vertex " pos:[3,78] width:211 height:426	colorPicker color_new "New" pos:[124,269] width:80 height:24 enabled:false color:(color 0 0 155) title:"" visible:false	checkbox globalcheck "Global modifications" pos:[8,303] width:132 height:16 enabled:false	progressBar pb1 "ProgressBar" pos:[216,88] width:8 height:408 orient:#vertical	radiobuttons rdo2 "" pos:[14,588] width:172 height:32 labels:#("Color to Illum", "Illum do Color", "Swap") default:2 columns:2	GroupBox grp3 "Channel Copy" pos:[8,574] width:216 height:48	button channel_btn "DO!" pos:[187,592] width:32 height:26	button help_bt "< - H  E  L  P  - >" pos:[8,626] width:216 height:16	slider slider "" pos:[12,333] width:192 height:25 enabled:false orient:#horizontal ticks:4	checkbox rt_check "Preview in viewport" pos:[42,367] width:118 height:15 enabled:false checked:true	GroupBox grp7 "Lightness" pos:[8,319] width:200 height:65 	button reset_button "Reset" pos:[148,302] width:60 height:18 enabled:false	checkbox show_check "Enabled" pos:[16,553] width:64 height:16	GroupBox grp8 "Set \"show vertex Alpha in viewport\"" pos:[6,534] width:218 height:40	checkbutton shaded "Shaded" pos:[80,549] width:47 height:19 checked:true	button show_button "Do now !" pos:[138,552] width:76 height:16-----------------------------------------------------------------			-- WRITE EXACT VALUES BUTTON	on write_sim pressed do (		-- restore values if viewport preview was used	If rest_go == true then restore()		try (	warning.items = #()		sel = getcurrentselection() 	For obj=1 to sel.count do (   -- start for 1    		select sel[obj] 	For v=1 to $.numverts do (    -- start for 2					    if tipo == -2 then value = [val_array[v]/100,val_array[v]/100,val_array[v]/100]									  else value = val_array[v]/255						If classof $ == Editable_mesh then (																	meshop.setMapSupport $ tipo true 															meshop.setmapvert $ tipo v value		    																			)													  else (													  polyop.setMapSupport $ tipo true 													  polyop.setmapvert $ tipo v value		    																	  )	)-- end for 2	pb1.value = 100.*obj/sel.count	if show_check.checked == true then (		show_vv()				)	)-- end for 1		If sel.count != 0 then (--	reset all	val_array = #()	grupo_array = #()	gruponew_array = #()	ni = #()	list.items=#()	spin.value = 0	spin.enabled = false	label4.caption = "Done"	subobjectlevel = 0	apply.enabled = false	color1.color = [255,255,255]	color_new.color = [255,255,255]	color_new.enabled = false	vert_array = #()	pb1.value = 0	vert_array = #()	vert_temp = #()	vert_ready = false	globalcheck.enabled = false	reset_button.enabled = false	rt_check.enabled = false	slider.enabled = false	write_sim.enabled = false		-- to show the correct vertex type in viewport		case tipo_vert.state of 								( 											1: tipo = 0								2: tipo = -1									3: tipo = -2							)						If tipo == 0 then str = "Color"				else If tipo == -1 then str = "Illumination"				else str = "Alpha"	grp8.caption = "Set \"show vertex " + str + " in viewport\""	) else messagebox "Error. Nothing is selected!" title:"Global Vertex Painter by MBG"		) catch messagebox "Error. Objects must have same number of vertices! \n And everything must be poly or mesh. \n Doesn't work with groups !" title:"Global Vertex Painter by MBG"	select sel				)-- end button 		-----------------------------------------------------------------			-- CHOOSE NEW COLOR	on color_new changed cor_esco do (	compose = [color_new.color.r,color_new.color.g,color_new.color.b]	gruponew_array[list.selection] = compose	list.items[list.selection] = (grupo_array[list.selection] as string) + "  -->  " + (compose as string)	list.items = list.items		-- load new values to slider	cortemp = color_new.color	sat_save = cortemp.s 	hue_save = cortemp.h 	slider.range = [0,(255+sat_save),cortemp.v ]		)-----------------------------------------------------------------			-- LIST CLICKED	on list selected num do (	ss = vert_array as string	If tipo == -2 then spin.value = gruponew_array[num]					  else (				  						  		color1.color = grupo_array[num]							color_new.color = gruponew_array[num]						If globalcheck.checked == false then (						-- load new values to slider						cortemp = color_new.color						sat_save = cortemp.s 						hue_save = cortemp.h 						slider.range = [0,(255+sat_save),cortemp.v ]												) 						)			-- select verts of the group	verts = #()	For y=1 to val_array.count do (		teste1 = grupo_array[list.selection] as string		teste2 = val_array[y] as string		If teste1 == teste2 then append verts y								)	select objread[1]		max modify mode	modPanel.setCurrentObject $.baseObject	subobjectLevel = 1	If classof $ == Editable_mesh then setvertselection $ verts 							      else polyop.setvertselection $ verts 		label4.caption = "Verts in group:" + verts as string	If list_current != num then vert_temp = #()	list_current = num	str = slider.range as string	)	-----------------------------------------------------------------		-- SPINNER CHANGED		on spin changed newval do (		If globalcheck.checked == false then (		gruponew_array[list.selection] = spin.value		list.items[list.selection] = ("        " + grupo_array[list.selection] as string) +  "        -->        " + (gruponew_array[list.selection] as string)		)		else (			For h=1 to gruponew_array.count do (				calculo = grpcal[h] + spin.value		If calculo > 100 then gruponew_array[h] = 100.0						else ( If calculo < 0 then gruponew_array[h] = 0.0							   else gruponew_array[h] = grpcal[h] + spin.value																	)		list.items[h] = ("        " + grupo_array[h] as string) +  "        -->        " + (gruponew_array[h] as string)											)				)	list.items = list.items			)	-----------------------------------------------------------------		-- GLOBAL ALTERATIONS	on globalcheck changed state do (	If state == true then ( -- open then 1		If tipo == -2 then ( --open then tipo			grpcal = #()			For h=1 to gruponew_array.count do append	grpcal gruponew_array[h] -- copy do grpcal array			spin.range = [-100,100,0] --spin.value = 0 			)-- close then tipo			else ( -- other tipo			color_new.enabled = false						-- GLOBAL slider stuff...					sat_save_array = #()			hue_save_array = #()			valglobal_array = #()			--			slider.range = [-100,100,0]						For u=1 to gruponew_array.count do (			color_new.color = gruponew_array[u]			cortemp = color_new.color			append sat_save_array cortemp.s 			append hue_save_array cortemp.h 			append valglobal_array cortemp.v			)			color_new.color = gruponew_array[list.selection]						)			)-- close then 1						else ( -- state = false		If tipo == -2 then (			spin.range = [0,100,0]			spin.value = gruponew_array[list.selection]				)else (		--	global color or illum off		color_new.visible = true		color_new.color = gruponew_array[list.selection]		color_new.enabled = true										-- slider load values		cortemp = color_new.color		sat_save = cortemp.s 		hue_save = cortemp.h 		slider.range = [0,(255+sat_save),cortemp.v]				))	)	-----------------------------------------------------------------			-- READ BUTTON PRESSED	on read_val pressed do (	-- restore values if viewport preview was used	If rest_go == true then restore()			--	reset all			val_array = #()			grupo_array = #()			gruponew_array = #()			ni = #()			list.items=#()			spin.value = 0				subobjectlevel = 0			spin.enabled = false			vert_array = #()			vert_temp = #()			globalcheck.checked = false			rt_check.checked = false			vert_ready = false    	try (		objread = getcurrentselection() -- see who is the master read obj		label5.caption = "Master Obj: " + objread[1].name		-- see what vertex type is		select objread[1]	     case tipo_vert.state of 								( 											1: tipo = 0								2: tipo = -1									3: tipo = -2							)								-- name de show vert. type in  vp group								If tipo == 0 then str = "Color"				else If tipo == -1 then str = "Illumination"				else str = "Alpha"	grp8.caption = "Set \"show vertex " + str + " in viewport\""	--	grp2.caption = "Vertex " + str		If classof $ == Editable_mesh then (    	meshop.setMapSupport $ tipo true 		-- Get all values put in val_array		For v=1 to $.numverts do (			-- get the first num			temp = meshop.getmapvert $ tipo v			if tipo == -2 then val_array[v] = temp[1] * 100						  else val_array[v] = temp * 255 								)								       ) else (		polyop.setMapSupport $ tipo true 		-- Get all values put in val_array		For v=1 to $.numverts do (			-- get the first num			temp = polyop.getmapvert $ tipo v			if tipo == -2 then val_array[v] = temp[1] * 100						  else val_array[v] = temp * 255 								)									   									   )	    -- copy array		For y=1 to val_array.count do ni[y] = val_array[y]				if tipo == -2 then ( -- if is alpha...			-- fill list			sort ni			grupo_array[1] = ni[1]	        list.items = append list.items ("        " + (grupo_array[1] as string) + "        -->        " + (grupo_array[1] as string))			--								spin.visible = true		color_new.visible = false		color1.visible = false    	deleteitem ni 1		reset_button.enabled = true		globalcheck.enabled = true		-- fill the group array				While ni.count > 0 do (					    teste1 = ni[1] as string			teste2 = grupo_array[grupo_array.count] as string			If teste1 != teste2  then (						append grupo_array ni[1]						-- add list item						list.items = append list.items ("        " + (grupo_array[grupo_array.count] as string) + "        -->        " + (grupo_array[grupo_array.count] as string))						deleteitem ni 1						)						else deleteitem ni 1		)		)		else (  -- if isn't alpha...			-- fill list			qsort ni compare_qsort				grupo_array[1] = ni[1]	        list.items = append list.items ((grupo_array[1] as string) + "  -->  " + (grupo_array[1] as string))			--				spin.visible = false		color_new.visible = true		color1.visible = true		slider.visible = true				reset_button.enabled = true		slider.enabled = true		globalcheck.enabled = true		rt_check.enabled = true		rt_check.checked = true		v=1		While v+1 <= ni.count do (			If ni[v] != ni[v+1] then (									append grupo_array ni[v+1]								list.items = append list.items ((grupo_array[grupo_array.count] as string) + "  -->  " + (grupo_array[grupo_array.count] as string))								v=v+1								)								else v=v+1		) -- end while				) -- end else		--copy values do gruponew_array		For y=1 to grupo_array.count do gruponew_array[y] = grupo_array[y]		if tipo == -2 then (							spin.value = grupo_array[1] 							spin.enabled = true							) else (								color1.color = grupo_array[1]								color_new.color = gruponew_array[1]								color_new.enabled = true																-- slider load values								cortemp = color_new.color								sat_save = cortemp.s 								hue_save = cortemp.h 								slider.range = [0,(255+sat_save),cortemp.v ]								)		list.selection = 1		apply.enabled = true		write_sim.enabled = true			) catch (messagebox "Invalid selection. Select one poly or mesh object.\n If more then one object is selected, then the first will be the master.\n Doesn't work with groups !" title:"Global Vertex Painter by MBG")	)-- close button read		-----------------------------------------------------------------			---- APPLY ALTERATIONS	on apply pressed do (	-- restore values if viewport preview was used	If rest_go == true then restore()		warning.items = #()		try (		sel = getcurrentselection() 	For obj=1 to sel.count do (   -- start for 1    		select sel[obj] 				If isgroupmember sel[obj]  == true then (			messagebox "Sorry... Doesn't work with groups." title:"Global Vertex Painter by MBG"			exit								)	For v=1 to sel[obj].numverts do (    -- start for 2	If classof $ == Editable_mesh then ( -- is ed_mesh				meshop.setMapSupport $ tipo true			temp = meshop.getmapvert $ tipo v 			if tipo == -2 then test = temp[1] * 100						  else test = temp * 255			-- force to string to test correctly			teste1 = test as string			teste3 = #()			For v=1 to grupo_array.count do (						laos = grupo_array[v] as string						append teste3 laos						)			--			achou = finditem teste3 teste1								If achou != 0 then (						-- put the value in [x,x,x] format again						if tipo == -2 then value = [gruponew_array[achou]/100,gruponew_array[achou]/100,gruponew_array[achou]/100]									  else value = gruponew_array[achou]/255						meshop.setmapvert $ tipo v value					    	)			 		 else warning.items = append warning.items ($.name + " vert:" + v as string + " val:" + test as string)					                									) else ( -- is ed_poly									     		polyop.setMapSupport $ tipo true			temp = polyop.getmapvert sel[obj]  tipo v 			if tipo == -2 then test = temp[1] * 100						  else test = temp * 255			-- force to string to test correctly			teste1 = test as string			teste3 = #()			For v=1 to grupo_array.count do (						laos = grupo_array[v] as string						append teste3 laos						)			--			achou = finditem teste3 teste1								If achou != 0 then (						-- put the value in [x,x,x] format again						if tipo == -2 then value = [gruponew_array[achou]/100,gruponew_array[achou]/100,gruponew_array[achou]/100]									  else value = gruponew_array[achou]/255						polyop.setmapvert $ tipo v value					    	)			 		 else warning.items = append warning.items ($.name + " vert:" + v as string + " val:" + test as string)																	) -- classof test									)-- end for 2	pb1.value = 100.*obj/sel.count	if show_check.checked == true then (		show_vv()				)	)-- end for 1		If sel.count != 0 then (	--	reset all	val_array = #()	grupo_array = #()	gruponew_array = #()	ni = #()	list.items=#()	spin.value = 0	spin.enabled = false	label4.caption = "Done"	subobjectlevel = 0	apply.enabled = false	write_sim.enabled = false	color1.color = [255,255,255]	color_new.color = [255,255,255]	color_new.enabled = false	vert_ready = false	globalcheck.enabled = false	reset_button.enabled = false	rt_check.enabled = false	slider.enabled = false	pb1.value = 0		-- to show the correct vertex type in viewport		case tipo_vert.state of 								( 											1: tipo = 0								2: tipo = -1									3: tipo = -2							)		If tipo == 0 then str = "Color"				else If tipo == -1 then str = "Illumination"				else str = "Alpha"	grp8.caption = "Set \"show vertex " + str + " in viewport\"" 	select sel	)else messagebox "Error. Nothing is selected!" title:"Global Vertex Painter by MBG"		) catch ( messagebox "Error. Invalid selection.\n Everything must be poly or mesh." title:"Global Vertex Painter by MBG"			pb1.value=0 )	)-- end button apply		-----------------------------------------------------------------		-- CHANNEL COPY VALUES		on channel_btn pressed do (	-- restore values if viewport preview was used	If rest_go == true then restore()	sel = getcurrentselection() 	If sel.count == 0 then messagebox "Error. Nothing is selected!" title:"Global Vertex Painter by MBG"try (	For obj=1 to sel.count do (   -- start for 1    			select sel[obj] 				If rdo2.state == 2 then ( -- illum to color		If classof $ == Editable_mesh then (		    	meshop.setMapSupport $ -1 true     			meshop.setMapSupport $ 0 true				For y=1 to $.numverts do (					val = meshop.getmapvert $ -1 y					meshop.setmapvert $ 0 y val										)				)				else (     			polyop.setMapSupport $ -1 true				polyop.setMapSupport $ 0 true				For y=1 to $.numverts do (					val = polyop.getmapvert $ -1 y					polyop.setmapvert $ 0 y val										)								)				)	else (	If rdo2.state == 1 then ( -- color to illum		If classof $ == Editable_mesh then (		    	meshop.setMapSupport $ -1 true     			meshop.setMapSupport $ 0 true				For y=1 to $.numverts do (					val = meshop.getmapvert $ 0 y					meshop.setmapvert $ -1 y val										)				)				else (     			polyop.setMapSupport $ -1 true				polyop.setMapSupport $ 0 true				For y=1 to $.numverts do (					val = polyop.getmapvert $ 0 y					polyop.setmapvert $ -1 y val										)								)	)	else ( -- swap	If classof $ == Editable_mesh then (	meshop.setMapSupport $ -1 true	meshop.setMapSupport $ 0 true	For y=1 to $.numverts do (		val = meshop.getmapvert $ 0 y		temp = meshop.getmapvert $ -1 y		meshop.setmapvert $ -1 y val		meshop.setmapvert $ 0 y temp							)   )	else (	polyop.setMapSupport $ -1 true	polyop.setMapSupport $ 0 true	For y=1 to $.numverts do (		val = polyop.getmapvert $ 0 y		temp = polyop.getmapvert $ -1 y		polyop.setmapvert $ -1 y val		polyop.setmapvert $ 0 y temp							)					)	)	)			pb1.value = 100.*obj/sel.count	)-- close for 1	pb1.value = 0	--	reset all	val_array = #()	grupo_array = #()	gruponew_array = #()	ni = #()	list.items=#()	spin.value = 0		subobjectlevel = 0	spin.enabled = false	slider.visible = false	vert_array = #()	vert_temp = #()	vert_ready = false	select sel		) catch messagebox "Error. Invalid selection.\n Everything must be poly or mesh." title:"Global Vertex Painter by MBG"	)	-----------------------------------------------------------------	-- MAIN CLOSE-- restore values if viewport preview was used and no apply executedon main close do If rest_go==true then restore()-----------------------------------------------------------------				-- HELP !!!! S.O.S !!!!!!!  MAYDAY !!!!!!!!  		on help_bt pressed do (		str = "Global Vertex Painter v1.0  \n"		str = str + "by Mauricio B.G.\n\n"		str = str + "Instructions:\n\n"		str = str + "1. Select a object and press READ FROM SELECTED button.\n"		str = str + "2. The groups of vertex values will appear in the list.\n"		str = str + "3. Click the list to change values (vertices of this group will be selected in viewport).\n"				str = str + "4. Alterate the values as you like. With the \"Global modifications\" option, all the groups will change together.\n"		str = str + "5. Select objects to apply these new values and click \"Appy new values on selected\" button.\n\n"		str = str + "Other Features:\n\n"		str = str + "* \"Put EXACT values on similar objects\" button -> Put on similar objects the same values of the master object, based on vertex number.\n"		str = str + "This will ignore any value alteration and copy all base values to selected objects. (coping between the same vertex index)\n"		str = str + "All the objects must have the same number of vertices.\n\n"		str = str + "* Set \"show vertex TYPE in viewport\" -> Turn on this property on objects after execution. \nThe \"Do now !\" button does it right now on current selection.\n\n"		str = str + "* Channel Copy -> Copy values between the specified channels on selected objects. Immediate execution.\n\n"		str = str + "Good To Know:\n\n"		str = str + "All the operations works only with editable poly or editable mesh objects.\n"		str = str + "Doesn't work with groups.\n"		str = str + "If you use the vertex paint modifier to paint the object first, strange things will happen...\n"		str = str + "I really don't know why... :(\n"		str = str + "This tool was built for low poly ! (but you can try it with everything...)" 				messagebox str title:"Global Vertex Painter by MBG"				)		-----------------------------------------------------------------					-- SLIDER MOVES		on slider changed slnew do (		If globalcheck.checked == false then (			If slnew <= 255  then (				cortemp.v = slnew 				cortemp.s = sat_save			)			else (				cortemp.s = sat_save - (slnew - 255)			)			cortemp.h = hue_save				If slnew >= sat_save + 255 then ( --force white			cortemp.v = 255			cortemp.s = 0						)     		color_new.color = cortemp			)else(						-- global modifications stuff						For u=1 to gruponew_array.count do (						If slnew < 0 then (			xx = (slider.value*valglobal_array[u])/100			cortemp.v = valglobal_array[u] + xx			cortemp.s = sat_save_array[u]			cortemp.h = hue_save_array[u]			)else ( -- if >0			If slnew == 100 then ( -- if is the maximum			cortemp.v = 255			cortemp.s = 0			)			else(			nii = 255+sat_save_array[u]			xx = slider.value*(nii-valglobal_array[u])/100						teste = valglobal_array[u] + xx			If teste > 255 then (			cortemp.v = 255			cortemp.s = sat_save_array[u] - (teste - 255)			) else 	(			cortemp.v = valglobal_array[u] + xx			cortemp.s = sat_save_array[u]			)			cortemp.h = hue_save_array[u]					)			)						compose = [cortemp.r,cortemp.g,cortemp.b]			gruponew_array[u] = compose			list.items[u] = (grupo_array[u] as string) + "  -->  " + (compose as string)			list.items = list.items			color_new.color = gruponew_array[list.selection]			) -- end global stuff									)		)		-----------------------------------------------------------------			-- SLIDER RELEASED	on slider buttonup do (		If globalcheck.checked == false then (	-- assign new color to arrays and list	compose = [color_new.color.r,color_new.color.g,color_new.color.b]	gruponew_array[list.selection] = compose	list.items[list.selection] = (grupo_array[list.selection] as string) + "  -->  " + (compose as string)	list.items = list.items	)	-- Real time update stuff		If rt_check.checked == true then (	rest_go = true		 -- GLOBAL REALTIME UPDATE!!!!!!!!!!!!!!!!!!!!!	If globalcheck.checked == true then ( -- begin global		If classof $ == Editable_mesh then ( --mesh	-- restaure values	For x=1 to $.numverts do meshop.setmapvert $ tipo x (val_array[x]/255)		-- and then check and change values to see in viewport	For v=1 to $.numverts do (	temp = meshop.getmapvert $ tipo v	onde = finditem grupo_array (temp*255) 			If vert_ready ==false then (	if vert_array[onde] == undefined then vert_array[onde] = #()	append vert_array[onde]  v	)	meshop.setmapvert $ tipo v (gruponew_array[onde]/255)		)	)else ( -- poly	-- restaure values	For x=1 to $.numverts do polyop.setmapvert $ tipo x (val_array[x]/255)		-- and then check and change values to see in viewport	For v=1 to $.numverts do (	temp = polyop.getmapvert $ tipo v	onde = finditem grupo_array (temp*255) 		If vert_ready ==false then (	if vert_array[onde] == undefined then vert_array[onde] = #()	append vert_array[onde]  v	)	polyop.setmapvert $ tipo v (gruponew_array[onde]/255)	)	update $	)	vert_ready = true	) -- end global	else (		If classof $ == Editable_mesh then ( -- it's mesh	If vert_array[list.selection] == undefined then (    	For v=1 to $.numverts do (	    temp = meshop.getmapvert $ tipo v 		If (temp*255) == grupo_array[list.selection] then (			append vert_temp v			vert_array[list.selection] = vert_temp			meshop.setmapvert $ tipo v (compose/255) 			--update $		)		)-- end for		)	else (			For y=1 to vert_array[list.selection].count do (			  meshop.setmapvert $ tipo vert_array[list.selection][y] (compose/255) 			--  update $				 )				)-- end else		)	else ( -- it's poly		If vert_array[list.selection] == undefined then (	    	For v=1 to $.numverts do (	    temp = polyop.getmapvert $ tipo v 		If (temp*255) == grupo_array[list.selection] then (			append vert_temp v			vert_array[list.selection] = vert_temp			polyop.setmapvert $ tipo v (compose/255) 						)				)-- end for		update $		)	else (			For y=1 to vert_array[list.selection].count do (			 polyop.setmapvert $ tipo vert_array[list.selection][y] (compose/255) 			 )			  update $				)-- end else		)	)			)-- end realtime stuff	)-- end slider buttonup	-----------------------------------------------------------------	-- DO NOW! BUTTON PRESSEDon show_button pressed do (If list.items.count ==  0 then (case tipo_vert.state of 								( 											1: tipo = 0								2: tipo = -1									3: tipo = -2							)				)sel = getcurrentselection() If sel.count == 0 then messagebox "Error. Nothing is selected!" title:"Global Vertex Painter by MBG"				else (					For obj=1 to sel.count do (  		select sel[obj] 		show_vv()	pb1.value = 100.*obj/sel.count)select sellabel4.caption = "Done"pb1.value = 0))-----------------------------------------------------------------	-- VERTEX TYPE RADIOBUTTON CHANGEDon tipo_vert changed escolha do (If list.items.count == 0 then (If escolha == 1 then str = "Color"				else If escolha == 2 then str = "Illumination"					else str = "Alpha"grp8.caption = "Set \"show vertex " + str + " in viewport\""))-----------------------------------------------------------------	-- SHADED BUTTON CHANGE STATEon shaded changed state do (shaded_state = state)-----------------------------------------------------------------	-- RESET BUTTON PRESSEDon reset_button pressed do (If tipo == -2 then ( -- alpha typeIf globalcheck.checked == false then (gruponew_array[list.selection] = grupo_array[list.selection]list.items[list.selection] = ("        " + grupo_array[list.selection] as string) +  "        -->        " + (gruponew_array[list.selection] as string)list.items = list.itemsspin.value = gruponew_array[list.selection])else ( -- global turn onFor h=1 to gruponew_array.count do (gruponew_array[h] = grpcal[h]list.items[h] = ("        " + grupo_array[h] as string) +  "        -->        " + (gruponew_array[h] as string))list.items = list.itemsspin.value = 0))else ( -- not alphaif globalcheck.checked == true then (slider.value = 0For u=1 to gruponew_array.count do (						nii = 255+sat_save_array[u]			xx = slider.value*(nii-valglobal_array[u])/100						teste = valglobal_array[u] + xx			If teste > 255 then (			cortemp.v = 255			cortemp.s = sat_save_array[u] - (teste - 255)			) else 	(			cortemp.v = valglobal_array[u] + xx			cortemp.s = sat_save_array[u]			)			cortemp.h = hue_save_array[u]							compose = [cortemp.r,cortemp.g,cortemp.b]			gruponew_array[u] = compose			list.items[u] = (grupo_array[u] as string) + "  -->  " + (compose as string)			list.items = list.items			color_new.color = gruponew_array[list.selection]			) -- end global stuff 										-- UPDATE			If rt_check.checked == true then (			rest_go = true			If classof $ == Editable_mesh then ( --mesh	-- restore values	For x=1 to $.numverts do meshop.setmapvert $ tipo x (val_array[x]/255)		-- and then check and change values to see in viewport	For v=1 to $.numverts do (	temp = meshop.getmapvert $ tipo v	onde = finditem grupo_array (temp*255) 			If vert_ready ==false then (	if vert_array[onde] == undefined then vert_array[onde] = #()	append vert_array[onde]  v	)	meshop.setmapvert $ tipo v (gruponew_array[onde]/255)	)	update $	)else ( -- poly	-- restore values	For x=1 to $.numverts do polyop.setmapvert $ tipo x (val_array[x]/255)		-- and then check and change values to see in viewport	For v=1 to $.numverts do (	temp = polyop.getmapvert $ tipo v	onde = finditem grupo_array (temp*255) 		If vert_ready ==false then (	if vert_array[onde] == undefined then vert_array[onde] = #()	append vert_array[onde]  v	)	polyop.setmapvert $ tipo v (gruponew_array[onde]/255)	)	update $	)	vert_ready = true	) -- end global			)	else ( -- not global						gruponew_array[list.selection] = grupo_array[list.selection]			list.items[list.selection] = (grupo_array[list.selection] as string) + "  -->  " + (gruponew_array[list.selection] as string)			list.items = list.items			-- load slider				color_new.color = gruponew_array[list.selection]					cortemp = color_new.color			sat_save = cortemp.s 			hue_save = cortemp.h 			slider.range = [0,(255+sat_save),cortemp.v ]						)))-----------------------------------------------------------------	) -- close mainglobal maintry(destroyDialog main) catch()createdialog main-- )-- THE END !!!!!!!!!!