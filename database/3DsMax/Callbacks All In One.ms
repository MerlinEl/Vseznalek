--functionsfn selectionChanged	ev ar = ( format "e:% a:%\n" er ar )fn nodeDeleted 		ev ar = ( format "e:% a:%\n" ev ar )fn cbBegin			ev ar = ( format "e:% a:%\n" ev ar )fn cbEnd			ev ar = ( format "e:% a:%\n" ev ar )--registerhandler_all = NodeEventCallback mouseUp:true delay:1000 \selectionChanged:selectionChanged \deleted:nodeDeleted \callbackBegin: cbBegin \callbackEnd: cbEnd--unregisterhandler_all = undefined --unregister selection change callbacksgc()fn unload = (				removeAllMeasures()		--unregister callbacks		mcLiveMeasureCallbacks = undefined		gc light:true	)      fn selectionChanged ev nd = (				--format "selectionChanged > Event:%, Nodes:%\n" ev nd 		local sel = selection as Array		format "Objects selection changed to:%\n" sel		updateAllMeasures sel #obj	)	fn subobjectSelectionChanged ev nd = (				--format "subobjectSelectionChanged >  Event:%, Nodes:%\n" ev nd 		--(for n in nd do print (getAnimByHandle n)) --get nodes by handle		local obj = selection[1]		if not mcLiveMeasureCollector.isValidObject obj do return false		local subsel = mcLiveMeasureCollector.getSubobjectSelection obj		format "Subobject selection changed to:%\n" subsel		updateAllMeasures obj  #subobj	)	fn nodeDeleted ev nd = (				format "nodeDeleted >  Event:%, Nodes:%\n" ev nd 		unload()	)	fn init = (		--register callbacks		mcLiveMeasureCallbacks = NodeEventCallback mouseUp:true delay:1000 \		selectionChanged:selectionChanged \		subobjectSelectionChanged:subobjectSelectionChanged \		deleted:nodeDeleted	)