local tmr_max_count = 0;local timerFunction;Timer timerDelay "Timer" pos:[716,16] width:24 height:24 enabled:true interval:200 active:falsefn do_something = (	tmr_max_count = 10		format "execute delayed fn:%\n" tmr_max_count		timerDelay.active = true		fn timerFunction = (						print "done"		))	on timerDelay tick do (			format "timer progress tick:% max:%\n" timerDelay.ticks tmr_max_count		tmr_max_count = tmr_max_count-1		if tmr_max_count <= 0 do (						timerDelay.active = false			tmr_max_count = 0			timerFunction()			format "timer stop at :%\n" timerDelay.ticks		)	)---ORfunction PerformDelayedTasks sender evt=(	-- important: don't repeat this timer event	sender.enabled = false	-- for sanity and cleanup	dotnet.RemoveEventHandler sender "Elapsed" PerformDelayedTasks        	-- put all your tasks below	macros.run "Track View" "LaunchFCurveEditor" -- Curve Editor Toggle	actionMan.executeAction 0 "50048" -- Tools: Material Editor Toggle         )delayTimer= dotnetobject "Windows.Forms.Timer"delayTimer.Interval=2000dotnet.AddEventHandler delayTimer "Tick" PerformDelayedTasksdelayTimer.enabled = true