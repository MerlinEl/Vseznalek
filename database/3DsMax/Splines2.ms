(   -- Initialize line  new_spline = splineShape()   addnewspline new_spline   cRad = 50 -- A number for the curve radius  cAng = 23 -- Some random angle    -- Throw some point3 values (coordinates) in an array just to have something.  -- Using sin and cos to set some lines in a curve.  pointArray = for i = 1 to 10 collect [cRad*(sin(i*cAng)),cRad*(cos(i*cAng)),0]   -- Add points in array to construct the line  for i in pointArray do addknot new_spline 1 #smooth #curve i) p1 and p2 are the end pointsm1 and m2 are the tangentst is the time along the curve that you want./******************************	Cubic Hermite	*******************************/	fn cubicHermite		p1:[0,0,0]		p2:[1,0,1]		m1:[1,0,0]		m2:[1,0,0]		t:0.0	=	(		p=	(2*t^3-3*t^2+1)*p1+			(t^3-2*t^2+t)*m1+			(-2*t^3+3*t^2)*p2+			(t^3-t^2)*m2	)t = 0.5 -- our value in time between 0 and 1  p = #(10,20,30,40) -- our array or knot vectors and tangents n = 3 -- our nth degree generalizarion fn factorial n = (if n <=0 then 1 else n * factorial(n-1))e = 0for i = 0 to n do(bc = (factorial n)/((factorial (n-i)) * (factorial i))e = e + p[(i+1)]*(bc*t^i*(1-t)^(n-i)))Here is my first attempt. Just a prototype with the maxscript functions.At first, you have to create severals points ‘helper’ (in the same order as the curve).Then you run the script.(-- collect some infolocal thePathSelection = $Point*local posArray = for obj in thePathSelection collect obj.pos-- create the sharp curvelocal theSharpSpline = splineShape()local splineIdx = addNewSpline theSharpSplinefor currentPos in posArray do ( addKnot theSharpSpline splineIdx #smooth #curve currentPos )updateShape theSharpSpline-- search middle pointslocal prevPct = 0.0local midKnot = #(posArray[1])for i=2 to posArray.count do (	local nextPct = nearestPathParam theSharpSpline posArray[i]	local midPct = ((nextPct-prevPct)/2.0)+prevPct	local midpos = pathInterp theSharpSpline midPct	append midKnot midpos	prevPct = nextPct)--forappend midKnot posArray[posArray.count]-- create the smooth curvelocal theSmoothSpline = splineShape()local splineIdx = addNewSpline theSmoothSplinefor currentPos in midKnot do ( addKnot theSmoothSpline splineIdx #smooth #curve currentPos )updateShape theSmoothSpline-- stick the points on the curvefor i=2 to posArray.count-1 do (	local newPos = pathInterp theSmoothSpline (nearestPathParam theSmoothSpline posArray[i])	thePathSelection[i].pos = newPos	)delete theSharpSplinedelete theSmoothSpline)--local--vyhlazení.myGraphics.SmoothingMode = SmoothingMode.AntiAlias;myGraphics.DrawLine(myPen, 0, 0, 12, 8);