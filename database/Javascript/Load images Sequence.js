var canvas, stage, exportRoot;(lib.BitmapName = function() {    this.initialize(img.BitmapName); // THIS WILL BE NULL IF LOADED LATER}).prototype = p = new cjs.Bitmap();p.nominalBounds = new cjs.Rectangle(0,0,600,800);// Pre-create dummy instances BEFORE you create the `exportRoot`var manifest = lib.properites.manifestPart01;for (var i=0, l=manifest.length; i<l; i++) {    images[manifest.id] = document.createElement("img"); // Empty instances    // Note: Don't set src}function init() {    canvas = document.getElementById("canvas");    images = images||{};    preloadLaunch(); }function preloadLaunch(){    var loader = new createjs.LoadQueue(false);    loader.addEventListener("fileload", handleFileLoad);    loader.addEventListener("complete", handleComplete);    loader.loadManifest(lib.properties.manifestLaunch); //selects the manifest from createjs export,  first image says please wait.}function handleFileLoad(evt) {		if (evt.item.type == "image") {         if (images[evt.item.id] != null) {            // Just update the existing instance.            images[evt.item.id].src = evt.result.src;        } else {            // Original behaviour            images[evt.item.id] = evt.result;         }    }  }function handleComplete() {    exportRoot = new lib.project();    stage = new createjs.Stage(canvas);    stage.addChild(exportRoot);    stage.update();    stage.enableMouseOver();    createjs.Ticker.setFPS(lib.properties.fps);    createjs.Ticker.addEventListener("tick", stage); }/// triggers from animation timelinefunction preloadPart01() {    var loader01 = new createjs.LoadQueue(false);    loader01.addEventListener("fileload", handleFileLoad);    loader01.addEventListener("complete", start);    loader01.loadManifest(lib.properties.manifestPart01); //selects the manifest from createjs export   }function start() {    stage.update();    exportRoot.animation.gotoAndPlay("START"); // files are loaded in manifestPart01 and starts the animation, but loaded images are not visible.}