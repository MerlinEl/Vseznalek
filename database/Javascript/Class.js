// *******************************	// Collect movieclips as levels	// *******************************	class ILevel {		initialized = false;		levelIndex = 0;		container = null;		components = {};		constructor(container) {			var levelIndex = parseInt(container.name.split("level_").pop());			if (levelIndex != null) {				this.levelIndex = levelIndex;				this.container = container;			} else {				log("Unable get level from container:", container.name, "levelIndex:", levelIndex)			}		}		get visible() {			return this.container.visible		}		set visible(value) {			this.container.visible = value		}		get componentsLength(){						return Object.keys(this.components).length;		}	}	class LevelManager {		levels = [];		currentLevel = 0;		constructor() {};		addLevel(iLevel) {			this.levels.push(iLevel);		}		getLevel(levelIndex){						var level;			this.levels.forEach((lvl)=>{				if (lvl.levelIndex == levelIndex) level = lvl;			})			return level;		}		getCurrentLevel(){									return this.getLevel(this.currentLevel)		}		// hide all levels except levelIndex		gotoLevel(levelIndex) {			this.currentLevel = levelIndex;			this.levels.forEach(function (lvl) {				lvl.visible = lvl.levelIndex == levelIndex;			})		}	}	tl.levelManager = new LevelManager();	tl.children.forEach((child)=> {		if (child.name != null && child.name.indexOf("level_") != -1) {			tl.levelManager.addLevel(new ILevel(child));		}	})