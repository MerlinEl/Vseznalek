function doSomething(callback) {    // ...    // Call the callback    callback('stuff', 'goes', 'here');}function foo(a, b, c) {    // I'm the callback    trace(a + " " + b + " " + c);}doSomething(foo); //stuff goes here//OR// base classvar Thing:Object = {}// Create a propertyThing.name = "";// Create a methodThing.doSomething = function(callback) {    // Call our callback, but using our own instance as the context    callback.call(this);}var t = Thing; // instancet.name = 'Joe';t.doSomething(function(){	  	trace(this.name);});//OR//Sometimes it's useful to pass the arguments you want //to give the callback as an array, rather than individually. //You can use apply to do that:// base classvar Thing:Object = {}Thing.name = "";Thing.doSomething = function(callback) {    // Call our callback, but using our own instance as the context    callback.apply(this, ['Hi', 3, 2, 1]);}function foo(salutation, three, two, one) {    trace(salutation + " " + this.name + " - " + three + " " + two + " " + one);}var t = Thing;t.name = 'Joe';t.doSomething(foo);  // Alerts "Hi Joe - 3 2 1" via "foo"		public function forEach(callback:Function, ...args):void {			var T, O, k;			O = source; // [] Array			k = 0;			if (args.length > 1) T = args;			var len = O.length >>> 0;			while (k < len) {								var kValue;				if (k in O) {										kValue = O[k];					callback.call(T, kValue, k, O);				}				k++;			}		}