prog_fill.addEventListener(TimerEvent.TIMER_COMPLETE, updateBooksContainer("Počet dostupných IUč: "));private function updateBooksContainer(msg:String):Function {	return function timerComplete(e:TimerEvent):void {						ctrace("target:{0} Before:{1} ", e.target, e.target.hasEventListener(TimerEvent.TIMER_COMPLETE));		e.target.removeEventListener(TimerEvent.TIMER_COMPLETE, timerComplete);						ctrace("target:{0} After:{1} ", e.target, e.target.hasEventListener(TimerEvent.TIMER_COMPLETE));		iuGlobal.log(msg + (books_container.length - 1)); 	};}ORvar f:Function = onObjectClickedHandler(myColor, myHeight, myWidth);myObject1.addEventListener(MouseEvent.CLICK, f);myObject2.addEventListener(MouseEvent.CLICK, f);/* … */myObject1.removeEventListener(MouseEvent.CLICK, f);myObject2.removeEventListener(MouseEvent.CLICK, f);ORvar functionOnClick:Function = onClick(true, 123, 4.56, "string");stage.addEventListener(MouseEvent.CLICK, functionOnClick);function onClick(b:Boolean, i:int, n:Number, s:String):Function {  return function(e:MouseEvent):void {    trace("Received " + b + ", " + i + ", " + n + " and " + s + ".");  };}trace("Before: " + stage.hasEventListener(MouseEvent.CLICK));stage.removeEventListener(MouseEvent.CLICK, functionOnClick);trace("After: " + stage.hasEventListener(MouseEvent.CLICK));ORfunction onClick(s:String):Function {  return function(e:MouseEvent):void {    trace("The square " + s + " at x = " + e.currentTarget.x + "px was clicked");  };}var myFunctions:Array = new Array();for (var i:int = 0; i < 10; i++) {  myFunctions.push(onClick("#" + (i+1)));}for (i = 0; i < myFunctions.length; i++) {  var square:Sprite = new Sprite();  square.name = "sqr" + i;  square.addChild(new Bitmap(new BitmapData(20, 20, false, 0)));  square.x = 5 + 25 * i;  square.addEventListener(MouseEvent.CLICK, myFunctions[i]);  stage.addChild(square);}//to remove every listener properlyfor (i = 0; i < myFunctions.length; i++) {  square = stage.getChildByName("sqr" + i) as Sprite;  trace("Before (#" + (i+1) + "): " + square.hasEventListener(MouseEvent.CLICK));  square.removeEventListener(MouseEvent.CLICK, myFunctions[i]);  trace("After (#" + (i+1) + "): " + square.hasEventListener(MouseEvent.CLICK));  stage.removeChild(square);}ORvar s1:Boolean = true;station1.addEventListener(MouseEvent.ROLL_OVER, function(e:MouseEvent) : void { spread(e, s1) });station1.addEventListener(MouseEvent.ROLL_OUT, function(e:MouseEvent) : void { collapse(e, s1) });function spread(event:MouseEvent ,bb:Boolean):void { if(bb != true) event.currentTarget.gotoAndPlay(2);}function collapse(event:MouseEvent,bb:Boolean ):void {    if(bb != true) event.currentTarget.gotoAndPlay(18);}ORYou could use weak references to let the listeners be removed when the object is Garbage Collected.object.addEventListener( ......, ......., false, 0, true );