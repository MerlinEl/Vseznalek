function magicSquare(size_x:int, size_y:int, sum:int):Number{	var n, col, row, k, r, c, diag=0;	var magic = makeSquare(size_x, size_y);  /* Declare a two-dimensional array of size x size */	trace("This program creates a \"magic square\" of specified odd numbers.");	trace("The size must be an odd number.");	trace("Enter odd number from 3 to 15: ");	trace("magic square x:"+magic.length + " y:"+magic[0].length)	n = sum;	row = 0;               	col = n / 2;        	magic[row][col] = 1;   	for (var i=2; i <= n * n; i++){		if (--row < 0) row = (n-1);		if (++col > (n-1)) col = 0;           		if (magic[row][col] != 0){		if (++row > (n-1))    						row = 0;			if (--col < 0)			col = (n-1);  			while (magic[row][col] != 0)    			if (++row > (n-1))  			row = 0;         		}                                        		magic[row][col] = i;  	} trace("mag:"+magic)	//End of the logic loop to fill in the magic square 	//Sum the row - display at right side	for(r=0; r<n; r++){		for(c=0; c<n; c++){			magic[r][n]+=magic[r][c];		}	}	//Sum the columns - display at the bottom 	for(c=0; c<n; c++){		for(r=0; r<n; r++){			magic[n][c]+=magic[r][c];		}	}	// Sum up and down diagonals - display at the end on diagonals 	for(r=0; r<n; r++){		magic[n][n]+=magic[r][r];	}	for(r=1; r<(n-1); r++){		c = n - r + 1;		diag+=magic[r][c];	}	//Print out matrix with row, column, and diagonal sums 	trace("\n");	for(r=0; r<(n+1) ; r++){		trace("\n");		for(c=0; c<(n+1) ; c++)		trace("%4d", magic[r][c]);   }    return 0;}function makeSquare(size_x:int, size_y:int):Array{		var arr:Array = new Array();	for (var pos_x:int = 0; pos_x < size_x; pos_x++){				arr[pos_x] = new Array();		for (var pos_y:int = 0; pos_y < size_y; pos_y++){					arr[pos_x].push(0);		}	}	return arr;}magicSquare(3, 3, 2)