change an icon on the fly, like a label, using actionscript// Import the required component classes. import fl.controls.Button; import fl.controls.CheckBox; /* Create a new Button component instance, set the various icon styles, and add the button to the display list. */ var myButton:Button = new Button(); myButton.label = "icons"; myButton.enabled = true; myButton.toggle = true; myButton.setStyle("upIcon", BulletCheck); myButton.setStyle("overIcon", BulletWarning); myButton.setStyle("downIcon", BulletCritical); myButton.setStyle("disabledIcon", IconCheck); myButton.setStyle("selectedUpIcon", BulletCheckSelected); myButton.setStyle("selectedOverIcon", BulletWarningSelected); myButton.setStyle("selectedDownIcon", BulletCriticalSelected); myButton.setStyle("selectedDisabledIcon", IconCheckSelected); myButton.setSize(120, 40); myButton.move(10, 10); addChild(myButton); /* Create a new CheckBox component instance, and add it to the display list. This button will control whether or not the button instance is enabled. */ var enabledCheckBox:CheckBox = new CheckBox(); enabledCheckBox.label = "enabled"; enabledCheckBox.selected = myButton.enabled; enabledCheckBox.move(10, 60); enabledCheckBox.addEventListener(Event.CHANGE, enabledChangeHandler); addChild(enabledCheckBox); /* Create a new Button component instance, and add it to the display list. This button will control whether or not the button instance is toggled. */ var toggleCheckBox:CheckBox = new CheckBox(); toggleCheckBox.label = "toggle"; toggleCheckBox.selected = myButton.toggle; toggleCheckBox.move(10, 80); toggleCheckBox.addEventListener(Event.CHANGE, toggleChangeHandler); addChild(toggleCheckBox); /* Handler function for the enabled check box. This function gets called when the value of the enabledCheckBox is changed, and sets the button's enabled property based on whether the enabledCheckBox instance is currently selected. */ function enabledChangeHandler(event:Event):void { myButton.enabled = enabledCheckBox.selected; } /* Handler function for the toggle check box. This function gets called when the value of the toggleCheckBox is changed, and sets the button's toggle property based on whether the toggleCheckBox instance is currently selected. */ function toggleChangeHandler(event:Event):void { myButton.toggle = toggleCheckBox.selected; } I found an answer that works for me. In my .mxml file, I create Classes for the icons I will use:// Classes for icons[Embed(source='images/closeWindowUp.png')]public static var CloseWindowUp:Class;[Embed(source='/images/Down_Up.png')]public static var Down_Up:Class;[Embed(source='/images/Up_Up.png')]public static var Up_Up:Class;In the Actionscript portion of my application, I use these classes when dynamically creating buttons:var buttonHBox:HBox = new HBox();var closeButton:Button = new Button();var upButton:Button = new Button();var downButton:Button = new Button();closeButton.setStyle("icon", SimpleWLM.CloseWindowUp);buttonHBox.addChild(closeButton);upButton.setStyle("icon", SimpleWLM.Up_Up);buttonHBox.addChild(upButton);downButton.setStyle("icon", SimpleWLM.Down_Up);buttonHBox.addChild(downButton);------------------------------------------------------------------------------------------ -------<mx:Button label="Test" id="but" icon="{up}" click="changeIcon()"/> var closeButton = new Button();closeButton.setStyle("icon", "@Embed(source='images/closeWindowUp.png')");