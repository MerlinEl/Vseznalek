import gra.ColorUtil;import gra.HEX;import gra.RGB;import gra.HSB;var colorValues:Array = [0xFFFFFF, 0xFFFF00, 0xE6E6FA, 0xADFF2F, 0x7FFF00, 0x00FF7F, 0xFFFAFA, 0xFFD700, 0xFFC0CB, 						 0x9ACD32, 0x7CFC00, 0x00FA9A, 0xF8F8FF, 0xFFA500, 0xFFB6C1, 0x808000, 0x32CD32, 0x00FF00, 						 0xF5F5F5, 0xFF8C00, 0xFF69B4, 0x8FBC8F, 0x228B22, 0x008000, 0xFFF5EE, 0xF4A460, 0xD8BFD8, 						 0x90EE90, 0x6B8E23, 0x006400, 0xFFFAF0, 0xE9967A, 0xDDA0DD, 0x98FB98, 0x556B2F, 0x008B8B, 						 0xFDF5E6, 0xFFA07A, 0xEE82EE, 0xF0FFF0, 0x2E8B57, 0x008080, 0xFAF0E6, 0xD2691E, 0xFF00FF, 						 0xF5FFFA, 0x3CB371, 0x00CED1, 0xF5F5DC, 0xFF4500, 0xFF1493, 0xF0FFFF, 0x66CDAA, 0x00FFFF, 						 0xFFF8DC, 0xB22222, 0xC71585, 0xE0FFFF, 0x20B2AA, 0x00BFFF, 0xFFEFD5, 0x8B0000, 0xCD5C5C, 						 0xAFEEEE, 0x48D1CC, 0x6495ED, 0xFAEBD7, 0x800000, 0xDB7093, 0xB0C4DE, 0x40E0D0, 0x1E90FF, 						 0xFFEBCD, 0xA52A2A, 0xF08080, 0xFF00FF, 0x7FFFD4, 0x4169E1, 0xFFE4C4, 0xA0522D, 0xFA8072, 						 0xDA70D6, 0xB0E0E6, 0x6A5ACD, 0xFFDEAD, 0x8B4513, 0xFF7F50, 0x9370DB, 0xADD8E6, 0x7B68EE, 						 0xFFE4B5, 0xB8860B, 0xFF6347, 0xBA55D3, 0x87CEEB, 0x0000FF, 0xF5DEB3, 0xDAA520, 0xDC143C, 						 0x9932CC, 0x87CEFA, 0x0000CD, 0xFFDAB9, 0xCD853F, 0x8A2BE2, 0x4682B4, 0x483D8B, 0xEEE8AA, 						 0xBDB76B, 0xFFE4E1, 0x9400D3, 0x5F9EA0, 0x00008B, 0xFAFAD2, 0xBC8F8F, 0xFFF0F5, 0x8B008B, 						 0x778899, 0x000080, 0xFFFACD, 0xDEB887, 0xDCDCDC, 0x800080, 0x708090, 0x191970, 0xFFFFE0, 						 0xD2B48C, 0xD3D3D3, 0xA9A9A9, 0x696969, 0x4B0082, 0xFFFFF0, 0xF0E68C, 0xC0C0C0, 0x808080, 						 0x2F4F4F, 0x000000]//var sorted_colors = ColorUtil.sortByBrightness(colorValues);//var sorted_colors = sortColorsByDistance(colorValues)var sorted_colors = sortColors(colorValues)var cnt = 10;var block = [];trace("PASS")for each (var c:HSB in sorted_colors){ 	if (cnt == 0){		trace(block+",")		block = [];		cnt = 10;	}	block.push(c.toHex().toString());	cnt--;}function sortColors(colors) {	    for (var c = 0; c < colors.length; c++) {        /* Get the RGB values to calculate the Hue. */		var hex:HEX = new HEX(colors[c]);		var rgb:RGB = hex.toRgb();        var r = rgb.r;        var g = rgb.g;        var b = rgb.b;         /* Getting the Max and Min values for Chroma. */        var max = Math.max.apply(Math, [r,g,b]);        var min = Math.min.apply(Math, [r,g,b]);        /* Variables for HSV value of hex color. */        var chr = max-min;        var hue = 0;        var val = max;        var sat = 0;         if (val > 0) {            /* Calculate Saturation only if Value isn't 0. */            sat = chr/val;            if (sat > 0) {                if (r == max) {                     hue = 60*(((g-min)-(b-min))/chr);                    if (hue < 0) {hue += 360;}                } else if (g == max) {                     hue = 120+60*(((b-min)-(r-min))/chr);                 } else if (b == max) {                     hue = 240+60*(((r-min)-(g-min))/chr);                 }            }        }         //trace("HEX:"+hex+" params:"+hex.expand())        /* Modifies existing objects by adding HSV values. */		var hsb:HSB = new HSB(hue, sat, val);        hsb.h = hue;        hsb.s = sat;        hsb.b = val;		colors[c] = hsb;				/*		hex.h = hue;        hex.s = sat;        hex.b = val;		colors[c] = hex;		*/    }     /* Sort by Hue. */    return colors.sort(function(a,b){return a.h - b.h});}//BY DISTANCE/*function colorDistance(color1, color2) {    // This is actually the square of the distance but    // this doesn't matter for sorting.    var result = 0;    for (var i in color1)        result += (color1[i] - color2[i]) * (color1[i] - color2[i]);    return result;}function sortColorsByDistance(colors) {    // Calculate distance between each color	var rgb_colors = [];	for each (var c in colors) rgb_colors.push(ColorUtil.HexToRGB(c));    var distances = [];    for (var a = 0; a < rgb_colors.length; a++) {		        var color_a:Object = rgb_colors[a];				for (var b = 0; b < rgb_colors.length; b++){            			var color_b:Object = rgb_colors[b];			distances.push({"colors":[color_a, color_b], "distance":colorDistance(color_a, color_b)});		}    }		//sort colors by distance    distances.sort(function(a, b) {        return a.distance - b.distance;    });	//get first color from each cluster	var sorted_colors = [];	for each (var o:Object in distances) {				var rgb:Object = o.colors[0];		var color:uint = ColorUtil.RGBtoHex(rgb.r, rgb.g, rgb.b);		var hex:String = ColorUtil.HEXtoString(color, true)		if (sorted_colors.indexOf(hex) != -1) continue; //skip dupplicates		sorted_colors.push(hex);	}	return sorted_colors;}*/