package {	import flash.display.*;	class MySprite extends Sprite {		private var children:Array = new Array();		public function MySprite() {		}		public override function addChild(child:DisplayObject):DisplayObject {			children.push(child);			super.addChild(child);			return child;		}	}}package {		import flash.display.Sprite;		public dynamic class MyClass extends Sprite {				public function MyClass(){						// prototype = new Object(); // ERROR, cannot change prototype of class			prototype.newValue = 1; // OK, adding (or removing) prototyped values						trace(this.newValue); // 1			trace(prototype.toString); // function Function() {}			trace(prototype.addChild); // undefined			trace(addChild); // function Function() {}			// dynamic ("old style") class definition			var TempClass:Function = function():void {				trace("Create TempClass");			}						TempClass.prototype = prototype; // OK, can set up inheritance						var tempObject:* = new TempClass(); // "Create TempClass"						trace(tempObject.newValue); // 1		}	}}