//Remove al child nodes in XMLmyXmlObj.setChildren(new XMLList());var xml:XML = new XML(    <record id="5" name="AccountTransactions">        <field id="34" type="Number">            <test id="0"/>        </field>    </record>);//make array of attribute keys, excluding "id" and "type"var attributesArray:Array = new Array();for each (var attribute:Object in xml.attributes()){    var attributeName:String = attribute.name();    if (attributeName != "id" && attributeName != "type")    {        attributesArray.push(attributeName);    }}//loop through filtered attributes and remove them from the xmlfor each (var attributeKey:String in attributesArray){    delete xml.@[attributeKey];    delete xml.descendants().@[attributeKey];}-------------------------------------------------------------------------------------------------			//delete selection from xml			trace("XML before:\n"+XMLData.toXMLString()+"\n\n");			removeNodeByName(XMLData.TITLES, book_name);			trace("XML after:\n"+XMLData.toXMLString());		private static function removeNodeByName(xml_list:XMLList, node_name:String):void{			for each (var line:XML in xml_list.children()) {								var index = line.childIndex();				//trace ("line name:"+line.@label+" index:"+index)				if (line.@label == node_name) {delete xml_list.children()[index]; return};			}		};var xml:XML = new XML(<data/>);xml.appendChild(<cards/>)xml.cards.appendChild(<a name="aa"/>);xml.cards.appendChild(<b name="bb"/>);xml.cards.appendChild(<c name="cc"/>);trace("\nbefore:\n", xml)function removeNodeByName(xml:XML, node_name:String):void{	var i:uint = 0;	for(i; i<xml.cards.children().length(); i++)	{		trace("node:", xml.cards.children()[i].@name, "seek:", node_name)		if(xml.cards.children()[i].@name == node_name)		{			trace("deleting...")			delete xml.cards.children()[i];			return;		}	}}removeNodeByName(xml, "bb");trace("\nafter:\n", xml); //// 1// 3// /*-----------------------------------Recursively replace nodeNames.-------------------------------------*/private function findAndReplaceTagNames(xml:XML,find:String,replace:String):XML{if(xml.localName() == find){xml.setLocalName(replace);}var n:int=0;var c:XML;while(n <xml.children().length()){c=xml.children()[n];findAndReplaceTagNames(c,find,replace);n++;}return xml;} /*-----------------------------------------Recursively replace attributes.-------------------------------------------*/private function findAndReplaceAttributeNames(xml:XML,find:String,replace:String,in_tags_named:String=""):XML{var ok:Boolean=true;if(in_tags_named != "" && xml.localName() != in_tags_named){ok=false;}if(xml.@[find] != null && ok){xml.@[replace]=xml.@[find];delete xml.@[find];}var n:int=0;var c:XML;while(n <xml.children().length()){c=xml.children()[n];findAndReplaceAttributeNames(c,find,replace);n++;}return xml;} /*---------------------------------------------Recursively find and remove attributes.-----------------------------------------------*/private function findAndRemoveAttributeNames(xml:XML,find:String,in_tags_named:String=""):XML{var ok:Boolean=true;if(in_tags_named != "" && xml.localName() != in_tags_named){ok=false;}if(xml.@[find] != null && ok){delete xml.@[find];}var n:int=0;var c:XML;while(n <xml.children().length()){c=xml.children()[n];findAndRemoveAttributeNames(c,find);n++;}return xml;}