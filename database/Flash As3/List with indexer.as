package {	import fl.controls.listClasses.ICellRenderer;	import fl.controls.listClasses.ImageCell;	import fl.controls.listClasses.ListData;	import flash.events.IOErrorEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;		public class ListText extends ImageCell implements ICellRenderer {		//private var _listData:ListData;		//private var m_data:Object;		private var lbl_index:TextField;		private var init_width:Number;		private var indexer_width:Number = 20;		public function ListText() {						super();			loader.scaleContent = false;			loader.addEventListener(IOErrorEvent.IO_ERROR, handleErrorEvent, false, 0, true);						init_width = width;						lbl_index = new TextField();			lbl_index.width = indexer_width			//lbl_index.setTextFormat(textField.defaultTextFormat);			addChild(lbl_index);						// not realy works			//textField.autoSize = TextFieldAutoSize.LEFT			//textField.selectable = true;			//textField.type = TextFieldType.INPUT;			textField.x = indexer_width;			//textField.width = init_width - indexer_width;		}						override protected function drawLayout():void {			//super.drawLayout(); // do not						//var imagePadding:Number = getStyleValue("imagePadding") as Number;			//loader.move(11, 5);			//			//var w:Number = width - (imagePadding * 2);			//var h:Number = height - imagePadding * 2;			//if (loader.width != w && loader.height != h) {				//loader.setSize(w, h);			//}						//textField.wordWrap = true;			textField.mouseEnabled = true;			textField.selectable = true;			textField.type = TextFieldType.INPUT;			loader.drawNow(); // Force validation!		}				public override function set data(d:Object):void {						_data = d			label = d.label;			lbl_index.text = d.index + " |";		}				//public override function get data():Object {		//return m_data;		//}				public override function set listData(ld:ListData):void {						_listData = ld;		}				public override function get listData():ListData {						return _listData;		}				override protected function handleErrorEvent(event:IOErrorEvent):void {		   trace('ioError: ' + event);		   //dispatchEvent(event);		}	}}