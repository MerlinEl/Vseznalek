Podpora GPUS přehrávačem Flash Player 11 představila společnost Adobe Stage3D. Toto je rozhraní, jehož prostřednictvím může Flash vykreslovat grafiku pomocí GPU, pokud je k dispozici. Na Windows používá Direct3D, na Macu OpenGl. Klasické rozhraní Flash DisplayList Graphics API toto nepodporuje. Musíte projít rozhraním Stage3D Api, jak je vysvětleno v knize, kterou jste zmínili. Chcete-li použít podporu GPU v prohlížeči, značka embed potřebuje atribut wmode nastavený na „direct“. Přímá práce s rozhraním Stage3D Api není snadná a musíte se k tomu naučit koncepty 3D programování, programování Shader atd. Existuje několik knihoven, které pomáhají pracovat se Stage3D. Pro 3D existuje např. Away3D. Pokud potřebujete pouze 2D grafiku s podporou gpu, Starling je v dnešní době velmi populární framework.ÚvodHardwarová akcelerace je často vnímána jako specializované řešení pro vývoj her, ale existuje mnoho dalších grafických aplikací, které mohou těžit z této technologie, zejména ty, které zahrnují vizualizaci dat, jako jsou specializované nástroje pro vědu o datech nebo software zobrazující data v reálném čase. Konvenční nástroje a knihovny pro vytváření grafů nejsou pro tento úkol dostatečně rychlé, a proto je zapotřebí vlastní grafické programování.Hardwarová akcelerace byla kdysi špičkovou funkcí specializovaných počítačů, jako byly pracovní stanice Silicon Graphics UNIX, které byly široce používány ve filmovém a televizním průmyslu během 90. let, ale nyní je běžnou funkcí každého počítače postaveného během posledních 15, resp. 20 let. Zatímco některé grafické karty nabízejí více výkonu a funkcí než jiné, základní sadu 2D a 3D akcelerace má téměř každé moderní zařízení.Toho je dosaženo pomocí specializovaného CPU (který se nazývá GPU — Graphic Processing Unit — ). GPU je speciální CPU, které poskytuje možnosti zpracování s plovoucí desetinnou čárkou a matic, které se běžně používají při 2D a 3D vykreslování. V podstatě umožňuje softwaru kreslit komplexní grafiku zabývající se uživatelskými souřadnicemi, měřítkem, panorámováním, zoomováním, rotacemi a vykreslováním textur, a to jak ve 2D, tak ve 3D.Poskytnutím takovéto funkce blízké skutečnému rastrovacímu výstupnímu zařízení dochází ke snížení jak využití CPU, tak šířky pásma I/O sběrnice, což efektivně umožňuje provádět složité rendery a animace, a to jak ve 2D, tak ve 3D. Spoléhání se na hlavní CPU pro takové úlohy by znamenalo, že by bylo možné provádět pouze méně komplexní vykreslování a že by bylo vynaloženo mnoho času CPU na zvládnutí grafických rutin.V tomto příspěvku se krátce budu věnovat OpenGL a jeho použití v Javě, včetně úvodního, ale zcela užitečného tutoriálu. Tutoriál pokrývá 2D, ale je to vlastně dobrý úvod do OpenGL obecně, takže pokud se zajímáte o 3D, je to stále dobrý úvodní materiál, protože koncepty jsou opravdu podobné pro 2D i 3D.Co je OpenGL?Existují dva hlavní konkurenční standardy v 2D a 3D akceleraci: DirectX a OpenGL. Je důležité si uvědomit, že OpenGL a DirectX jsou standardy hardwarové akcelerace, které definují, která API budou vystavena grafickým kartám. V tomto smyslu je naprosto stejný jako jakýkoli jiný výpočetní standard, jako je POSIX nebo standard C++11. Nad rámec standardů budou implementovat knihovny, protože knihovny DirectX poskytuje přímo Microsoft a v případě OpenGL existuje mnoho open source řešení.Hlavní výrobci grafických karet se rozhodují, zda jejich hardwarová zařízení budou podporovat jednu nebo druhou technologii nebo obě (což je obvyklý případ).DirectX a OpenGL nejsou jediné standardy/API, které poskytují možnosti 2D a 3D vykreslování. Existují další, hlavní jsou Vulkan a Metal. DirectX i OpenGL jsou však v podstatě nejpoužívanější. Metal je zaměřen na zařízení Apple a Vulkan má v úmyslu být vylepšením oproti OpenGL. Ty jsem nehodnotil, protože je pro své potřeby nepovažuji za zajímavé.DirectX (Direct2D a Direct3D) je sada rozhraní API vytvořená společností Microsoft, která jsou implementována ve Windows. DirectX nepokrývá pouze grafiku, ale také zvuk a vstup. I když se jedná o standardy a teoreticky by je bylo možné implementovat v jakékoli architektuře OS, realita je taková, že DirectX se používá pouze pro Microsoft Windows (a XBOX, v případě, že někdo shledá tyto informace relevantní). DirectX je tedy v zásadě standardním řešením pro ekosystém Microsoftu.OpenGL je naopak zamýšleno jako multiplatformní jazyk, který lze použít ve všech hlavních vydaných OS. Je to vlastně přímý potomek starých platforem Silicon Graphics, které již v roce 1991 definovaly IrisGL jako hardwarové API poskytující profesionální možnosti 2D a 3D vykreslování.Téměř každá moderní grafická karta (a tím moderní myslím posledních 15 let) bude poskytovat kompatibilitu s danou verzí DirectX a/nebo OpenGL, takže její použití již není nic neobvyklého a je pravděpodobné, že již žádný počítač bez něj neprovozujete. možnosti hardwarové akcelerace.Je důležité pochopit, že tato rozhraní API jsou určena k tomu, aby poskytovala možnosti vykreslování, nikoli uživatelská rozhraní. Některé widgety/rámce byly postaveny na OpenGL a Direct2D, aby tuto potřebu splnily, i když nejsou tak široce používány jako běžné rámce fungující bez použití explicitní hardwarové akcelerace. Důvodem je to, že hardwarová akcelerace je obvykle spojena s vývojem her (který nevyžaduje žádná standardní uživatelská rozhraní) a specializovanými grafickými aplikacemi.Proč OpenGL a Java?Vyhodnotil jsem pár kombinací ohledně hardwarové akcelerace. Hlavní z nich byly Direct2D a C++ a OpenGL s C++ nebo Java. Podle mého názoru neexistuje jednoznačná odpověď na to, která kombinace je lepší.Pokud nepotřebujete multiplatformní (takže v podstatě vyvíjíte pro Windows) a nepotřebujete t