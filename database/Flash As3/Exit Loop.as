//exit outer loop		private function CheckMatch() {						// _playersList is the Array that is being looped through to find a match						var i:int;			var j:int;						OuterLoop: for (i = 0; i < _playersList.length; i++) {								for (j = i + 1; j < _playersList.length; j++) {					if (_playersList[i] === _playersList[j]) {						trace("match:" + _playersList[i] + " at " + i + " is a match with " + _playersList[j] + " at " + j);												break OuterLoop;											} else {						// no match						trace("continuing...")											}				}			}		}function search(numbers:Vector.<Vector.<int>>, target:int): void{    var found:Boolean;    outerLoop: for each (var row:Vector.<int> in numbers)    {        for each (var val:int in row)        {            if (val == target)            {                found = true;                break outerLoop;            }        }    }    if (!found)    {        trace(target + " not found!");    }}function lessThan(numbers:Vector.<Vector.<Vector.<int>>>, threshold:int): int{    var count:int;    for each (var layer:Vector.<Vector.<int>> in numbers)    {        outerLoop: for each (var row:Vector.<int> in layer)        {            for each (var val:int in row)            {                if (val >= threshold)                {                    // the rest of this 2D grid must be greater too                    // skip this 2D grid but keep checking subsequent 2D grids                    continue outerLoop;                }                count++;            }        }    }    return count;trace("pre");block: {	trace("in block");	break block;	trace("after break");}trace("post");// OUTPUT:// pre// in block// postfunction atLeast(x:int): void{	trace("--begin " + x + "--");	end: {		if (x < 1) break end;		trace("\tat least 1");		if (x < 2) break end;		trace("\tat least 2");		if (x < 3) break end;		trace("\tat least 3");	}	trace("--end--");}function atLeastEndDupe(x:int): void{	trace("--begin " + x + "--");	if (x < 1) { trace("--end--"); return; }	trace("\tat least 1");	if (x < 2) { trace("--end--"); return; }	trace("\tat least 2");	if (x < 3) { trace("--end--"); return; }	trace("\tat least 3");	trace("--end--");}function atLeastBodyDupe(x:int): void{	trace("--begin " + x + "--");	if (x >= 3)	{		trace("\tat least 1");		trace("\tat least 2");		trace("\tat least 3");	}	else if (x >= 2)	{		trace("\tat least 1");		trace("\tat least 2");	}	else if (x >= 1)	{		trace("\tat least 1");	}	trace("--end--");}