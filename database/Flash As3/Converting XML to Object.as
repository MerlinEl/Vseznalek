package info.tiefenauer.util.global{	/**	 * <p>Helper function to transform any XML to an Object</p>	 * <p>Thisfunction recursively iterates through all child nodes of an XML and converts them to object attributes. The transformation is made as follows</p>	 * <ul>	 * 		<li>If the child node value is a <em>simple type</em> (not another XML), it is added to the object as a new attribute whereas the attribute name is equal	 * 			to the child node name and the attribute value is equal to the child node value</li>	 * 		<li>If the child node value is a <em>complex type</em>, the node value is converted into its object representation and then added to the object as an attribute,	 *      whereas the attribute name is equal to the child node name. The attribute value is equal to the object representation of the child node value.</li>	 * 		<li>If the child node name is a numeric value, the child node value is treated as an array element, and the array is added to the object as a new attribute. It is assumed	 *      that all sibling nodes also numeric names. This way the arrays which were converted to XMLLists by <code>info.tiefenauer.util.global.obj2xml() can	 * 			be transformed back into their array representation</li>	 * </ul>	 * <p>XMLs transformed with this function can afterwards be transformed back to their XML representation using <code>info.tiefenauer.util.global.obj2xml()</code>.</p>	 * @param xml XML to be converted to an object	 * @return Object representation of the XML	 * @see info.tiefenauer.util.global#obj2xml()	 */	public function xml2obj(xml:XML):Object{		var obj:Object = new Object();		var arr:Array = new Array();		var add:Function = function(key:String, item:*):void{			if (!isNaN(Number(key))){				arr.push(item);			}			else{				if (item == 'true')					obj[key] = true;				else if (item == 'false')					obj[key] = false;				else					obj[key] = item;			}		}		// Es wird ein Array (bzw. XMLList)-Element geparst		if (!isNaN(xml.localName())){			var xmlContent:XML = xml.children()[0];			return xml2obj(xmlContent);		}		else{			for each(var node:XML in xml.children()){				var key:String = node.localName();				if(node.hasComplexContent()){					var nestedObj:Object = xml2obj(node);					add(key, nestedObj);				}				else{					var value:String = String(node.text());					if (isNaN(Number(value))){						add(key, value);					}					else{						add(key, parseInt(value));					}				}			}		}		if (arr.length > 0)			return arr;		return obj;	}}