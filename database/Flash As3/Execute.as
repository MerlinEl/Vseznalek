	Security.allowDomain("*");Security.allowInsecureDomain("*");MMEndCommand(endStatus:Boolean, notifyString:String):voidNotifies an application hosting a SWF command that a command is done and instructs the application to commit or discard the changes submitted by the MMExecute() command.adobe.utils 	 	MMExecute(name:String):StringLets you issue Flash JavaScript API (JSAPI) commands from ActionScript.MMExecute( «fl.trace( ‘Button clicked’ );» );MMExecute("fl.outputPanel.clear();");MMExecute( «fl.runScript( ‘(path-to-your-script)’ + ‘/Buttonize.jsfl’ )» );MMExecute ("fl.runScript (fl.configURI + 'WindowSWF /' + '/Buttonize.jsfl', 'makeButtonFromText')"); // any javascript functions can be called here, but you cannot use currently loaded JSFL variables/functions due to scoping rules:    fl.runScript( fl.configURI + 'Commands\/someJSFLFile.jsfl', 'someFunctionInTheJSFLFile' );    // close the pop-up    fl.xmlui.accept();		var args:Array = ["fname", "function to run", "function parameters"];		var str:String = 'fl.runScript("' + args.join('","') + '");';		var ret:String = MMExecute(str);// not works inside flash action panel		ExternalInterface.call("fl.outputPanel.clear();");	MMExecute("fl.outputPanel.clear();");import flash.external.ExternalInterface;function alertMe():void {gotoAndPlay(1,"Scene1");}ExternalInterface.addCallback("letsalertme",alertMe);