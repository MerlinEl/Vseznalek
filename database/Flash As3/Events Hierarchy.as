----------------------------------------------------------------------------------------------EVENTDISPATCHER CLASS----------------------------------------------------------------------------------------------Public Methods 	Method	Defined By 	 	addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):voidRegisters an event listener object with an EventDispatcher object so that the listener receives notification of an event.	IEventDispatcher 	 	dispatchEvent(event:Event):BooleanDispatches an event into the event flow.	IEventDispatcher 	 	hasEventListener(type:String):BooleanChecks whether the EventDispatcher object has any listeners registered for a specific type of event.	IEventDispatcher 	 	removeEventListener(type:String, listener:Function, useCapture:Boolean = false):voidRemoves a listener from the EventDispatcher object.	IEventDispatcher 	 	willTrigger(type:String):BooleanChecks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.package {        import flash.events.Event;        import flash.display.Sprite;               public class IEventDispatcherExample extends Sprite {                public function IEventDispatcherExample() {                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();                        decorDispatcher.addEventListener("doSomething", didSomething);                        decorDispatcher.dispatchEvent(new Event("doSomething"));                }                               public function didSomething(evt:Event):void {                        trace(">> didSomething");                }        }}import flash.events.IEventDispatcher;import flash.events.EventDispatcher;import flash.events.Event;               class DecoratedDispatcher implements IEventDispatcher {           private var dispatcher:EventDispatcher;                   public function DecoratedDispatcher() {        dispatcher = new EventDispatcher(this);    }               public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{        dispatcher.addEventListener(type, listener, useCapture, priority);    }               public function dispatchEvent(evt:Event):Boolean{        return dispatcher.dispatchEvent(evt);    }        public function hasEventListener(type:String):Boolean{        return dispatcher.hasEventListener(type);    }        public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{        dispatcher.removeEventListener(type, listener, useCapture);    }                       public function willTrigger(type:String):Boolean {        return dispatcher.willTrigger(type);    }}----------------------------------------------------------------------------------------------package flash.events {     public interface IEventDispatcher     {         function addEventListener(eventName:String,                          listener:Object,                         useCapture:Boolean=false,                         priority:Integer=0,                         useWeakReference:Boolean=false):Boolean;          function removeEventListener(eventName:String,                      listener:Object,                     useCapture:Boolean=false):Boolean;          function dispatchEvent(eventObject:Event):Boolean;          function hasEventListener(eventName:String):Boolean;         function willTrigger(eventName:String):Boolean;     } }import flash.events.MouseEvent; addEventListener(MouseEvent.CLICK, myListenerObj.clickHandler);var myListenerObj:Object = new Object(); myListenerObj.clickHandler = function (event:MouseEvent):void {         trace("clickHandler detected an event of type: " + event.type);         trace("the this keyword refers to: " + this); }----------------------------------------------------------------------------------------------package flash.events {     public final class EventPhase     {         public static const CAPTURING_PHASE:uint = 1;         public static const AT_TARGET:uint = 2;         public static const BUBBLING_PHASE:uint= 3;     } }if (event.eventPhase == EventPhase.AT_TARGET) {     myFunc(); }