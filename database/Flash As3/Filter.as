			//distance, angle, color, alpha, blurX, blurY, strength,quality, inner, knockout, hide			var effect = new DropShadowFilter(0, 0, 0x0000ff, 1, 20, 20, 1, 2, true);import fl.motion.AdjustColor;import flash.filters.ColorMatrixFilter;private var colm:ColorMatrixFilter = getColorMatrix();mc.filters = [colm]function getColorMatrix():ColorMatrixFilter{	var colorFilter:AdjustColor = new AdjustColor();	//all 4 must contain a value of an integer, if one is not set, it will not work	colorFilter.brightness = -50;	colorFilter.contrast = -50;	colorFilter.saturation = 20;	colorFilter.hue = -60;	var mMatrix:Array = []; 	mMatrix = colorFilter.CalculateFinalFlatArray();	return new ColorMatrixFilter(mMatrix);}		import flash.filters.DropShadowFilter;mc.filters = getShadow();		function getShadow():Array {			var dropShadow:DropShadowFilter = new DropShadowFilter();			dropShadow.distance = 10;			dropShadow.angle = 90;			dropShadow.color = 0x000000;			dropShadow.alpha = 1;			dropShadow.blurX = 5;			dropShadow.blurY = 5;			dropShadow.strength = 0.2;			dropShadow.quality = 15;			dropShadow.inner = false;			dropShadow.knockout = false;			dropShadow.hideObject = false;			return [dropShadow];		} trace("before:"+vis_cards)vis_cards.filter(filterByName, "oposite")trace("after:"+vis_cards)		function filterByName(item:*, index:int, array:Array):Boolean{	trace("item:"+item.name+" this:"+this)	return item.name == this;};var array:Array = [...];var params:Object = {"param1": value1, "param2": value2};var filterFunction:Function = function(item:*, index:int, array:Array):Boolean {    var param1 = this["param1"];    var param2 = this["param2"];};array.filter(filterFunction, params);var testVal:String = "something";array.filter(someCallbackFunction, testVal);[...]public function someCallbackFunction(element:*, index:int, arr:Array):Boolean{        element.isActive = this;}array.filter(someCallbackFunction);[...]public function someCallbackFunction(element:*, index:int, arr:Array):Boolean{    element.isActive = true;}