https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/XML.html#replace%28%29			script_files.forEach(function (fname:String, index:int, arr:Array):void {				xml.items[index] = <item					dir = "Orien"					uri = {path_or_uri + fname}				/>			})			 xml.item .(ctrace("\t<item dir:{0} uri:{1}/>", @dir, @uri)Expressions with Predicatesvar xml:XML = <TITLES>  <item label="Contact_Email" coment="" value="info@novaskolabrno.cz"/>  <item label="IUcManager_Email" coment="" value="iucmanazer@novaskolabrno.cz"/>  <item label="Default_User_Email" coment="" value="odesilatel@gmail.com"/>  <item label="Server_Download_URL" coment="" value="http://download.novaskolabrno.cz"/>  <item label="Interactive_Page" coment="" value="http://www.novaskolabrno.cz/produkty/interaktivni-ucebnice"/></TITLES>//Avar item_value:String = xml.item.(@label == "IUcManager_Email").@value;//Bvar item_value:String = xml.item.(attribute("label") == "IUcManager_Email").@value;//Cvar item_value:String = xml["item"].(attribute("label") == "IUcManager_Email").@value;ctrace("val:{0} type:{1} len:{2}", item_value, typeof(item_value), item_value.length)var book_code:String = "DFDG"var book_title:String = "sdff";var book_public_title:String = "ssdfsdff";var book_edition:String = "1";var book_version:String = "AAAA";var book_data:XML = new XML(	< item 		label = { book_title } 		publicLabel = { book_public_title } 		code = { book_code }  		edition = { book_edition } 		version = {book_version} 		fname = { "" } 	/>);var xml1:XML =	<grades>		<student1 name="Bill">			 <quiz num="1"/>		</student1>		<student2 name="Luki">			 <quiz num="7"/>		</student2>		<student3 name="Tir">			 <quiz num="8"/>		</student3>	</grades>;	var xml2:XML = 	<{"student4"} {"name"}={"John"}> 	< {"quiz"} {"num"}={"5"} />	</{"student4"}>;	trace(xml1 + "\n")trace(xml2 + "\n")mcTranXML.addReplaceItemByName(xml1, "student2", xml2)trace(xml1)var result:XMLList = xml..key.(text() == "value1");var paragraphs:XMLList = html..p;var urls:XMLList = html..ul.(attribute("class") == "links")..a.@href;var classes:XMLList = html..@class; //error for "class"var classes:XMLList = html.descendants().attribute("class");var classes:XMLList = html..@["class"];var filteredClasses:XMLList = new XMLList();html.descendants().(filteredClasses = addUniqueValue(attribute("class"), filteredClasses));// Get all LI-elementsvar classes:XMLList = html..*["li"];for each (var castNode:XML in configXML..sound.(attribute("file") == mp3FilePath){}xml.*.(hasOwnProperty(“@class”) && @[“class”] == “title”)var allowedNodes:Array = ['nodeA', 'nodeB', 'nodeC'];var list:XMLList = myXML.children().(allowedNodes.indexOf(name().toString() > -1));// only students itemsgrades.student.(trace(@name));			var names:Array = [];			grades.student.(names.push(@name));// Dynamic XML definition with bracesvar elementName:String = "elem";var attributeName:String = "attr";var attributeValue:String = "value";var textNode:String = "text";var xml:XML = 	<{elementName} {attributeName}={attributeValue}>		{textNode}	</{elementName}>;trace(xml.toXMLString()); //traces "<elem attr="value">text</elem>"var student4:XML = 	<{"student4"} {"name"}={"John"}> 	< {"quiz"} {"num"}={"5"} />	</{"student4"}>// traces//<student4 name="John">//  <quiz num="5"/>//</student4>// Show XML source string using toXMLString()// default value (toString()) just shows textvar sport:XML =	<sport>		<name>Basketball</name>		<players>men</players>		<players>women</players>		<nationalTV>NBC</nationalTV>		<nationalTV>ESPN</nationalTV>	</sport>;trace(sport.players is XMLList); // truetrace(sport.players);/* output:<players>men</players><players>women</players>*/trace(sport.players[0] is XML); // truetrace(sport.players[0]); // traces "men"trace(sport.players[0].toString()); // traces "men"trace(sport.players[0].toXMLString()); // traces "<players>men</players>"// Child (.) vs. descendant (..) accessvar channel:XML =	<channel>		<title>Feed Title</title>		<description>Feed description.</description>		<item>			<title>Item 1 Title</title>			<description>Item 1 description.</description>		</item>		<item>			<title>Item 2 Title</title>			<description>Item 2 description.</description>		</item>	</channel>trace(channel.title.toXMLString()); // traces "<title>Feed Title</title>"trace(channel..title.toXMLString());/* output<title>Feed Title</title><title>Item 1 Title</title><title>Item 2 Title</title>*/// Access attributes with the @// attribute identifier operatorvar item:XML =	<item name="attribute">		<name>element</name>	</item>;trace(item.name); // traces "element"trace(item.@name); // traces "attribute"// Attributes as an XMLListvar images:XML =	<images>		<img href="image1.jpg" />		<img href="image2.jpg" />		<img href="image3.jpg" />	</images>;trace(images.img.@href is XMLList); // traces truetrace(images.img.@href); // traces "image1.jpgimage2.jpgimage3.jpg"trace(images.img.@href[0]); // traces "image1.jpg"trace(images.img.length()); // 3// XML node access vs method accessvar family:XML =	<family>		<name>Hendersons</name>	</family>;trace(family.name); // traces "Hendersons"trace(family.name()); // traces "family"// Reference nodes by name using // elements() and attribute()var values:XML =	<values for-example="see below">		<complex-name>simple value</complex-name>	</values>;// trace(values.@for-example); // Syntax errortrace(values.attribute("for-example")); // traces "see below"// trace(values.complex-name); // Syntax errortrace(values.elements("complex-name")); // traces "simple value" var grades:XML =	<grades>		<student>			<name>Tom</name>			<quiz num="1"><score>60</score></quiz>			<quiz num="2"><score>90</score></quiz>		</student>		<student>			<name>Brett</name>			<quiz num="1"><score>100</score></quiz>		</student>		<student>			<name>Michelle</name>			<quiz num="1"><score>90</score></quiz>		</student>	</grades>;The following statements use conditional filtering to trace results from this XML.// Find students with the name Michelletrace(grades.student.(name == "Michelle"));/* output:<student>	<name>Michelle</name>	<quiz num="1">		<score>90</score>	</quiz></student>*/// Find quizes whose num attribute equals 1trace(grades.student.quiz.(@num == "1"));/* output:<quiz num="1">	<score>100</score></quiz><quiz num="1">	<score>60</score></quiz><quiz num="1">	<score>90</score></quiz>*/// Find students who are not Michelle that// have less than 2 quiz elementstrace(grades.student.(name != "Michelle" && quiz.length() < 2));/* output:<student>	<name>Brett</name>	<quiz num="1">		<score>100</score>	</quiz></student>*/// Find students with a single score// element having a value of 90trace(grades.student.(quiz.score == 90));/* output<student>  <name>Michelle</name>	<quiz num="1">		<score>90</score>	</quiz></student>*/// Find students with any score// element that has a value of 90trace(grades.student.(quiz.(score == 90).length()));/* output<student>	<name>Tom</name>	<quiz num="1">		<score>60</score>	</quiz>	<quiz num="2">		<score>90</score>	</quiz></student><student>	<name>Michelle</name>	<quiz num="1">		<score>90</score>	</quiz></student>*/// Find students with a single score// element having a value of scoreCheckvar scoreCheck:int = 90;trace(grades.student.(quiz.score == scoreCheck));/* output<student>	<name>Michelle</name>	<quiz num="1">		<score>90</score>	</quiz></student>*///Every filter condition essentially boils down to:var result:XMLList = new XMLList();for each (var node:XML in target) {	with (node) {		if (condition) {			result += node;		}	}}return result;//Compare two xml variablevar msg1:XML = <GREETING>            <TO>A</TO>            <FROM>Programmer</FROM>            <MESSAGE>Hello</MESSAGE>          </GREETING>;                var msg2:XML = <GREETING>            <TO>A</TO>            <FROM>Programmer</FROM>            <MESSAGE>Hello</MESSAGE>          </GREETING>;                trace(msg1.* == msg2.*);  // Displays: trueOR var grades:XML =	<grades>		<student>			<name>Tom</name>			<quiz num="1"><score>60</score></quiz>			<quiz num="2"><score>90</score></quiz>		</student>		<student>			<name>Brett</name>			<quiz num="1"><score>100</score></quiz>		</student>		<student>			<name>Michelle</name>			<quiz num="1"><score>90</score></quiz>		</student>	</grades>;// Find students with the name Michelletrace(grades.student.(name == "Michelle"));// Find students who are not Michelle that// have less than 2 quiz elementstrace(grades.student.(name != "Michelle" && quiz.length() < 2));// Find students with any score// element that has a value of 90trace(grades.student.(quiz.(score == 90).length()));// Find students with a single score// element having a value of scoreCheckvar scoreCheck:int = 90;trace(grades.student.(quiz.score == scoreCheck));OR// XML with xpl namespacevar xml:XML = 	<xml xmlns:xpl="http://www.example.com/uri/">		<xpl:text value="Hello World" xpl:value="Hello Namespace" />	</xml>;// Define namespace with xpl URIvar xplNs:Namespace = new Namespace("http://www.example.com/uri/");// Get value of text attribute// with and without namespacetrace(xml.xplNs::text.@value); // traces Hello Worldtrace(xml.xplNs::text.@xplNs::value); // traces Hello Namespacevar xml:XML = <TITLES>  <item code="IUMA" label="IUč Manažer"					publicLabel="IUč Manažer"				 				edition="1"	version="6.4"	fname="IUc-Manazer-v6.4.exe"/>  <item code="MAA1" label="Matematika 1"				publicLabel="Matematika 1"				 				edition="1"	version="5.4"	fname="1-056-IUc-Matematika-1-v5.4.exe"/>  <item code="ZIP1" label="Živé počítání"				publicLabel="Živé počítání"				 				edition="1"	version="5.41"	fname="1-0708-IUc-M1-Zive-pocitani-PS-v5.41.exe"/>  <item code="ZIP1" label="Živé počítání"				publicLabel="Živé počítání"				 				edition="2"	version="5.41"	fname="1-0708-IUc-M1-Zive-pocitani-PS-v5.42.exe"/>  <item code="MAA2" label="Matematika 2"				publicLabel="Matematika 2"				 				edition="1"	version="5.4"	fname="2-056-IUc-Matematika-2-v5.4.exe"/>  <item code="MAA3" label="Matematika 3"				publicLabel="Matematika 3"				 				edition="1"	version="5.4"	fname="3-056-IUc-Matematika-3-v5.4.exe"/>  <item code="MAA4" label="Matematika 4"				publicLabel="Matematika 4"				 				edition="1"	version="5.4"	fname="4-056-IUc-Matematika-4-v5.4.exe"/>  <item code="MAA5" label="Matematika 5"				publicLabel="Matematika 5"				 				edition="1"	version="5.4"	fname="5-056-IUc-Matematika-5-v5.4.exe"/>  <item code="MAA6" label="Matematika 6"				publicLabel="Matematika 6"				 				edition="1"	version="5.4"	fname="6-1020-IUc-Matematika-6-v5.4.exe"/>  <item code="PRA1" label="Prvouka 1"					publicLabel="Prvouka 1"					 				edition="1"	version="5.4"	fname="11-30-IUc-Prvouka-1-v5.4.exe"/>  <item code="PRC1" label="Prvouka 1 PracSe"			publicLabel="Prvouka 1 PS"								edition="1"	version="5.4"	fname="11-31-IUc-Prvouka-1-PS-v5.4.exe"/>  <item code="PRB1" label="Prvouka 1 pracovní učebnice" publicLabel="Prvouka 1 pracovní učebnice"  				edition="1"	version="5.41"	fname="11-35-IUc-Prvouka-1-pracovni-ucebnice-v5.41.exe"/>  <item code="PRA2" label="Prvouka 2"					publicLabel="Prvouka 2"					 				edition="1"	version="5.4"	fname="22-30-IUc-Prvouka-2-v5.4.exe"/>  <item code="PRC2" label="Prvouka 2 Prac"				publicLabel="Prvouka 2 PS"		 						edition="1"	version="5.4"	fname="22-31-IUc-Prvouka-2-PS-v5.4.exe"/></TITLES>var filter_items:XMLList = xml.item.(@code == "ZIP1"); // && @edition == "1"trace (filter_items)trace("-----------------------------------------------------------------------")for each (var item:XML in filter_items){		if (item.@edition == "2") trace("edition 1 : " + item.toXMLString())}trace("-----------------------------------------------------------------------")trace( xml.item.(@code == "MAA1" && @edition == "2").@fname);trace(xml.item.( attribute("code") == "MAA1" && attribute("edition") == "1" ).@fname);xml.item.( trace(	"code:"+attribute("code") + " equal:" + (attribute("code") == "MAA1") + 	" e:" + attribute("edition") +  " equal:" + (attribute("edition") == "1")  ));var itm = xml.item.(@code == "MAA1" && @edition == "1");trace("found item:" + itm.toXMLString())