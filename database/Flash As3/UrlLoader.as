		private function readXML(str:String):void {						var url_req:URLRequest = new URLRequest("..data/"+str);			if (DEBUG) console.appendText("\nURLRequest:" + url_req.url);			loader.addEventListener(Event.COMPLETE, xmlLoaded);			loader.addEventListener(IOErrorEvent.IO_ERROR, nIOError);			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHttpStatus);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			loader.load(url_req);		}				private function onSecurityError(e:SecurityErrorEvent):void { if (DEBUG) console.appendText("\nonSecurityError:" + e.text) };		private function onHttpStatus(e:HTTPStatusEvent):void {  if (DEBUG) console.appendText("\nonHttpStatus:" + e.status.toString()) }		private function onHttpResponseStatus(e:HTTPStatusEvent):void {if (DEBUG) console.appendText("\nonHttpResponseStatus:" + e.status.toString()) }		private function nIOError(e:IOErrorEvent):void {  if (DEBUG) console.appendText("\nIOError:" + e.text) }				private function xmlLoaded(e:Event):void {						unregisterLoader();			xml = new XML(e.target.data);			if (DEBUG) console.appendText("\nxmlLoaded:" + xml);			//Collect labels in to dropdown lists			fillListBoxesA();		}				private function unregisterLoader():void {						loader.removeEventListener(Event.COMPLETE, xmlLoaded);			loader.removeEventListener(IOErrorEvent.IO_ERROR, nIOError);			loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHttpStatus);			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);		}