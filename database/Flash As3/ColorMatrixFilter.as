STARLINGhttps://gamua.com/starling/features///Creates a new ColorMatrixFilter instance with the specified matrix.ColorMatrixFilter(matrix:Vector.<Number> = null) //Changes the brightness.	 	adjustBrightness(value:Number):ColorMatrixFilter	//Changes the contrast. 	 	adjustContrast(value:Number):ColorMatrixFilter//Changes the hue of the image. 	 	adjustHue(value:Number):ColorMatrixFilter//Changes the saturation. 	 	adjustSaturation(sat:Number):ColorMatrixFilter	//Concatenates the current matrix with another one. 	 	concat(matrix:Vector.<Number>):ColorMatrixFilter	//Inverts the colors of the filtered objects. 	 	invert():ColorMatrixFilter	//Changes the filter matrix back to the identity matrix. 	 	reset():ColorMatrixFilter//Tints the image in a certain color, analog to what can be done in Flash Pro. 	 	tint(color:uint, amount:Number = 1.0):ColorMatrixFilter		public static function darkenCubeTexture(r_offset:int, g_offset:int, b_offset:int, a_offset:Number):void {						var bitmap_data:Vector.<BitmapData> = Vector.<BitmapData>([							cube_texture.positiveX,				cube_texture.positiveY,				cube_texture.positiveZ,				cube_texture.negativeX,				cube_texture.negativeY,				cube_texture.negativeZ			]);			// ColorMatrixFilter > http://www.graphicmania.net/bitmap-data-manipulation-in-flash-actionscript-3/			// When apply this filter ,then red color will be removed from image			// R G B A color channel reduction offset			// G			// B			// A			//var matrix:Array = [ 				//1, 0, 0, 0, -255,				//0, 1, 0, 0, 0,				//0, 0, 1, 0, 0,				//0, 0, 0, 1, 0 			//];						// darken image and make it more blue			var matrix:Array = [ 				1, 0, 0, 0, r_offset,	// range -255 - 255				0, 1, 0, 0, g_offset, 	// range -255 - 255				0, 0, 1, 0, b_offset, 	// range -255 - 255				0, 0, 0, 1, 0 			// range 0.0 - 1.0			];			for each (var bd:BitmapData in bitmap_data) {								bd.applyFilter(bd, bd.rect, new Point(), new ColorMatrixFilter(matrix));			}		}		public static function adjustCubeTexture(cube_texture:BitmapCubeTexture, optional:Object = null):void {						optional ||= new Object();						var bitmap_data:Vector.<BitmapData> = Vector.<BitmapData>([							cube_texture.positiveX,				cube_texture.positiveY,				cube_texture.positiveZ,				cube_texture.negativeX,				cube_texture.negativeY,				cube_texture.negativeZ			]);						//Todo			var ac:AdjustColor = new AdjustColor();			if (optional["brightness"]) ac.brightness = optional["brightness"];			if (optional["hue"]) ac.hue = optional["hue"];			if (optional["saturation"]) ac.saturation =optional["saturation"];			if (optional["contrast"]) ac.contrast = optional["contrast"];			var cl:ColorMatrixFilter = new ColorMatrixFilter(ac.CalculateFinalFlatArray());			//var ct:ColorTransform = new ColorTransform();			//ct.redMultiplier = optional["brightness"];			//ct.greenMultiplier = optional["hue"];			//ct.blueMultiplier = optional["saturation"];			//ct.redOffset = optional["brightness"];			//ct.greenOffset = optional["hue"];			//ct.blueOffset = optional["saturation"];			for each (var bd:BitmapData in bitmap_data) {								//bd.colorTransform( bd.rect, ct);				bd.applyFilter(bd, bd.rect, new Point(), cl);			}						// darken image and make it more blue			/*var matrix:Array = [ 				1, 0, 0, 0, optional["brightness"],				0, 1, 0, 0, optional["hue"],				0, 0, 1, 0, optional["saturation"],				0, 0, 0, 1, 0 			];			for each (var bd:BitmapData in bitmap_data) {				//ctrace("apply bd:{0} tm:{1}", bd, matrix)				bd.applyFilter(bd, bd.rect, new Point(), new ColorMatrixFilter(matrix));			}*/					}