// do not forget to add component ComboBox in librarypackage classes {    import fl.controls.listClasses.ICellRenderer;    import fl.controls.listClasses.CellRenderer;    import fl.controls.listClasses.ListData;    import fl.controls.ComboBox;    import fl.data.DataProvider;    public class ComboBoxCellRenderer extends ComboBox implements ICellRenderer {       		private var _listData:ListData;        private var _data:Object;        private var _selected:Boolean;        public function ComboBoxCellRenderer():void {						super();			init();        }				private function init():void {								}		public function set data(d:Object):void {						if(_data == d) return;			_data = d;			removeAll();			for each(var t:String in _data.type.types) this.addItem( { label: t } );			this.selectedIndex = _data.type.index;		}        public function get data():Object {            return _data;        }        public function set listData(ld:ListData):void {            _listData = ld;        }        public function get listData():ListData {            return _listData;        }        public function set selected(s:Boolean):void {            _selected = s;        }        public function get selected():Boolean {            return _selected;        }        public function setMouseState(state:String):void {        }				//override protected function draw():void {			//			//if (isInvalid(InvalidationType.SELECTED)) {				//_data.index = selectedIndex;			//}			//super.draw();		//}    }}/*package classes   {   import flash.events.Event;   import fl.controls.ComboBox;   import fl.controls.DataGrid;   import fl.controls.listClasses.CellRenderer;   public dynamic class ListCellRenderer extends CellRenderer   {   private var m_cmbBox:ComboBox;   public function ListCellRenderer():void   {   super();   this.buttonMode = false;   this.mouseChildren = true;   this.textField.visible = false;   m_cmbBox = new ComboBox2();   m_cmbBox.tabEnabled = false;   m_cmbBox.addEventListener( Event.CHANGE, onChange );   this.addChild( m_cmbBox );   }   private function onChange(e:Event):void   {   cellInfo.selectedIndex = m_cmbBox.selectedIndex;   }   public override function setSize( width:Number, height:Number ):void   {   super.setSize(width, height);   if( m_cmbBox != null ) m_cmbBox.setSize( width, height );   }   public override function drawNow():void   {   super.drawNow();   var listObj:ListObj = ListObj( cellInfo );   m_cmbBox.dataProvider = listObj.dp;   m_cmbBox.selectedIndex = listObj.selectedIndex;   m_cmbBox.drawNow();   }   // CellRendererのテキスト描画を消す   protected override function drawLayout():void   {   background.width = width;   background.height = height;   }   // カスタムセルレンダラが設定されているセルのデータを返す   private function get cellInfo():*   {   var dgc = DataGrid(_listData.owner).getColumnAt(_listData.column);   return _data[dgc.dataField];   }   }   }   import fl.data.DataProvider;   class ListObj{   public var dp:DataProvider;   public var selectedIndex:int;   public function ListObj( dp:DataProvider = null, selectedIndex:int = -1 ):void   {   this.dp = dp || new DataProvider();   this.selectedIndex = selectedIndex;   }   }   import fl.controls.ComboBox;   class ComboBox2 extends ComboBox {   // デフォルトのComboBoxクラスは、子コンポーネントを正しく再描画していないようなので修正   override protected function draw():void   {   super.draw();   // 子コンポーネントinputField,listの再描画を行う   inputField.drawNow();   list.drawNow();   }   }*//*package classes {   import fl.controls.ComboBox;   import fl.controls.listClasses.CellRenderer;   import fl.controls.listClasses.ICellRenderer;   import fl.controls.listClasses.ListData;   import fl.data.DataProvider;   public class ListCellRenderer extends ComboBox implements ICellRenderer {   //private var pick_list:List; * @private * Storage for the selected property.   private var _listData:ListData;   private var _data:Object;   private var _selected:Boolean;   public function ListCellRenderer() {   super();   //dataProvider = new DataProvider();   //pick_list = new List();   addItem({label: "MasterCard", data: 0});   addItem({label: "Visa", data: 1});   //var labels:Array = ["Default", "Array", "Object", "List"];   //labels.forEach(function (l:String, ...args):void {   //   //addItem( { label:l } );   //})   //dropdownWidth = 60;   //dataProvider = dp;   //editable = false;   //pick_list.width = 10;   //pick_list.height = this.height;   //pick_list.label = "O";   //this.addChild(pick_list);   //myComboBox.addEventListener(ComponentEvent.ENTER, enterHandler);   }   //function enterHandler(event:ComponentEvent):void {   //var myCB:ComboBox = event.currentTarget as ComboBox;   //dp.addItem({label:myCB.text});   //myCB.text = "";   //myCB.sortItemsOn("label", Array.CASEINSENSITIVE);   //}   //override protected function drawLayout():void {   //   ////pick_list.x = this.width - pick_list.width - 8;   //super.drawLayout();   //}   public function set data(d:Object):void {   _data = d;   }   public function get data():Object {   return _data;   }   public function set listData(ld:ListData):void {   _listData = ld;   }   public function get listData():ListData {   return _listData;   }   public function setMouseState(state:String):void {   }   public function get selected():Boolean {   return _selected;   }   public function set selected(value:Boolean):void {   _selected = value;   }   }   }*//*   private var _selectedItem:Object;   private var _firsTime:Boolean;   private var _tempArray:Object;   this.addEventListener(Event.CHANGE, onSelItem);   _firsTime = true;   public function set data(ld:Object):void {   _data = ld;   if (!_tempArray) {   _tempArray = new Array();   for (var i:uint = 0; i < _data.combobox.groups.length; i++)   _tempArray.push({label: _data.combobox.groups[i]});   }   if (!_selected) {   var _dp:DataProvider = new DataProvider(_tempArray);   this.dataProvider = _dp;   }   if (_firsTime) {   _firsTime = false;   _selectedItem = _tempArray[_data.combobox.current];   }   var id:int = _tempArray.indexOf(_selectedItem);   _data.combobox.current = id;   this.selectedItem = _selectedItem;   //_stage.dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.ITEM_EDIT_END));   } */