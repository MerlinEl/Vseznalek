    Go to Edit > Preferences (or Ctrl+U)    Click ActionScript in Category    Click ActionScript 3.0 Settings    Where you have "Source path", click the "+" button and add $(AppConfig)/Component Source/ActionScript 3.0/User Interface    Click OK until you've closed all the Preferences windows.package classes {		import fl.core.UIComponent;	public class SET extends UIComponent{		private var _lines:Number=0;		private var _card_scale:Number=1;		private var _snap_enabled:Boolean=false;		private var _stay_on_incorrect:Boolean=false;		private var _clone_mode:Boolean=false;		private var _range:Array=new Array(0, 0);		private var _side:Array=new Array("left", "right", "both", "none");				[Inspectable(name="lines", type="Number", defaultValue=0)] //allows the lines property to be set in the Component Inspector		public function get lines():Number{ return _lines };		public function set lines(val:Number):void{ _lines=val; draw() }; // draw() - Update the component for the new _lines value				[Inspectable(name="card_scale", type="Number", defaultValue=0)]		public function get card_scale():Number{ return _card_scale };		public function set card_scale(val:Number):void{ _card_scale=val; draw() };				[Inspectable(name="snap_enabled", type="Boolean", defaultValue=false)]		public function get snap_enabled():Boolean{ return _snap_enabled };		public function set snap_enabled(b:Boolean):void{ _snap_enabled=b; draw() };				[Inspectable(name="stay_on_incorrect", type="Boolean", defaultValue=false)]		public function get stay_on_incorrect():Boolean{ return _stay_on_incorrect };		public function set stay_on_incorrect(b:Boolean):void{ _stay_on_incorrect=b; draw() };				[Inspectable(name="clone_mode", type="Boolean", defaultValue=false)]		public function get clone_mode():Boolean{ return _clone_mode };		public function set clone_mode(b:Boolean):void{ _clone_mode=b; draw() };				[Inspectable(name="range", type="Array", defaultValue="0, 1")]		public function get range():Array{ return _range };		public function set range(arr:Array):void{ _range=arr; draw() };				[Inspectable(name="side", type="List", defaultValue="left", enumeration="left, right, both, none")]		public function get side():Array{ return _side };		public function set side(arr:Array):void{ _side=arr; draw() };				private function isInRange(val:Number, min_val:Number, max_val:Number):Boolean{						if(val>max_val || val<min_val) {				throw new Error("Value is out of range ("+min_val+"-"+max_val+")");				trace("out")				return false;			}			trace("in")			return true;		};	}//class}//packagepublic static const PARAMETER_CHANGE:String = "labelColorChange";addEventListener(myEvents.PARAMETER_CHANGE,parameterChange);[Inspectable(type="List", enumeration="ORANGE,BLUE,BLACK,WHITE", defaultValue="ORANGE", name="Font color:")]public function set setBackGroundColor (value:String):void {	_backgroundcolor = this[value];	dispatchEvent(new myEvents(myEvents.PARAMETER_CHANGE, false, false));}