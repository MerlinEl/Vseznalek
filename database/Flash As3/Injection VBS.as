For instance, add the following VBScript to a webpage:<script language="VBScript">    Function myBox(txt)        MsgBox(txt, 1)    End Function </script>And it will be executed if you call ExternalInterface.call("myBoxoo"). Niiiiiice!As noted previously, VBScript access even works with the Script Injection techniques we just discussed, and yes, VBScript can be easily embedded into AS3 scripts using the XML technique! But there is a small problem. VBScript lacks the "Wrapper Function" ability of JavaScript, so there's no direct way to inject and execute complex scripts like we can with JavaScript.Lucky for us there's an indirect way, and we even get to fall back to JavaScript to pull it off.Microsoft, with canny foresight, added a little-known (and poorly-documented) JavaScript command called execScript() which allows JavaScript (technically Jscript, Microsoft's version of the language) to take just about any language as a string and interpret it. It runs off the JavaScript window object:window.execScript('MsgBox("foo", 1)', 'vbscript')Handy, that! Too bad the online docs for it are so darned vague, or they might have mentioned that entire VBScript applications can be pumped into Internet Explorer through this little command. And that happens to be just what we need to do...Injecting and Executing VBScript into a Webpage from FlashThat JavaScript -Inside-XML trick we learned earlier works for VBScript, too:var myVBScript:XML =    <vbscript>        <![CDATA[            Function myBox (txt)                myBox = MsgBox(txt, 1)            End Function         ]]>    </vbscript>â€¦but there's a problem. While VBScript does support Classes and Encapsulation, it doesn't support them in a way that allows us to create a Wrapper Function as we can for JavaScript . This makes script injection a little more complex, but as I mentioned earlier, IE has a special Jscript function called execScript() that fixes the problem.The solution is to take the embedded VBScript, and convert it a string-based var that JavaScript can read, then run execScript() on the var. Carriage returns in VB are significant, so we need to maintain these when we write the JavaScript var out.import flash.external.ExternalInterface;function InjectVB(vbXML):* {    var CRLF = String.fromCharCode(13)+String.fromCharCode(10);    var vb = vbXML.toString();    var vb_arr = vb.split(CRLF);    var jsvb="function(){" + CRLF;    jsvb += " var temp='';" + CRLF;    for (var i = 0; i <vb_arr.length; i++) {        var vbTemp = vb_arr[i];        jsvb+=" temp+=('" + vbTemp + "' + String.fromCharCode(13));" + CRLF;    }    jsvb+= " window.execScript(temp, 'vbscript');" + CRLF;    jsvb+= "}";    trace(jsvb);    ExternalInterface.call(jsvb);}InjectVB(myVBScript);<p>