trace(e.localX);var locX:Number=e.localX;var locY:Number=e.localY;var stX:Number=e.stageX;var stY:Number=e.stageY;var prevScaleX:Number=_active_interface.scaleX;var prevScaleY:Number=_active_interface.scaleY;var externalPoint=new Point(stX,stY);var internalPoint=new Point(locX,locY);_active_interface.scaleX *= e.scaleX;_active_interface.scaleY *= e.scaleX;if(e.scaleX > 1 && _active_interface.scaleX > 4){	_active_interface.scaleX=prevScaleX;	_active_interface.scaleY=prevScaleY;}if(e.scaleY > 1 && _active_interface.scaleY > 4){	_active_interface.scaleX=prevScaleX;	_active_interface.scaleY=prevScaleY;}if(e.scaleX < 1.1 && _active_interface.scaleX < 1){	_active_interface.scaleX=prevScaleX;	_active_interface.scaleY=prevScaleY;}if(e.scaleY < 1.1 && _active_interface.scaleY < 1){	_active_interface.scaleX=prevScaleX;	_active_interface.scaleY=prevScaleY;}var mat:Matrix = _active_interface.transform.matrix.clone();fl.motion.MatrixTransformer.matchInternalPointWithExternal(mat,internalPoint,externalPoint);_active_interface.transform.matrix = mat;var min_allowed_scale:Number = IS_HORIZONLAL ? MIN_HSCALE : MIN_VSCALE;var max_allowed_scale:Number = IS_HORIZONLAL ? MAX_HSCALE : MAX_VSCALE;var gesture_scale:Number = Math.max(e.scaleX, e.scaleY); // max offsetvar internalPoint = new Point(e.localX, e.localY); // local hitvar externalPoint = new Point(e.stageX, e.stageY); // stage hit// if is too smal reset scale and posif (gesture_scale < min_allowed_scale){		transformPages(IS_HORIZONLAL);	} else if (gesture_scale > max_allowed_scale) {		// do nothing	} else {		_active_interface.scaleX *= gesture_scale;	_active_interface.scaleY *= gesture_scale;}center interface to hit posvar mat:Matrix = _active_interface.transform.matrix.clone();fl.motion.MatrixTransformer.matchInternalPointWithExternal(mat,internalPoint,externalPoint);_active_interface.transform.matrix = mat;//// get maximum value ( scaleX or scaleY )					//var zoom_scale:Number = Math.max(e.scaleX, e.scaleY);					//// set limits tom MIN snd MAX (keep the scale ratio)					//var minS:Number = MIN_SCALE / _active_interface.scaleX;					//var maxS:Number = MAX_SCALE / _active_interface.scaleX;					//zoom_scale = Math.max(minS, Math.min(zoom_scale, maxS));					//// zoom in or out (u the event data to scale the target)					//_active_interface.scaleX *= zoom_scale;					//_active_interface.scaleY *= zoom_scale;															/*var min_scale:Number = IS_HORIZONLAL ? MIN_HSCALE : MIN_VSCALE;					var max_scale:Number = IS_HORIZONLAL ? MAX_HSCALE : MAX_VSCALE;					var minS:Number = Math.max(min_scale, _active_interface.scaleX * e.scaleX);					var maxS:Number = Math.min(max_scale, _active_interface.scaleY * e.scaleY);					var scale:Number = BookUtils.roundTo(Math.max(minS, maxS), 3); // get max value and round it to three decimal places					//BookUtils.Log(						//"BookMain", "onGesture > scale:{0} is horizontal:{1} Range:[{2}/{3}]", 						//scale, IS_HORIZONLAL, min_scale, max_scale					//);					_active_interface.scaleX = _active_interface.scaleY = scale;*/															var internalPoint = new Point(e.localX, e.localY); // local hit					var externalPoint = new Point(e.stageX, e.stageY); // stage hit					var min_scale:Number = IS_HORIZONLAL ? MIN_HSCALE : MIN_VSCALE;					var max_scale:Number = IS_HORIZONLAL ? MAX_HSCALE : MAX_VSCALE;					var minS:Number = Math.max(min_scale, _active_interface.scaleX * e.scaleX);					var maxS:Number = Math.min(max_scale, _active_interface.scaleY * e.scaleY);					var scale:Number = BookUtils.roundTo(Math.max(minS, maxS), 3); // get max value and round it to three decimal places					//BookUtils.Log(						//"BookMain", "onGesture > scale:{0} is horizontal:{1} Range:[{2}/{3}]", 						//scale, IS_HORIZONLAL, min_scale, max_scale					//);					_active_interface.scaleX = _active_interface.scaleY = scale;					// center interface to hit pos					var mat:Matrix = _active_interface.transform.matrix.clone();					fl.motion.MatrixTransformer.matchInternalPointWithExternal(mat,internalPoint,externalPoint);					_active_interface.transform.matrix = mat;