Example:// JSFLvar docChangedID = fl.addEventListener( "documentChanged", onDocumentChangedHandler );function onDocumentChangedHandler(){	var panel = fl.getSwfPanel( "<my panel swf file name >", false ); panel.call( "AScustomEventName" );}// AS3import adobe.utils.MMExecute; import flash.external.ExternalInterface;ExternalInterface.addCallback( "AScustomEventName", this.myASMethod );function myASMethod() : void { // your stuff here	MMExecute( "some jsfl code or path to a jsfl script" );}var eventMove = fl.addEventListener("mouseMove",  onMove); var eventID = fl.addEventListener("selectionChanged", function (){  fl.trace("sel changed")fl.removeEventListener("selectionChanged", eventID//format("{i} elements selected", selection.length); });com.adobe.events.flash.documentChangedcom.adobe.events.flash.timelineChangedcom.adobe.events.flash.documentSavedcom.adobe.events.flash.documentOpenedcom.adobe.events.flash.documentClosedcom.adobe.events.flash.documentNewcom.adobe.events.flash.layerChangedcom.adobe.events.flash.frameChangedcom.adobe.events.flash.selectionChangedcom.adobe.events.flash.mouseMove"documentNew", "documentOpened", "documentClosed", "mouseMove", "documentChanged", "layerChanged""timelineChanged", "frameChanged", “prePublish”, “postPublish”, “selectionChanged”, and "dpiChanged".//not testeddebugExecutionChangeddeleteSyncSettingsSuccessdocumentContentChangeddocumentRedodocumentSaveddocumentUndolibraryChangedsyncApplyPendingsyncErrorsyncIdlethemeChangedvar counter = 0;var eventID = fl.addEventListener("selectionChanged", function (){     	counter++	fl.trace("selectionChanged:"+counter);	if (counter > 1){		fl.removeEventListener("selectionChanged", eventID);		fl.trace("Create Arrow now!")	}});package {import flash.display.*;import flash.text.*;import flash.external.*;import adobe.utils.MMExecute;	public class CurrentDocument extends Sprite {			public function CurrentDocument() {			onDocumentChanged("Waiting for a change...");					ExternalInterface.addCallback("documentChanged", onDocumentChanged);					MMExecute("fl.addEventListener('documentChanged', onDocumentChanged);\\			var panels = fl.swfPanels;\			var myPanel;\			for (var i = 0; i < panels.length; i++) {\				if (panels[i].name == 'CurrentDocument') {\					myPanel = panels[i];\					break;\				}\			}\			function onDocumentChanged() {\				var path = fl.getDocumentDOM().pathURI.split('/');\				if (myPanel) myPanel.call('documentChangedppath.pop());\			}")		}			private function onDocumentChanged(name:String):void {			label_tf.text = name;		}		}}fl.addEventListener('documentSaved', documentSavedF);fl.addEventListener('postPublish', postPublishF);if those work, see if you can work out a presave (eg, "preDocumentSaved", "preDocumentSave", "preSave", "preSaved"// JSFLvar docChangedID = fl.addEventListener( "documentChanged", onDocumentChangedHandler );function onDocumentChangedHandler(){     var panel = fl.getSwfPanel( "<my panel swf file name >", false );     panel.call( "AScustomEventName" );}// ASimport adobe.utils.MMExecute;import flash.external.ExternalInterface;ExternalInterface.addCallback( "AScustomEventName", this.myASMethod );function myASMethod() : void {      // your stuff here      MMExecute( "some jsfl code or path to a jsfl script" );}// JSFLdocumentChangedHandler = function (){    // pass the document name or ID as a parameter	mySWFpanel.call( "ASdocumentChanged", fl.getDocumentDOM().name );};fl.addEventListener("documentChanged", documentChangedHandler );// ASvar myCurrentDocumentName:String;function ASdocumentChanged( dname:String ) : void {      if( dname === myCurrentDocumentID ){	  // OK	  }else{	  // disable the panel	  }}csInterface.addEventListener("eventTriggeredFromJSFL", () => { "doSomethingHere"; });  csInterface.evalScript('fl.addEventListener("prePublish", function () { "dispatchEventHere"; });'); https://github.com/davestewart/xjsfl/blob/master/core/jsfl/libraries/flash/Events.jsfl/**			 * An object representing a the JSFL Event that fires when a user moves the mouse			 * @param	{String}	type		The type of event, which is always 'move'			 * @param	{Boolean}	shift		A flag indicating if the SHIFT key is down			 * @param	{Boolean}	ctrl		A flag indicating if the CTRL key is down			 * @param	{Boolean}	alt			A flag indicating if the ALT key is down			 * @param	{Number}	x			The x location in pixels of the mouse on the Flash stage			 * @param	{Number}	y			The y location in pixels of the mouse on the Flash stage			 */			MouseEvent = function()			{				Event.call(this, MouseEvent.MOVE, 'move');				this.shift		= fl.tools.shiftIsDown;				this.ctrl		= fl.tools.ctlIsDown;				this.alt		= fl.tools.altIsDown;				this.x			= fl.tools.penLoc.x;				this.y			= fl.tools.penLoc.y;			}			MouseEvent.prototype = new Event;			MouseEvent.prototype.constructor = MouseEvent;			MouseEvent.prototype.toString = function(){ return '[object MouseEvent x="' +this.x+ '" y="' +this.y+ '" shift="' +this.shift+ '" ctrl="' +this.ctrl+ '" alt="' +this.alt+ '"]'; }			MouseEvent.toString = function(){ return '[class MouseEvent]'; }// # Constants		// CS5.5+ only			DocumentEvent.PUBLISH		= 'prePublish';			DocumentEvent.PUBLISHED		= 'postPublish';			DocumentEvent.SAVED			= 'documentSaved';		// CS4+			DocumentEvent.NEW			= 'documentNew';			DocumentEvent.OPENED		= 'documentOpened';			DocumentEvent.CLOSED		= 'documentClosed';			DocumentEvent.CHANGED		= 'documentChanged';			LayerEvent.CHANGED			= 'layerChanged';			FrameEvent.CHANGED			= 'frameChanged';			MouseEvent.MOVE				= 'mouseMove';