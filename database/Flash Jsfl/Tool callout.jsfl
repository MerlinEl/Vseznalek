//*********************************//var ot = OrienTools;//********************************//function configureTool(){		var curr_toolObj = fl.tools.activeTool;	curr_toolObj.setIcon("callout.png");	curr_toolObj.setToolName("callout");	curr_toolObj.setMenuString("Callout Tool");	curr_toolObj.setToolTip("Callout Tool");}function activate(){	curr_toolObj = fl.tools.activeTool;	curr_toolObj.setPI("shape");	mouseDown = mouseDownFunc;	mouseUp = mouseUpFunc;	mouseMove = mouseMoveFunc;}function mouseDownFunc(){	startPoint = fl.tools.penDownLoc;	transform(startPoint, fl.getDocumentDOM().viewMatrix);	startPoint = fl.tools.snapPoint(startPoint);	fl.drawingLayer.beginDraw();}function mouseMoveFunc(){	if(fl.tools.mouseIsDown){		fl.drawingLayer.beginFrame();		penPoint = fl.tools.penLoc;		transform(penPoint, fl.getDocumentDOM().viewMatrix);		penPoint = fl.tools.snapPoint(penPoint);		penPoint = fl.tools.constrainPoint(startPoint, penPoint);		if(penPoint.x > startPoint.x){			offset = -20;		}		else		{			offset = 20;		}		points = new Array();		points[0] = {x:startPoint.x, y:startPoint.y};		points[1] = {x:penPoint.x + offset, y:penPoint.y};		points[2] = {x:penPoint.x, y:penPoint.y};		points[3] = {x:penPoint.x, y:penPoint.y - 20};		points[4] = {x:penPoint.x, y:penPoint.y + 20};		call_path = fl.drawingLayer.newPath();		for(var i=0;i<points.length;i++){			invert(points[i], fl.getDocumentDOM().viewMatrix);			call_path.addPoint(points[i].x, points[i].y);		}		fl.drawingLayer.drawPath(call_path);		fl.drawingLayer.endFrame();	}}function mouseUpFunc(){	fl.drawingLayer.endDraw();	call_path.makeShape();	curr_toolObj.setPI("text");	mouseUp = nullFunc;	mouseMove = nullFunc;	mouseDown = nullFunc;	//fl.tools.activeTool = tools.toolObjs[0];	//curr_toolObj.setPI("arrow");	//fl.tools.activeTool = curr_toolObj;	//fl.trace("tools.toolObjs:" + tools.toolObjs)	addTextBox();			//mouseDown = addTextBox;	//alert("Set font properties and click on the stage.");}function nullFunc(){}function addTextBox(){	curr_doc = fl.getDocumentDOM();	testResult = curr_doc.xmlPanel(fl.configURI+"/Tools/callout.xml");	if(testResult.dismiss == "accept"){		curr_lib = curr_doc.library;		var textName = "callout_text_1";		var tryCount = 0;		while(curr_lib.itemExists(textName)){			tryCount++;			textName = "callout_text_" + tryCount;		}		curr_lib.addNewItem("movie clip", textName);		curr_lib.editItem(textName);		curr_doc.addNewText({top:0, left:0, right:10, bottom:10});		var selArray = new Array();		selArray[0] = curr_doc.getTimeline().layers[0].frames[0].elements[0];		curr_doc.selection = selArray;		curr_text = curr_doc.selection[0];		curr_text.autoExpand = true;		curr_text.setTextString(testResult.text);		curr_doc.exitEditMode();				// removing focus from current doc allows to add item in stage		ot.focusPanel("OrienTools");				curr_lib.addItemToDocument({x:0, y:0}, textName);				//fl.trace("moveSelectionBy > curr_doc.selection:" + curr_doc.selection + " penPoint:" + penPoint)				if (curr_doc.selection.length == 0) return;				curr_doc.moveSelectionBy(penPoint);				if(penPoint.x > startPoint.x){			curr_doc.moveSelectionBy({x:curr_doc.selection[0].width/2+10, y:0});		}		else {			curr_doc.moveSelectionBy({x:-curr_doc.selection[0].width/2-10, y:0});		}		curr_doc.selectNone();		//fl.trace("moveSelectionBy > doc:"+ curr_doc + " select none")	}	else {		alert("Callout Text cancelled.");	}}function setCursor(){	fl.tools.setCursor(0);}function transform(aPoint, matrix){	var x = aPoint.x * matrix.a + aPoint.y * matrix.c;	var y = aPoint.x * matrix.b + aPoint.y * matrix.d;	aPoint.x = x;	aPoint.y = y;}function invert(aPoint, matrix){	var x = aPoint.x * matrix.d + aPoint.y * -matrix.c;	var y = aPoint.x * -matrix.b + aPoint.y * matrix.a;	aPoint.x = x;	aPoint.y = y;}function constrain45(p1, p2){	if (fl.tools.shiftIsDown)	{		var dx = Math.abs(p2.x - p1.x);		var dy = Math.abs(p2.y - p1.y);		var offset = Math.max(dx, dy);		if(p2.y < p1.y)		{			p2.y = p1.y - offset;		}		else 		{			p2.y = p1.y + offset;		}		if(p2.x > p1.x)		{			p2.x = p1.x + offset;		}		else		{			p2.x = p1.x - offset;		}	}}