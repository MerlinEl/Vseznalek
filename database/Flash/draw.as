/////////////Draw rotated tiled image///////////////////////////////////////		private function drawRotatedTiledImage(mc:MovieClip, bitmap:Bitmap, count:Number):void{					var mc_border:MovieClip = new MovieClip();						var matrix:Matrix = new Matrix();						var theta:Number = 45; //rotation angle 			var x0:Number = 0;			var y0:Number = 0;			var w:Number = 400;			var h:Number = 400;						matrix.rotate(theta);			mc_border.graphics.beginBitmapFill(bitmap.bitmapData, matrix);			mc_border.graphics.moveTo(x0, y0);			mc_border.graphics.lineTo(x0 + w * Math.cos(theta), y0 + w * Math.sin(theta));			mc_border.graphics.lineTo(x0 + w * Math.cos(theta) - h * Math.sin(theta), y0 + w * Math.sin(theta) + h * Math.cos(theta));			mc_border.graphics.lineTo(x0 - h * Math.sin(theta), y0 + h * Math.cos(theta));			mc_border.graphics.endFill();						mc.addChild(mc_border);			mc_border.x -= mc_border.width/2;			mc_border.y -= mc_border.height/2;		};/////////////OK///////////////////////////////////////function drawPage():void{	trace("all pages layers num:", all_pages.numChildren)	var bm_data = getMovieclipBitmapData(all_pages);	var sh:Shape = mc_right_page.getChildAt(0)	trace("the shape:", sh)	var new_tm = new Matrix( 1, 0, 0, 1, all_pages.width/2, all_pages.height/2 )	sh.graphics.beginBitmapFill(bm_data, new_tm, true);	sh.graphics.drawRect(-500, -350, 1000, 700);	sh.graphics.endFill();	mc_right_page.x = 20;	mc_right_page.y = 100;};function getMovieclipBitmapData(mc:MovieClip):BitmapData{	var bm_data:BitmapData = new BitmapData(pg_rect.width, pg_rect.height, true, 0x0);	var new_tm = new Matrix( 1, 0, 0, 1, pg_rect.width/2, pg_rect.height/2 )	bm_data.draw(mc, new_tm);	return bm_data;};========================================================b.bitmapData.dispose();mc_turn.getChildAt(0)b.bitmapData.fillRect(b.bitmapData.rect,0xFF000000)stop();import flash.display.MovieClip;/*import flash.display.*;import flash.geom.Point;import flash.geom.Rectangle;import flash.text.engine.GraphicElement;*/import flash.geom.Rectangle;import flash.display.BitmapData;import flash.display.Shape;import flash.geom.Matrix;import flash.display.Bitmap;import flash.events.Event;var mc_turn:MovieClip = all_pages.ptest as MovieClip;all_pages.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);all_pages.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);all_pages.buttonMode = true;			mc_turn.mouseEnabled = false;			mc_turn.mouseChildren= false;trace("layers num:", all_pages.numChildren)//var tl:DisplayObject = all_pages.getChildAt(all_pages.numChildren)//trace(tl)var num = tl.currentLayer;var old_layer = tl.layers[num];//collect framesvar the_instances = new Array();for (var i = 0; i < old_layer.frameCount; i++){	var frame = old_layer.frames[i];function mouseDownHandler(e:MouseEvent):void {	var obj = e.target;	obj.useHandCursor = true;	if (e.stageX < obj.width/3){		trace("left click");		mc_turn.gotoAndPlay(21)	} else {		trace ("right click");		mc_turn.gotoAndPlay(2);				mc_turn.visible = false;		var clone = createBitmapClone(all_pages)		trace("clone:",clone)		mc_turn.addChild(new Bitmap(clone));		mc_turn.visible = true;		//drawPage()	}};function mouseUpHandler(e:MouseEvent):void {	var obj = e.target;	var target = obj.dropTarget;};///Tohle fungujefunction createBitmapClone(target:DisplayObject):BitmapData {    var targetTransform:Matrix = target.transform.concatenatedMatrix;    var targetGlobalBounds:Rectangle = target.getBounds(target.stage);    var targetGlobalPos:Point = target.localToGlobal(new Point());    // Calculate difference between target origin and top left.    var targetOriginOffset:Point = new Point(targetGlobalPos.x - targetGlobalBounds.left, targetGlobalPos.y - targetGlobalBounds.top);    // Move transform matrix so that top left of target will be at (0, 0).    targetTransform.tx = targetOriginOffset.x;    targetTransform.ty = targetOriginOffset.y;    var cloneData:BitmapData = new BitmapData(targetGlobalBounds.width, targetGlobalBounds.height, true, 0x00000000);    cloneData.draw(target, targetTransform);    return cloneData;}function draw(source:IBitmapDrawable, matrix:Matrix = null, colorTransform:flash.geom:ColorTransform = null, blendMode:String = null, clipRect:Rectangle = null, smoothing:Boolean = false):void{	}function drawPage():void{	mc_turn.visible = false;		var bmd:BitmapData = new BitmapData( 50, 50 );	var shape:Shape = all_pages.getChildAt( 0 ) as Shape;	var src:Shape = new Shape();	all_pages.addChild( src );	var mc_turn:Bitmap = new Bitmap( );	mc_turn.x = 300;	mc_turn.y = all_pages.y - 25;	addChild( mc_turn );	 	addEventListener(Event.ENTER_FRAME, onFrame);	 	function onFrame( event:Event ){		var w = 800;		var h = 600;		var rect = new Rectangle( 0, 0, w, h );		var offset:Point = new Point(20,20);		bmd.draw( shape, new Matrix( 1, 0, 0, 1, offset.x, offset.y, null, null, rect ));		mc_turn.bitmapData = bmd;	 		with (src.graphics){			clear();			lineStyle(2);			drawRect(- int(tx.text), - int(ty.text), uint(w.text), uint(h.text) );		}	}	mc_turn.visible = true;}function drawPage():void{	mc_turn.visible = false;	var po:Point = new Point(stage.stageWidth, stage.stageHeight)	var bitmap_data:BitmapData = new BitmapData(po.x, po.y, true, 0x000000); //width, height, transparency, color	var largeBitmap:Bitmap = new Bitmap(bitmap_data);	var displayBitmap:Bitmap = new Bitmap(new BitmapData(800, 600));	addEventListener(Event.ENTER_FRAME, loop);	function loop(e:Event):void {		removeEventListener(Event.ENTER_FRAME, loop);		var rect = new Rectangle(0, 0, 512, 768);		displayBitmap.bitmapData.copyPixels(largeBitmap, rect, new Point());		mc_turn.addChild(new Bitmap(displayBitmap));		mc_turn.visible = true;	}}function drawPage():void{	mc_turn.visible = false;	var po:Point = new Point(stage.stageWidth, stage.stageHeight)	trace ("stage size", po)	var bitmap_data:BitmapData = new BitmapData(po.x, po.y, true, 0x000000); //width, height, transparency, color	//bitmap_data.draw(all_pages);		//bitmap_data.draw( all_pages, new Matrix( 1, 0, 0, 1, 512, 384 ) );	//var offset = new Point(po.x/2, po.y/2);	//var matrix = new Matrix(1, 0, 0, 1, offset.x, offset.y)	var bounds:Rectangle = mc_turn.getBounds(this);	var matrix = new Matrix(1, 0, 0, 1, bounds.x, bounds.y)	var rect = new Rectangle(0, 0, po.x, po.y)	bitmap_data.draw(all_pages, matrix , null, null, rect);		//with (mc_turn.graphics){		//clear();		//lineStyle(2);		//drawRect(-offset.x, -offset.y, po.x, po.y);	//}		mc_turn.addChild(new Bitmap(bitmap_data));	mc_turn.visible = true;}function getBitmapRegion(srcBitmap:Bitmap , section:Rectangle){    // Create the new bitmap and associated graphics object    bmp:Bitmap  = new Bitmap(section.Width, section.Height);    g:Graphics = Graphics.FromImage(bmp);    // Draw the specified section of the source bitmap to the new one    g.DrawImage(srcBitmap, 0, 0, section, GraphicsUnit.Pixel);    g.Dispose(); // Clean up    return bmp;// Return the bitmap}// # create the bitmapvar bitmap_data:BitmapData = new BitmapData(400, 200, true, 0x000000);// # now draw this movieClip's content to the bitmapbitmap_data.draw(this);// # 2nd frame should be blank!nextFrame();// # now attach the bitmap you made to this movieclipthis.addChild(new Bitmap(bitmap_data));