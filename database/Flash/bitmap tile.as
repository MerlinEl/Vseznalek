//set alpha to bitmapvar bmpd:BitmapData = new BitmapData(100,100,true,0xFF000000);var bd:Bitmap = new Bitmap(bmpd);addChild(bd);function SetAlpha(bmd:BitmapData):BitmapData{    var rec:Rectangle = new Rectangle(0, 0, bmd.width, bmd.height);    var ct:ColorTransform = new ColorTransform();    ct.alphaMultiplier = .2;     bmd.colorTransform(rec, ct);    return bmd;}SetAlpha(bmpd);package classes {	// Import required packages.	import flash.display.MovieClip;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.*;	import flash.geom.Point;		// Class definition.	public class Tile_Image extends MovieClip {				// Class variables.		public static var bitmap:Bitmap = new Bitmap();		public static var mc_instance:MovieClip;				public function Tile_Image():void{			trace("Loading Tile_Image...")			mc_instance = this;		};		public function tileImage(path:String, repeat:String = "xy"):void{			trace("Tile Image:", path);			var url:URLRequest = new URLRequest(path);			var loader:Loader = new Loader();			configureListeners(loader.contentLoaderInfo);			loader.load(url);		};		// Configure the loader object events.		private function configureListeners(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.COMPLETE, loaderComplete);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, loaderError);		};		// Loader object complete event.		private function loaderComplete(event:Event):void {			removeEventListener(Event.COMPLETE, loaderComplete);			removeEventListener(IOErrorEvent.IO_ERROR, loaderError);			bitmap.bitmapData = Bitmap(event.target.content).bitmapData;			trace(bitmap)			tile();		};		// Loader object error event.		private function loaderError(event:Event):void {			throw new Error("Problem : There was an error accessing the image file.");		};		public static function tile():void{						trace("before:",mc_instance.numChildren)			while (mc_instance.numChildren > 1) {				mc_instance.removeChildAt(0);			}									//create instance of bitmap for tiling			var tile:Bitmap = getImageInstance();			//calculate how many tiles required horiz / vert			var vert_required:Number = mc_instance.width / tile.width;			var horiz_required:Number = mc_instance.height / tile.height;			var mc_center_offset:Point = new Point(mc_instance.width/2, mc_instance.height/2);						//increment through both horizontal and vertical repitions until area is filled/overflowed			for(var h=0; h < vert_required; h++){				for(var w=0; w < horiz_required; w++){					//get_image_instance creates a new instance of the image					tile = getImageInstance();					//set image pos					tile.x = tile.width * w - mc_center_offset.x;					tile.y = tile.height * h - mc_center_offset.y;					mc_instance.addChild(tile);				}			}			//create mask to hide unwanted overlap of tiles if nuimber of tiles required is not an exact multiple			/*var mask_mc = new MovieClip();			mask_mc.graphics.beginFill(0);  			mask_mc.graphics.drawRect(-mc_center_offset.x, -mc_center_offset.y, width, height);  			//Debug >> mask_mc.graphics.drawRect(-mc_center_offset.x, -mc_center_offset.y, 100, 200); 			mask_mc.graphics.endFill();			//apply the mask to the tiles			mask = mask_mc;			addChild(mask_mc);*/			trace("after:",mc_instance.numChildren)		};		//method to return an instance of the loaded image for use within the class.        //this is required mainly dfor the tiling option as there are no simple ways to duplicate a display object        public static function getImageInstance():Bitmap {            //create a bitmap data object to house the image            var bmd = new BitmapData (bitmap.width, bitmap.height, true, 0);            //create a bitmap render of the loaded image            bmd.draw(bitmap);            return new Bitmap(bmd, "auto", true);        };		public static function updateImage():void{			trace("updating tile")			tile();		}	}//class}//package