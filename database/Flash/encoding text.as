		private function readFile(file:File):String{					var fileStream:FileStream = new FileStream(); // Create our file stream			fileStream.open(file, FileMode.READ);			//var fileContents:String = fileStream.readUTFBytes(fileStream.bytesAvailable); // Read the contens of the 			var utf16:ByteArray = new ByteArray();						utf16.endian = Endian.LITTLE_ENDIAN;			//fileStream.readBytes(utf16,0,16);			fileStream.readBytes(utf16);			//trace("bytes:"+utf16.readUTF());										var fileContents:String = encode(utf16);			trace("bytes:"+ fileContents);								//trace(utf16.readInt());			//trace(utf16.readUTF());			fileStream.close(); // Clean up and close the file stream			return fileContents;		};		private static function encode(ba:ByteArray):String { //var str:String = encode(ba);					var origPos:uint = ba.position;			var result:Array = new Array();			for (ba.position = 0; ba.position < ba.length - 1; )				result.push(ba.readShort());			if (ba.position != ba.length)				result.push(ba.readByte() << 8);			ba.position = origPos;			return String.fromCharCode.apply(null, result);		};		public static function decode(str:String):ByteArray { //var ba:ByteArray = decode(str);			var result:ByteArray = new ByteArray();			for (var i:int = 0; i < str.length; ++i) {				result.writeShort(str.charCodeAt(i));			}			result.position = 0;			return result;		};var bytes:ByteArray = new ByteArray();bytes.endian = Endian.LITTLE_ENDIAN;bytes.writeUTFBytes("a");bytes.writeByte(0x0);bytes.position = 0var t1:String = bytes.readMultiByte(1,'us-ascii'); // is 1100001 when it should be 01100001trace(t1)var t2:String = bytes.readMultiByte(1,'iso-8859-01'); // is 0 when it should be 00000000trace(t2)