//DECLAREpackage imost{    import flash.events.Event;	import flash.events.EventDispatcher;    public class LoadCompleteEvent extends Event{	        public static const LOAD_FINISHED="load_finished";		private static var dispatcher:EventDispatcher = new EventDispatcher();        //declare constructor here.        public function LoadCompleteEvent(type:String){		            super(type);        };		public static function isDone():void {					dispatcher.dispatchEvent( new LoadCompleteEvent(LoadCompleteEvent.LOAD_FINISHED) );		};		public static function waitAndExecute(fn:Function):void {						dispatcher.addEventListener(LoadCompleteEvent.LOAD_FINISHED, fn);		}        //override clone method        public override function clone():Event{		            return new LoadCompleteEvent(type);        };    }//class}//package//EXECUTEimport imost.LoadCompleteEvent;LoadCompleteEvent.isDone();//CATCHimport imost.LoadCompleteEvent;LoadCompleteEvent.waitAndExecute(onSounsdsLoaded);function onSounsdsLoaded (evt:Event) {			     trace(" LOAD_FINISHED");}			//old.......//DECLAREpackage imost{    import flash.events.Event;	import flash.events.EventDispatcher;    public class LoadCompleteEvent extends Event{	        public static const LOAD_FINISHED="load_finished";	public static var dispatcher:EventDispatcher = new EventDispatcher();        public function LoadCompleteEvent(type:String){		            super(type);        };        //always override clone method in custom events        public override function clone():Event{		            return new LoadCompleteEvent(type);        };    }//class}//package//EXECUTEimport imost.LoadCompleteEvent;LoadCompleteEvent.dispatcher.dispatchEvent(new LoadCompleteEvent(LoadCompleteEvent.LOAD_FINISHED));//CATCHimport imost.LoadCompleteEvent; LoadCompleteEvent.dispatcher.addEventListener(LoadCompleteEvent.LOAD_FINISHED, onSounsdsLoaded); public function onSounsdsLoaded (evt:Event) {			           trace("load_finished"); };