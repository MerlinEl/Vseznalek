		private static function cropBitmap(bmp:Bitmap, _x:int, _y:int, _w:int, _h:int):Bitmap {  				   var cropArea:Rectangle = new Rectangle( 0, 0, _w, _h );  		   var croppedBitmap:Bitmap = new Bitmap( new BitmapData( _w, _h ), PixelSnapping.ALWAYS, true );  		   croppedBitmap.bitmapData.draw( bmp, new Matrix(1, 0, 0, 1, -_x, -_y) , null, null, cropArea, true );  		   return croppedBitmap;  		};		private static function bitmapScale(bmp:Bitmap, pos_x:Number, pos_y:Number, w:Number, h:Number):Bitmap{					bmp.smoothing = true; //get better performance 			var mat:Matrix = new Matrix();			mat.scale(w/bmp.width, h/bmp.height); //rescale bmp			mat.translate(pos_x , pos_y); //offset bmp						var draw_bd:BitmapData = new BitmapData(w, h, true, 0x00000000);			draw_bd.draw(bmp, mat, null, null, null, true);			var new_bmp = new Bitmap (draw_bd);			return new_bmp;		};              /**		* cropBitmap		* @ARG_object   the display object to crop		* @ARG_x        the horizontal amount to shift the crop (0 = no shift)		* @ARG_y        the vertical amount to shift the crop (0 = no shift)		* @ARG_width    width to crop to		* @ARG_height   height to crop to		**/		function cropBitmap( ARG_object:DisplayObject, ARG_x:Number, ARG_y:Number, ARG_width:Number, ARG_height:Number):Bitmap {			// create a rectangle of the specific crop size			var cropArea:Rectangle = new Rectangle(0, 0, ARG_width, ARG_height);			// create a BitmapData object the size of the crop			var bmpd:BitmapData = new BitmapData(ARG_width, ARG_height);			// create the cropped Bitmap object from the bitmap data			var croppedBitmap:Bitmap = new Bitmap(bmpd, PixelSnapping.ALWAYS, true);			// create the matrix that will shift the crop from 0,0			var cropMatrix:Matrix = new Matrix();			cropMatrix.translate(-ARG_x, -ARG_y);			// draw the supplied object, cropping to the cropArea with the cropMatrix offseting the result			bmpd.draw( ARG_object, cropMatrix, null, null, cropArea, true );			return croppedBitmap; // return the cropped bitmap		}		/**		* scaleBitmap		* @ARG_object   the display object to scale		* @ARG_scaleX   the amount to scale horizontally (1 = no scale)		* @ARG_scaleY   the amount to scale vertically (1 = no scale)		**/		function scaleBitmap( ARG_object:DisplayObject, ARG_scaleX:Number, ARG_scaleY:Number ):Bitmap {			// create a BitmapData object the size of the crop			var bmpd:BitmapData = new BitmapData(ARG_object.width * ARG_scaleX, ARG_object.height * ARG_scaleY);			// create the scaled Bitmap object from the BitmapData			var scaledBitmap:Bitmap = new Bitmap(bmpd, PixelSnapping.ALWAYS, true);			// create the matrix that will perform the scaling			var scaleMatrix:Matrix = new Matrix();			scaleMatrix.scale(ARG_scaleX, ARG_scaleY);			// draw the object to the BitmapData, applying the matrix to scale			bmpd.draw( ARG_object, scaleMatrix );			return scaledBitmap; // return the scaled Bitmap		}