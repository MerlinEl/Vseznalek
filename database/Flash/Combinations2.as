function GetCombination(list:Array, t:Array, n:int, m:int, b:Array, M:int):void{		for (var i:int=n; i>=m; i--){			b[m - 1] = i - 1;		if (m > 1){					GetCombination(list, t, i - 1, m - 1, b, M);		} else {					if (list == null){							list = new Array();			}			var temp:Array = [M];			for (var j:int=0; j<b.length; j++){							temp[j] = t[b[j]] + " ";			}			list.push(temp);		}	}};function GetCombinations(t:Array, n:int):Array{		if (t.length < n) return [];	var temp:Array = [n];	var list:Array = new Array();	GetCombination(list, t, t.length, n, temp, n);	return list;};	//How to use:var output:Array = new Array();//var chars:String = "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z";var chars:String = "20,10,5,2,1";var input:Array = chars.split(',');//(input characters array, output arrays size)output = GetCombinations(input, 4); trace("output:\n"+output.join("\n"));/*output:10 ,5 ,2 ,1 20 ,5 ,2 ,1 20 ,10 ,2 ,1 20 ,10 ,5 ,1 20 ,10 ,5 ,2 */