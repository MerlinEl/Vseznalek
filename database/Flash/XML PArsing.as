addNamespace,appendChild,childIndex,inScopeNamespaces,insertChildAfter,insertChildBefore,name,namespace,localName,namespaceDeclarations,nodeKind,prependChild,removeNamespace,replace,setChildren,setLocalName,setName, andsetNamespace. 		<PHOTOS>	<page_07>		<img_a label="delfín"/>		<img_b label="hvězdice"/>		<img_e label="moře"/>		<img_f label="velryba"/>	</page_07>		<page_18>		<img_a label="ježek na podzim v listí"/>		<img_b label="podzim"/>	</page_18></PHOTOS>		private function parseXMLToObject(xml:XML):Object{  						var obj_list:Object = {};			for each (var key in xml.children()) {							var page = String(key.name()).split("_").pop();				var image_list:Object = {};				image_list["length"] = 0;								for each (var subkey in key.children()){										var id = String(subkey.name()).split("_").pop();					var label = subkey.@label;					trace("XML page:"+page+" id:"+id+" label:"+label);					image_list[id] = label;					image_list["length"] += 1;				}				obj_list[page] = image_list;			}			return obj_list;		} or		private function parseXMLToObject(xml:XML):Object{  						var varObject:Object = {};  			for each (var key in xml.children()) {							for each (var subkey in key.children()){										var page = String(key.name()).split("_").pop();					var id = String(subkey.name()).split("_").pop();					trace("XML page:"+page+" id:"+id+" label:"+subkey.@label);					varObject[page] = {"id":id, "label":subkey.@label};				}			}			return varObject;		}var text_line:int = TB.getLineIndexOfChar(TB.caretIndex);//trace("trace:", XMLData.Cviceni_pismene_m01.cards.card_08.@array)				//trace("trace:", XMLData.children().length())				var it:Array = new Array()				for each (var ch in XMLData.children()) it.push(ch.name());				if (it.length == 0) return;				for(var i:Number=0;i<it.length;i++){									var n = it[i];					dp.addItem({iconSource:icon_dir, label:n, bonus:"false", count:"5", date:"?", by:"?"}); //later set tag				}//get text form XML				                          var xmlResponse:XML = XML(event.target.data);				XML.ignoreWhitespace = true;				titleText.text=xml.page[0].@pTitle;				descText.text=xml.page[0];				xmlResponse.ignoreWhite = true;				xmlResponse.ignoreWhitespace = true;								const TRIM:RegExp = /^ +| +$/g;				var str:String = xmlResponse.replace(TRIM,"");				xmlResponse.preserveWhiteSpace = true				pvalue has whitespace				var whitespace:RegExp = /(\t|\n|\s{2,})/g;				var trimmedValue:String = xmlResponse.replace(whitespace, "");				xmlResponse.ignoreWhite = true;				textBox.condenseWhite = true;				test repair boldvar xml:XML = <labels>    <label>All</label>    <label>your</label>    <label>base</label>    <label>are</label>    <label>belong</label>    <label>to</label>    <label>us.</label></labels>;var list:XMLList = xml.label;var labels:XMLList = list.text(); //Optionaltrace(list[0]);trace(list[3]);trace(list[6]);