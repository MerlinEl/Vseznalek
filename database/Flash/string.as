 var aEmployees:Array = ["A", "P", "C", "H"];        var sAnEmployee:String = String(aEmployees.pop());        trace(aEmployees.toString());        trace(sAnEmployee);		//remove white spacesprivate function filterData(vars:*):Object{  						var varObject:Object = {};  			 for (var prop:String in vars)  			 {  				  //trace(prop.replace(/^\W+/, ""), vars[prop]);  				  varObject[prop.replace(/^\W+/, "")] = vars[prop];  			 }  			return varObject;		}var str:String = "Dr. Bob Roberts, #9." trace(str.toLowerCase()); // dr. bob roberts, #9. trace(str.toUpperCase()); // DR. BOB ROBERTS, #9.private function collapseSerial(str:String):String{				return str.replace(/-/gi, "") //remove all dashes};//Change A Character In a stringB = B.replace(B.charAt(4), "w");//split string in to arraystr.split("")//merge array in to stringarr.join("")import mx.utils.StringUtil;var myString:String = '  This string needs to be trimmed   ';myString = StringUtil.trim(myString);trace(myString);//return's This string needs to be trimmed with no whitespace on the left or right side					out = out.split("\r").join("");  //remove carriage return					out = out.split("\n").join("~");  //replace enter with symbol					out = out.split(" ").join("");  //remove any spacesfunction trim( s:String ):String{  return s.replace(/^[\s|"]+|[\s|"]+$/gs, '');}//collapse lines - remove \nformattedString.split("\n").join("").split("\t").join("").split("\r").join()//check if str contains any spaces/\s/.test(str)// REMOVE REPEATED WHITE SPACE WITH ONLY ONEtextfield.text = textfield.text.replace (/ {1,}/gi, " ");// REMOVE WHITE SPACE AT BEGININGtextfield.text = textfield.text.replace (/^[ \t]+/, "");// REMOVE WHITE SPACE AT THE ENDtextfield.text = textfield.text.replace (/[ \t]+$/, ""); //remove whitespace from a stringvar rex:RegExp = /[\s\r\n]*/gim;var str:String = "This is            a string.";str = str.replace(rex,'');str_array += n.replace( '/^\s+', ''); //replace 1 or more spaces at the start of the stringvar reg :RegExp = /\W+/g;//new RegExp ( "[+\-\=\*\:\<\>\{\}\(\)\[\]]" , "gi" );var reg :RegExp = new RegExp ( "[^\\p{A-Z}\\p{a-z}]" , "gi" ); //define allowed characters (remain only words)var lineWords:Array = raw.split(reg);raw = raw.split("(").join(",");raw = raw.split(")").join(",");var s:String = raw.replace(/,|\.|\"/g,',');var spaces:RegExp = / /gi; // match "spaces" in a stringtargets = targets.replace(spaces, ""); // find and replace "spaces"targets = targets.split(" ").join("")// remove spaces// auxillary function:function round(n){    var s = String(n);    var a = s.split(".");    var num = parseInt(a[0]);    var dec = parseInt(a[1].substr(0, 1));    if(dec &gt;= 5)    {        num++;    }    return num;}//reverse stringall_txt = all_txt.split("").reverse().join("");addChildAt(child:DisplayObject, index:int):DisplayObjectgetChildAt(index:int):DisplayObjectgetChildIndex(child:DisplayObject):intremoveChildAt(index:int):DisplayObjectsetChildIndex(child:DisplayObject, index:int):voidswapChildren(child1:DisplayObject, child2:DisplayObject):voidswapChildrenAt(index1:int, index2:int):voidvar str:String = "hello world!"; for (var i:int = 0; i < str.length; i++) {     trace(str.charAt(i), "-", str.charCodeAt(i)); }h - 104 e - 101 l - 108 l - 108 o - 111 - 32 w - 119 o - 111 r - 114 l - 108 d - 100 ! - 33var myStr:String = String.fromCharCode(104,101,108,108,111,32,119,111,114,108,100,33);         // Sets myStr to "hello world!"String PropertiesProperty 	Descriptionconstructor 	Returns the string's constructor functionlength 	Returns the length of a stringprototype 	Allows you to add properties and methods to an objectString MethodsMethod 	DescriptioncharAt() 	Returns the character at the specified index (position)charCodeAt() 	Returns the Unicode of the character at the specified indexconcat() 	Joins two or more strings, and returns a new joined stringsfromCharCode() 	Converts Unicode values to charactersindexOf() 	Returns the position of the first found occurrence of a specified value in a stringlastIndexOf() 	Returns the position of the last found occurrence of a specified value in a stringlocaleCompare() 	Compares two strings in the current localematch() 	Searches a string for a match against a regular expression, and returns the matchesreplace() 	Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replacedsearch() 	Searches a string for a specified value, or regular expression, and returns the position of the matchslice() 	Extracts a part of a string and returns a new stringsplit() 	Splits a string into an array of substringssubstr() 	Extracts the characters from a string, beginning at a specified start position, and through the specified number of charactersubstring() 	Extracts the characters from a string, between two specified indicestoLocaleLowerCase() 	Converts a string to lowercase letters, according to the host's localetoLocaleUpperCase() 	Converts a string to uppercase letters, according to the host's localetoLowerCase() 	Converts a string to lowercase letterstoString() 	Returns the value of a String objecttoUpperCase() 	Converts a string to uppercase letterstrim() 	Removes whitespace from both ends of a stringvalueOf() 	Returns the primitive value of a String objectString HTML Wrapper MethodsThe HTML wrapper methods return the string wrapped inside the appropriate HTML tag.These are not standard methods, and may not work as expected in all browsers.Method 	Descriptionanchor() 	Creates an anchorbig() 	Displays a string using a big fontblink() 	Displays a blinking stringbold() 	Displays a string in boldfixed() 	Displays a string using a fixed-pitch fontfontcolor() 	Displays a string using a specified colorfontsize() 	Displays a string using a specified sizeitalics() 	Displays a string in italiclink() 	Displays a string as a hyperlinksmall() 	Displays a string using a small fontstrike() 	Displays a string with a strikethroughsub() 	Displays a string as subscript textsup() 	Displays a string as superscript text