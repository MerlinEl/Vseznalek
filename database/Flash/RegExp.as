//replace all commasvar pattern:RegExp = /"/g;ftext = ftext.replace(pattern, "$");var thin_space:String = " ";// replace all thin spaces with nothingvar re:RegExp = new RegExp(thin_space, "g"); return num_str.replace( re , ""); //thin space//orreturn num_str.replace( / /g , ""); //orreturn num_str.split(thin_space).join(""); @"[ěščřžýáíéóúůďťňĎŇŤŠČŘŽÝÁÍÉÚŮa-zA-z]{1,20}"//var regex:RegExp = /#[\w\-]+?(?= #|$)/g//var regex:RegExp = /#[^#]+?(?= #|$)/g//var regex:RegExp = /\W/;//var regex:RegExp = /[^\w-]/;//var regex:RegExp = /\s+/;@"[ěščřžýáíéóúůďťňĎŇŤŠČŘŽÝÁÍÉÚŮa-zA-z]{1,20}"//var regex:RegExp = /#[\w\-]+?(?= #|$)/g//var regex:RegExp = /#[^#]+?(?= #|$)/g//var regex:RegExp = /\W/;//var regex:RegExp = /[^\w-]/;//var regex:RegExp = /\s+/;var spec_char_filter :RegExp = new RegExp ( "[^\\p{A-Z}\\p{a-z}]" , "gi" ); //define allowed characters (remain only words) http://www.regexp.cz/var lineWords:Array = raw.split(spec_char_filter);trace("splited line:", lineWords)var spec_char_filter :RegExp = new RegExp ( "[^\\p{A-Za-z}]" , "gi" )var spec_char_filter :RegExp = new RegExp ( "[^\\p{a-zA-ZáčďéěíňóřšťůúýžÁČĎÉĚÍŇÓŘŠŤŮÚÝŽ}]" , "gi" ); 