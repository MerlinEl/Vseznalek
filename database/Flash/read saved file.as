		//Hardcore read functions lol:D		public static function get_old(console, path:String, val:String):String{					cons=console;			if (val.length == 0) return "";			var out_str:String = ""						//remove temp file if exists			if (reg_file.exists) reg_file.deleteFile();			//start timer			DelayTimer.stop();			DelayTimer.removeEventListener(TimerEvent.TIMER, delay);			DelayTimer.addEventListener(TimerEvent.TIMER, delay);			DelayTimer.start();			registryCMD('reg export '+path+' '+reg_file.nativePath);						function delay(e:TimerEvent):void{						var second = DelayTimer.currentCount % 60;				cons.appendText("\nwaiting for file writing:"+second);				if (second >= 3){ //time up									DelayTimer.stop();					DelayTimer.removeEventListener(TimerEvent.TIMER, delay);				} else if (reg_file.exists){									DelayTimer.stop();					DelayTimer.removeEventListener(TimerEvent.TIMER, delay);					var reg_data:String = readFile(reg_file);					reg_data = removeLineBreaks(reg_data);					//trace("\nreg_data:\n"+reg_data,"\n");					out_str = getData(reg_data, val);					cons.appendText("\nrecive for file data:"+out_str);					if (reg_file.exists) reg_file.deleteFile();				}			};			function readFile(file:File):String{							var fileStream:FileStream = new FileStream(); // Create our file stream				fileStream.open(file, FileMode.READ);				var utf16:ByteArray = new ByteArray();							utf16.endian = Endian.LITTLE_ENDIAN;				fileStream.readBytes(utf16);				var fileContents:String = encode(utf16);								fileStream.close(); // Clean up and close the file stream				return fileContents;			};			function removeLineBreaks(s:String):String { 							return s.split("\r").join("\n");			};			function getData(str:String, val:String):String { 							var data:String;				var pos:int = str.indexOf(val);				if (pos != -1){					var start:int = str.indexOf("=", pos)+2;					var end:int = str.indexOf('"', start);					data = str.substring(start, end); 				}				trace("\n",val+":"+data); //trace(pos, start, end)				return data;			};			function encode(ba:ByteArray):String { //var str:String = encode(ba);							var origPos:uint = ba.position;				var result:Array = new Array();				for (ba.position = 0; ba.position < ba.length - 1; )					result.push(ba.readShort());				if (ba.position != ba.length)					result.push(ba.readByte() << 8);				ba.position = origPos;				return String.fromCharCode.apply(null, result);			};			cons.appendText("\nreturn data:"+out_str);			return out_str;		};