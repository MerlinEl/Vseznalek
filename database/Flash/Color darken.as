	var rgb:Number = 0x336699;var hls:Object = ColorUtils.RGBtoHLS(rgb);var darkL:Number  = Math.max(hls.l - 0.2,0);var lightL:Number  = Math.min(hls.l + 0.2,1);var dark:Number = ColorUtils.HLStoRGB(hls.h,darkL,hls.s);var light:Number = ColorUtils.HLStoRGB(hls.h,lightL,hls.s);var origBmd:BitmapData   = new BitmapData(40,40,false,rgb);var darkerBmd:BitmapData = new BitmapData(40,40,false,dark);var lighterBmd:BitmapData = new BitmapData(40,40,false,light);var origBm:Bitmap = new Bitmap(origBmd);var darkerBm:Bitmap = new Bitmap(darkerBmd);var lighterBm:Bitmap = new Bitmap(lighterBmd);darkerBm.y  = 0;origBm.y  = 50;lighterBm.y = 100;addChild(origBm);addChild(darkerBm);addChild(lighterBm);	//this function assists with creating colors for the gradients.		private function darkenColor(c:uint, factor:Number):uint {			var r:Number = (c >> 16);			var g:Number = (c >> 8) & 0xFF;			var b:Number = c & 0xFF;						var newRed:Number = Math.min(255, r*factor);			var newGreen:Number = Math.min(255, g*factor);			var newBlue:Number = Math.min(255, b*factor);						return (newRed << 16) | (newGreen << 8) | (newBlue);		}darkenColor(0xA24F31,0.5)		private function initColors(color:uint):void {						card_skin["border"] = scaleColor(color, 0.2);			card_skin["title_bg"] = scaleColor(color, 0.8);			card_skin["title_text"] = scaleColor(color, 1);			card_skin["label_bg"] = color;			card_skin["label_text"] = scaleColor(color, -1);		}						/**		 * Scales r-g-b channels by 'scale' factor, having the r-g-b proportions saved		 * @param	color:uint		color to be scaled (i.e. lighten or darken)		 * @param	scale:Number	the scale factor (values -1 to 1) -1 = absolute dark; 1 = absolute light;		 * @return	uint			scaled color		 */		private function scaleColor(color:uint, scale:Number):uint        {            var r:int = (color & 0xFF0000) >> 16;            var g:int = (color & 0x00FF00) >> 8;            var b:int = color & 0x0000FF;            r += (255 * scale)*(r/(r+g+b)); r = (r > 255) ? 255 : r; r = (r < 0) ? 0 : r;            g += (255 * scale)*(g/(r+g+b)); g = (g > 255) ? 255 : g; g = (g < 0) ? 0 : g;            b += (255 * scale)*(b/(r+g+b)); b = (b > 255) ? 255 : b; b = (b < 0) ? 0 : b;            return (r << 16 & 0xff0000) + (g << 8 & 0x00ff00) + (b & 0x0000ff);        }