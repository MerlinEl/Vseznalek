package windows{	import flash.desktop.NativeProcess;	import flash.desktop.NativeProcessStartupInfo;	import flash.events.NativeProcessExitEvent;	import flash.events.ProgressEvent;	import flash.filesystem.File;	import flash.utils.clearTimeout;	import flash.utils.setTimeout;	import mx.controls.Alert;	public class WinCmd	{		/** čľ“ĺ…Ąćµ�ĺ­—ç¬¦ */		public var charSetInput:String="gb2312";		/** čľ“ĺ‡şćµ�ĺ­—ç¬¦ */		public var charSetOutput:String="gb2312";		public var onWaitingOpen:Function;		public var onWaitingClose:Function;		/** ĺ˝“ĺ‰ŤćŽĄć”¶ćťˇć•°onWaitingCount(count:int) */		public var onWaitingCount:Function;		/** ćŽĄć”¶ĺŽźĺ§‹ć•°ćŤ®onOutData(data:String) */		public var onOutData:Function;		//ćś¬ćśşčż›ç¨‹		private var process:NativeProcess;		//cmdç›¸ĺ…ł		private var outIndex:int;		private var outCount:int;		private var runTagCmd:String=null;		private var runTagFunclist:Object={};		private var runTagDelaylist:Object={};		private var runTagDatalist:Object={};		private var timeOutIndex:int=0;		public function WinCmd():void		{			trace("################################################");			trace("ć¬˘čżŽä˝żç”¨NativeProcessćś¬ćśşčż›ç¨‹Windows CMDĺ°�čŁ…ç±»ă€‚");			trace("ä˝żç”¨initNativeProcess(cmd.exe)ć–ąćł•ĺ�ťĺ§‹ĺŚ–CMDčż›ç¨‹ă€‚");			trace("################################################");		}		public function initNativeProcess(cmdExePath:String="c:\\windows\\system32\\cmd.exe", complete:Function=null):void		{			if (NativeProcess.isSupported == false)			{				Alert.show("ĺ˝“ĺ‰ŤçŽŻĺ˘�ä¸Ťć”ŻćŚ�Windows CMDćś¬ćśşčż›ç¨‹!\nčŻ·ĺ°ťčŻ•ĺ°†éˇąç›®app.xmläż®ć”ąä¸şä»Ąä¸‹äżˇć�Ż\n<supportedProfiles>extendedDesktop desktop</supportedProfiles>", "ćŹ�ç¤şäżˇć�Ż\t\t\t\t\t\t\t\t\t\t\t");				return;			}			var cmdexefile:File=new File(cmdExePath);			if (cmdexefile.exists == false)			{				Alert.show("ćś¬ćśşä˝Ťç˝®ä¸Ťĺ­�ĺś¨ďĽ�\n" + cmdExePath);				return;			}			var info:NativeProcessStartupInfo=new NativeProcessStartupInfo(); //ĺ�ŻĺŠ¨ĺŹ‚ć•°			info.executable=cmdexefile;			var processArg:Vector.<String>=new Vector.<String>();			//processArg[0]=""; 			//processArg[1]="";			info.arguments=processArg;			process=new NativeProcess();			process.addEventListener(NativeProcessExitEvent.EXIT, packageOverHandler);			process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onError);			process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, outputHandler);			process.start(info);			if (complete != null)			{				complete();			}		}		protected function packageOverHandler(event:NativeProcessExitEvent):void		{		}		protected function onError(event:ProgressEvent):void		{			var pro:NativeProcess=event.target as NativeProcess;			var data:String=pro.standardOutput.readMultiByte(pro.standardOutput.bytesAvailable, charSetOutput);		}		protected function outputHandler(event:ProgressEvent):void		{			var pro:NativeProcess=event.target as NativeProcess;			var data:String=pro.standardOutput.readMultiByte(pro.standardOutput.bytesAvailable, charSetOutput);			//čľ“ĺ‡şĺŽźĺ§‹			if (onOutData != null)			{				onOutData(data);			}			//ĺŻ»ć‰ľĺ‘˝ä»¤			for (var cmd:String in runTagFunclist)			{				if (data.indexOf(cmd) != -1)				{					var callback:Function=runTagFunclist[cmd] as Function;					if (callback != null && runTagCmd != cmd)					{						runTagCmd=cmd;						runTagDatalist[cmd]="";						openWaitingWindow();						outCount=0;						trace("WINCMD==>[â�š]", cmd);					}					else					{						trace("WINCMD==>[Ă—]", cmd);						deleteCmd(cmd);					}					//ĺ‘˝ä»¤čˇŚä¸Ťĺ¤„ç�†					return;				}			}			//ĺ¦‚ćžśä¸Ťć�Żĺ‘˝ä»¤é‚Łĺ°±ć�Żç»“ćžś			data=data.replace(/^[A-Z]:\\.*\>$/mg, "");			if (runTagCmd)			{				callback=runTagFunclist[runTagCmd] as Function;				if (callback != null)				{					runTagDatalist[runTagCmd]+=data;					onWaitingCountMessage(outCount); //ć”¶ĺ�°ćťˇć•°					outCount++;					//trace("---->", outCount);					//ç­‰ĺľ…ä¸‹ä¸€ćťˇć—¶é—´					var delay:int=int(runTagDelaylist[runTagCmd]);					if (delay < 100)					{						delay=100;					}					//č¶…ć—¶ĺ¤„ç�†					clearTimeout(timeOutIndex);					timeOutIndex=setTimeout(function():void					{						deleteCmd(runTagCmd);						runTagCmd=null;						closeWaitingWindow();						Alert.show("ć•°ćŤ®čŻ·ć±‚č¶…ć—¶ć�–ćśŤĺŠˇć— ĺ“Ťĺş”ďĽ�", "ćŹ�ç¤şäżˇć�Ż");					}, delay + 2000);					//ć‹‰ĺŹ–ć•°ćŤ®					clearTimeout(outIndex);					outIndex=setTimeout(function():void					{						clearTimeout(timeOutIndex);						var outdata:String=runTagDatalist[runTagCmd];						callback(runTagCmd, outdata);						deleteCmd(runTagCmd);						runTagCmd=null;						closeWaitingWindow();					}, delay);				}			}		}		/**		 * ć‰§čˇŚcmdĺ‘˝ä»¤		 * @param cmd    ć ‡ĺ‡†CMDĺ‘˝ä»¤		 * @param func   ĺ›žč°�ĺ“Ťĺş”ć–ąćł•		 * @param delay  ćŽĄć”¶čľ“ĺ‡şć•°ćŤ®ç­‰ĺľ…ć—¶é—´		 *		 */		public function runCmd(cmd:String, func:Function=null, delay:int=200):void		{			runTagFunclist[cmd]=func;			runTagDatalist[cmd]="";			runTagDelaylist[cmd]=delay;			process.standardInput.writeMultiByte(cmd + "\n", charSetInput);		}		private function deleteCmd(cmd:String):void		{			delete runTagFunclist[cmd];			delete runTagDatalist[cmd];			delete runTagDelaylist[cmd];		}		private function openWaitingWindow():void		{			if (onWaitingOpen != null)			{				onWaitingOpen();			}		}		private function onWaitingCountMessage(count:int):void		{			if (onWaitingCount != null)			{				onWaitingCount(count);			}		}		private function closeWaitingWindow():void		{			if (onWaitingClose != null)			{				onWaitingClose();			}		}	}}