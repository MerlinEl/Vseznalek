  /*----------------------------------------------------------------------*/ /*                                VARIABLES                             *//*----------------------------------------------------------------------*///zadanim vice stejnych hodnot do seznamu zvysujes sanci na jejich vybranivar max_result_len = 20; //maximální součet cifer v jednom polivar min_result_len = 4; //minimální součet cifer v jednom polivar examples = 6; //počet vygenerovaných příkladůvar values = [ "20", "10", "10", "5", "5", "2", "1"];var min_field_len = 2; //minimální velikost polevar max_field_len = 6; //maximální velikost pole  /*----------------------------------------------------------------------*/ /*                                EXECUTE                               *//*----------------------------------------------------------------------*/var res = combineByOrder(values, examples, min_field_len, max_field_len)trace("Results:\n"+res.join("\n"));  /*----------------------------------------------------------------------*/ /*                                FUNCTIONS                             *//*----------------------------------------------------------------------*///funkce generujici jednu nahodnou posloupnost:function combine(values:Array, max:int):String{	var res_arr = []	var pos = 0;	for (var idx:int = 0; idx < max; ++idx){		//random další pozice v řadě hodnot 		pos = randomRange(pos, values.length-1);		//přeskočí hodnoty o velikosti větší než pole(values)		if (pos >= values.length) continue; 		res_arr[idx] = values[pos];	}	//return array as string	return String(res_arr); };//fungce přidává do pole random vygenerované sestavyfunction combineByOrder(values:Array, min:int, max:int, len:int):Array{		var res_arr = new Array();	for (var idx:int = 0; idx < len; ++idx){			var res_str:String;		do{			//náhodně vybere hodnoty z pole(values) a vytvoří string array o velikosti mezi hodnitami min-max 			res_str = combine(values, randomRange(min, max));		}		// generovani se opakuje, dokud se nenajde unikatni kombinace 		// výsledné pole se také zkontroluje jestli vyhovuje požadavkům učitele		// pokud příjde true volá se rekurzivně DO, jinak se pole přidá k ostatním 		while ( conditions(res_arr, res_str) ); 		res_arr.push(res_str);		//trace("res_str:"+res_str);	}	return res_arr;};function conditions(arr:Array, str:String):Boolean{ 		var errors:int = 0;	if (arr.indexOf(str) != -1) errors++; //když najde duplicitní sestavu	var sum = getSum(str.split(","));	if (sum > max_result_len) errors++; //když je součet pole větší	if (sum < min_result_len) errors++; //když je součet pole menší	//vrátí true, když není některá podmínka splněná	return errors > 0;}function getSum(arr:Array):Number{	var sum:Number = 0;	for each (var i in arr) sum += Number(i);	return sum;};function randomRange(min:Number, max:Number):Number{	return (Math.floor(Math.random() * (max - min + 1)) + min);};