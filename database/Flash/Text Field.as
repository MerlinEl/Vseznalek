    titulo.autoSize = "left";    titulo.text = "THE TITLE OF WHAT IM DOING";    var txt_holder:Sprite = new Sprite();    txt_holder.addChild(titulo);    stage.addChild(txt_holder);    stage.addEventListener(Event.RESIZE, onStageResize);function onStageResize(e:Event):void {   txt_holder.width = stage.stageWidth * 0.8; // 80% width relative to stage   txt_holder.scaleY = txt_holder.scaleX; // To keep aspectratio   txt_holder.x = stage.stageWidth / 2;   txt_holder.y = 10;   }var s:StyleSheet = new StyleSheet();s.setStyle("spaced", {letterSpacing:30});t.styleSheet = s;var tf:TextFormat = t.getTextFormat();t.defaultTextFormat = tf;t.htmlText = "Bob Loblaw";c.text_field_temp.setTextFormat(c.text_field..getTextFormat());//AS3 TextField autoscroll to the bottomSCENE["console"].scrollV = SCENE["console"].maxScrollV;//disable inputtf.selectable = false;tf.type = TextFieldType.DYNAMIC;//enable inputtf.selectable = true;tf.type = TextFieldType.INPUT;import flash.events.TextEvent;import flash.text.TextField;//select all texttextBox.setSelection(0, textBox.text.length);		private function selectLineAtCatet():Object{			var pos:Number = textBox.caretIndex;			var line_index:Number = textBox.getLineIndexOfChar(pos);			var line_text:String = textBox.getLineText(line_index);			var line_start:Number = textBox.getLineOffset(line_index);			var line_end:Number = line_start+line_text.length			textBox.setSelection(line_start, line_end);			trace("select line:" + line_index+" text:"+line_text+" start:"+line_start+" end:"+line_end);			return {"start":line_start, "end":line_end};		};		private function selectLineAtCatet():Object{			var line_index:Number = msg.numLines - 1;			var line_text:String = msg.getLineText(line_index);			var line_start:Number = msg.getLineOffset(line_index);			var line_end:Number = line_start+line_text.length			msg.setSelection(line_start, line_end);			trace("select line:" + line_index+" text:"+line_text+" start:"+line_start+" end:"+line_end);			return {"start":line_start, "end":line_end};		};			var cmd:String = cmd_history_list[cmd_history_index]			var offset:Object = selectLineAtCatet();			msg.replaceText(offset.start, offset.end, cmd);var outputTxt:TextArea = new TextArea();addChild(outputTxt);outputTxt.editable = false;outputTxt.appendText("BLAH BLAH BLAH\n");outputTxt.appendText("BLAH BLAH\n");outputTxt.appendText("BLAH");outputTxt.validateNow();var outputTextField:TextField = outputTxt.textField;var outputTextFieldLength:uint = outputTextField.length;var outputTextFieldLines:uint = outputTextField.numLines;var outputTextFieldLastLineLength:uint = outputTextField.getLineLength(outputTextField.numLines - 1);var startIndex:uint = outputTextFieldLength - outputTextFieldLastLineLength;var endIndex:uint = outputTextFieldLength;outputTxt.setFocus();outputTxt.setSelection(startIndex, endIndex);outputTextField.replaceSelectedText("dummy");	var line_index:Number = textBox.getLineIndexOfChar(textBox.caretIndex);	var line_text:String = textBox.getLineText(line_index);	trace("clicked line:" + line_index+" text:"+line_text);function clickHandler(event:MouseEvent):void {    trace(myTF.getLineText(0));}function clickHandler(e:MouseEvent):void {    var index:int = myTF.getLineIndexAtPoint(e.localX, e.localY);    var s:String = myTF.getLineText(index);    trace("button pressed: " + s);}  function clickHandler(event:MouseEvent):void {    var selectedLine    selectedLine = myTF.getLineIndexOfChar(myTF.caretIndex);    trace(myTF.getLineText(selectedLine));}User wants text-size. I believe the answer is:textfield.getTextFormat().size//current write postext_box.caretIndex //trace text value before the change is appliedtext_box.addEventListener(TextEvent.TEXT_INPUT, undoHandler);public static function undoHandler(e:TextEvent):void{ var text_field = etrace("text-field:", text_field )}//highlight textimport flash.text.TextFormat;var tf:TextFormat = new TextFormat();tf.color = 0xFF0000;i_serial.setTextFormat(tf, 0, i_serial.text.length);//select texti_serial.setSelection(0, i_serial.text.length);stage.focus = i_serial;import flash.text.TextFieldType;import flash.text.TextField;//import flash.text.TextFieldAutoSize;var tf = bubble_text.bubble_text//tf.autoSize = TextFieldAutoSize.CENTER;//tf.wordWrap = true;//tf.type = TextFieldType.INPUT;tf.text = "Co to píše za novinky. Jsou to zalomené řádky?"tf.y = (-1 * tf.textHeight) / 2; //vertical align//centralizeV(tf)function centralizeV(TT:TextField) {    var TL:Number;    if (TT.numLines > 1) TL = TT.textHeight / (TT.numLines - 1)    else TL = TT.textHeight;    var deltaL:int = int((TT.height - TT.textHeight) / 2 / TL);    for (var k:int = 0; k < deltaL; k++) {        TT.text = "\n" + TT.text;    }}		private function formatText(text_field):void{ //font setup			var form:TextFormat = new TextFormat();			with (form) {				//font = "Times New Roman";				font = "Palatino Linotype";				size = 20;				color = 0x000000;				bold = true;				align = "left";				letterSpacing = 0.6;			}			text_field.setTextFormat(form);		};/* http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/text/TextFormat.htmlalign = "left"blockIndent = 0bold = falsebullet = falsecolor = 0x000000font = "Times New Roman" (default font is Times on Mac OS X)indent = 0italic = falsekerning = falseleading = 0leftMargin = 0letterSpacing = 0rightMargin = 0size = 12tabStops = [] (empty array)target = "" (empty string)underline = falseurl = "" (empty string)*/stage.focus = textField;textField.setSelection(textField.text.length,textField.text.length); //place caret at end of textimport flash.events.KeyboardEvent;txt_msg.addEventListener(KeyboardEvent.KEY_DOWN, keyboardReturnHandler);//,truefunction keyboardReturnHandler(e:KeyboardEvent):void {		//if they pressed the enter key	if (e.keyCode == Keyboard.ENTER) {				stage.focus = null;	} }// or//handle enterimport fl.events.ComponentEventmyListeningField.addEventListener(ComponentEvent.ENTER, listenerMethod);function listenerMethod(e:Event):void{    //DO SOME STUFF}      var bitmap:Bitmap = ((e.target as LoaderInfo).content as Bitmap);            var container:TextFieldContainer = new TextFieldContainer();            container.textField.autoSize = TextFieldAutoSize.LEFT;            container.textField.defaultTextFormat = new TextFormat(null, null, 0xFF0000);            container.textField.type = TextFieldType.INPUT;            container.textField.multiline = true;            container.setBackground(bitmap);            addChild(container);//exceptNumbers.restrict = "^0-9"; onlyCapitals.restrict="A-Z" ; onlyNumbers.restrict="0-9";import flash.text.TextField;import flash.text.StyleSheet;addPageTitle();		private function addPageTitle(){						var txt:TextField = new TextField();			// Defining properties for the text field			txt.width = 180;			txt.height = 100;			txt.wordWrap = true;			txt.multiline = true;			// store CSS styles in a String variable			var css_st:String = ".bv{color:#0808fe; font-family:Arial; font-size:16px; font-weight:bold;} .adf{color:#ed0708; font-family:Verdana; font-size:13px; font-style:italic}";			// Defines the instance for the "StyleSheet" object			var styles:StyleSheet = new StyleSheet();			// Applies the "parseCSS" method to the variable with the CSS styles			styles.parseCSS(css_st);			// uses the "styleSheet" property to attach the CSS styles to the "txt" instance			txt.styleSheet = styles;			// Adds HTML formated text			txt.htmlText = '<span class="bv">Welcome</span><br><font size="12" color="#00a800">to <u><a href="http://coursesweb.net">coursesweb.net</a></u></font><br><span class="adf">ActionScript course</span>.';			// add the text in the Flash presentation			addChild(txt);		};		// Create a TextFormat instancevar textF:TextFormat = new TextFormat();// sets properties to format the texttextF.leftMargin = 55;         // the left margin of the paragraph, in pixelstextF.font = "Arial";          // Defines the font usedtextF.color = 0x5678fe;        // ColortextF.size = 17;               // Text size (in pixels)// Initialize a "TextField" instance in a "txt" variablevar txt:TextField = new TextField();// Defining properties for the text fieldtxt.width = 240;txt.wordWrap = true;txt.multiline = true;txt.text = "Text with TextFormat \nActionScript 3 Course";    // Adds the Text// Apply "setTextFormat()" to the text field , with the "textFormat" instance as argumenttxt.setTextFormat(textF);// add the text in the Flash presentationaddChild(txt)//insert mc at charmyTitle.text = "The ____ jumped over the ____ with a ____ in the ____";var index:int = -1; while(true) {    index = myTitle.text.indexOf("____", index + 1);    if(index == -1) {        break;    }     var startRect:Rectangle = myTitle.getCharBoundaries(index);    var endRect:Rectangle = myTitle.getCharBoundaries(index + 3);     var hTarg:hTClip  = new hTClip();    addChild(hTarg);     // I'm not sure if the rect is relative to the TextField or its parent.. try, maybe you don't need myTitle.x / myTitle.y    hTarg.x = myTitle.x + startRect.x;    hTarg.y = myTitle.y + startRect.y;    hTarg.width = endRect.right - startRect.left;    hTarg.height = startRect.height;}You can add input text fields to your Flash movie in order to allow text-based interaction from your users. An input text field is one that accepts information from the users of your Flash movie. The user simply needs to select the text field and type inside it in order to place information. This is in contrast to a dynamic text field which will only display information, and will not allow the user to alter that information. An input text field can be created using the TextField class as well. You will simply need to set the type to "input". In this article, we're going to learn how to work with input text fields in ActionScript 3. We'll learn how to create them using code, how to set some of the properties, how to set the focus to an input text field, and how to set restrictions to which characters a user can type in them.Let's begin.Open a new Flash ActionScript 3 document. Select the first frame and then launch the Actions Panel. In the Script Pane, type in the following code:var inputField:TextField = new TextField();addChild(inputField);inputField.border = true;inputField.width = 200;inputField.height = 150;inputField.x = 75;inputField.y = 50;Here, we've created a new instance of the AS3 TextField class, and we've given it an instance name of inputField. We've set some of the text field's properties as well, such as the width, height, border, etc... By default, an instance of the TextField class is of the dynamic type. So if you test the movie now, you won't be able to type inside it. In order to make this instance an AS3 input text field, use the type property of the TextField class, and give it a value of "input" (the value must be specified as a string, i.e it should be in quotation marks).var inputField:TextField = new TextField();addChild(inputField);inputField.border = true;inputField.width = 200;inputField.height = 150;inputField.x = 75;inputField.y = 50;inputField.type = "input";So now that we've set the type to "input", let's go ahead and test the movie. Then click inside the text field and start typing. You should see that the text field will accept your input.NOTE: After the test movie launches, go to the Control menu and make sure that Disable Keyboard Shortcuts is checked. This is not really a requirement, but whenever you'd like to test the text fields inside your Flash movie, there are some cases where enabled keyboard shortcuts will interfere with your keystrokes. So it's a good idea to disable keyboard shortcuts when you're testing the ActionScript enabled text fields in your Flash movie.Continue typing inside the input text field and then try pressing the enter or return key on your keyboard in order to move down to the next line. If you find that you are unable to move down to the next line, then you can set the multiline property of the text field to true. If it is set to false, then the text inside your text field will remain in one line regardless of the text field's height and regardless of how many times you press enter or return.var inputField:TextField = new TextField();addChild(inputField);inputField.border = true;inputField.width = 200;inputField.height = 150;inputField.x = 75;inputField.y = 50;inputField.type = "input";inputField.multiline = true;Now, if you test the movie again, you should see that hitting the enter or return key on your keyboard will let you move down to the next line within your text field.Moving the Focus to an AS3 Input TextFieldYou might have noticed that every time you test the movie, you will need to click inside the text field first in order to be able to type inside it. This happens because the focus must be on the input text field first, before it accepts user input. Focus refers to the object on the stage that is currently active. The focus usually moves to a certain object when you mouse over or click on it. So the focus will not automatically go to the input text field just because it's on the stage. If you'd like the focus to move to the input text field right away, then can use the focus property of the stage and set it to the input text field like so:var inputField:TextField = new TextField();addChild(inputField);inputField.border = true;inputField.width = 200;inputField.height = 150;inputField.x = 75;inputField.y = 50;inputField.type = "input";inputField.multiline = true;stage.focus = inputField;So now when you test the movie, the focus will quickly move to the input text field, enabling you to type inside it immediately, without having to click inside it first.REMINDER: Make sure that keyboard shortcuts are disabled.NOTE: In some cases, even if you have keyboard shortcuts disabled, testing input text fields within the Flash test movie environment can still get buggy. Personally, what I do is I make sure that the Flash movie is saved, then I test the movie in order to generate a SWF file in the same folder where the FLA file is saved. Then I would close the test movie, and then go to the folder that contains the SWF file. I would then open that SWF file and test my input text field(s) there.Restricting Character Input in AS3In some cases, you might want to make sure that there are some restrictions as to which characters as well as the number of characters that a user can type inside an input text field. For example, you can create an input text field that will only accept numerical characters, and will only allow a maximum of 5 characters to be type inside it. If you want to limit the number of characters that a user can type inside a given input text field, then you can use the maxChars property of the TextField class. For example:inputField.maxChars = 10;This will limit the number of allowable characters that the user can type inside the input text field to a maximum of 10 characters.NOTE: In the multiline input text field in our example, each time you hit enter or return on the keyboard while the text field is in focus will count as one character subtracted from the character limit. So with a maxChars value of 10, if you hit enter or return in the multiline input text field 2 times before you type in the other characters, then you'll only be able to type in only 8 more.If you want to put restrictions as to which characters a user can type inside an input text field, then you can use the restrict property of the TextField class. Here's an example:inputField.restrict = "abcd";In this example, only the lower case characters a, b, c, and d are ALLOWED. Any other character will not appear in the input text field if the user tries to type them in.If you want to allow the uppercase characters A, B, C and D, then you'll need to add them to the set like so:inputField.restrict = "ABCDabcd";There is no need to add a space between the uppercase letters and the lowercase letters. If you add in a space anywhere in this set of characters, Flash is going to think that you want to allow spaces to be typed inside the input text field. But if you actually want spaces to be allowed, then you can add a space anywhere within the set of characters.You can also specify a range of characters like so:inputField.restrict = "A-Z";In this example, all uppercase character from A to Z are allowed.In this other example, uppercase A to Z, lowercase a to z, and numerical characters 0 to 9 are allowed:inputField.restrict = "A-Za-z0-9";What if I would like to specify characters that should NOT be allowed?If you want to specify characters that should NOT be allowed, then you start off with a caret (^). For example:inputField.restrict = "^abcd";This allows all other characters except for lowercase a, b, c, and d.In this example, all characters are allowed except for lowercase a to z:inputField.restrict = "^a-z";In this example, all characters are allowed except for lowercase a to f, uppercase A to F and numerical characters 3 to 7:inputField.restrict = "^a-fA-F3-7";And those are some of the basics on how you can work with AS3 input text fields. 