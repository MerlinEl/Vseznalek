var fpath:String = this.stage.loaderInfo.url;var fname:String = fpath.split("/").pop().split(".")[0];var doMain:String = this.stage.loaderInfo.url;var doMainArray:Array = doMain.split("/");if (doMainArray[0] == "file:") {trace("Local debug mode.");}else{trace("Web host mode");} //air relative pathnew File(File.applicationDirectory.nativePath).resolvePath(”./../src/test/SomeFile.txt”);//parentvar appPath:File = File.applicationDirectory.resolvePath("");var fromUser:File = File.userDirectory.resolvePath(appPath.nativePath);localPath = fromUser.parent.parent.parent;import flash.external.ExternalInterface;//Method 1var urlPath = ExternalInterface.call("window.location.href.toString");//Method 2var urlPath = loaderInfo.url;import flash.external.ExternalInterface;var full:String = ExternalInterface.call("window.location.href.toString");  var myUrl:String = unescape(LoaderInfo(this.root.loaderInfo).url);    trace("myUrl: "+myUrl);//convert to valid URIuri = encodeURIComponent(myFile);FLfile.platformPathToURI()FLfile.uriToPlatformPath()document.pathURIvar dir = document.path.replace(/[\/\\][^\/\\]+$/, '');var fileName = document.name.replace(/\.[^\.]+$/, '');var exportDir = FLfile.platformPathToURI(dir +'/../../app/data/scenes');FLfile.createFolder(exportDir);FLfile.write(exportDir +'/'+sceneName+'.js', 'ec && ec.loadScene('+output+');');var t = fl.getDocumentDOM().pathURI;var folderPath = t.substr(0, t.lastIndexOf('/'));function browseFolder() { 	var folderURL = fl.browseForFolderURL(); 	if(folderURL != null) 	{ 		fl.xmlui.set("folder", folderURL); 	} } /** * Converts a filename in a platform-specific format to a file:/// URI. * @param	path	A string, expressed in a platform-specific format, specifying the filename you want to convert. * @return			A string expressed as a file:/// URI.**/function platformPathToURI(path) {	if (isCS4()) {		return FLfile.platformPathToURI(path);	} else {		if (isMac()) {			path = path.replace(/ /g, "%20");			path = "file:///" + path;		} else {			path = path.replace(/:\\/, "|/");			path = path.replace(/\\/, "/");			path = escape(path);			path = "file:///" + path;		}		return path;	}}/** * Converts a filename expressed as a file:/// URI to a platform-specific format. * @param	uri		A string, expressed as a file:/// URI, specifying the filename you want to convert. * @return			A string representing a platform-specific path.**/function uriToPlatformPath(uri) {	if (isCS4()) {		return FLfile.uriToPlatformPath(uri);	} else {		if (isMac()) {			uri = uri.replace("file:///", "");			uri = uri.replace("%20", " ");		} else {			uri = unescape(uri);			uri = uri.replace(/file:\/\/\/([A-Z])|/, "$1:");			uri = uri.replace("file:///", "");			uri = uri.replace(/\//g, "\\");		}		return uri;	}}/** * Determines if the script is running on a Mac or not. * @return	A Boolean value of true if running on a Mac; false otherwise.**/function isMac() {	return (fl.version.search(/mac/i) > -1);}/** * Determines if the script is running in Flash CS4 or higher, or not. * @return	A Boolean value of true if running CS4 or higher; false if running CS3 or lower.**/function isCS4() {	var versionRE = /(\w+)\s+(\d+)(,\d+)+/;	var matches = versionRE.exec(fl.version);	var majorVersion = parseInt(matches[2]);	if (majorVersion >= 10) {		return true;	}	return false;}Possible error in the windows side of the uriToPlatformPath method:uri = uri.replace(/file:\/\/\/([A-Z])|/, “$1:”);may need to beuri = uri.replace(/file:\/\/\/([A-Z])|/, “$1″);That is,var uri = uri.replace(/file:\/\/\/([A-Z])\|/, “$1:”);instead ofvar uri = uri.replace(/file:\/\/\/([A-Z])|/, “$1:”);