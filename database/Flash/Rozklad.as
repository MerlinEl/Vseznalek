function decomposeInRange1(min_num:Number, max_num:Number):Array{	var i:Number;	var maths:Array = new Array();	for ( i=min_num; i<max_num; i++ ) { maths.push ( {"num_a":min_num, "num_b":i} ) };	for ( i=min_num+1; i<max_num; i++ ) { maths.push ( {"num_a":i, "num_b":min_num} ) };	for ( i=min_num+1; i<max_num-1; i++ ) { maths.push ( {"num_c":i, "num_d":max_num - i} ) };	return maths;};function decomposeInRange(min_num:Number, max_num:Number):Array{	var i:Number;	var maths:Array = new Array();	for ( i=min_num; i<max_num; i++ ) { 			maths.push ( {"num_a":min_num, "num_b":i} ); 		if (i>min_num) maths.push ( {"num_a":i, "num_b":min_num} );		if (i>min_num && i<max_num-1) maths.push ( {"num_c":i, "num_d":max_num - i} )	};	return maths;};Python.def rozklad_delenim(cislo):  horni_mez = int(math.sqrt(cislo))  prvocisla = eratosthenovo_sito(horni_mez)  rozklad = []  for prvocislo in prvocisla:    while cislo % prvocislo == 0:      rozklad.append(prvocislo)      cislo /= prvocislo  if cislo != 1:    rozklad.append(cislo)  return rozkladdef eratosthenovo_sito(do):  do += 1  sito = [True] * do   for i in range(2, do):    if sito[i]:      for j in range(i*2, do, i):        sito[j]=False   prvocisla=[]  for i in range(2, do):    if sito[i]:      prvocisla.append(i)  return prvocislaAS3function rozklad_delenim(cislo):Array{ var horni_mez = int(Math.sqrt(cislo)) var prvocisla = eratosthenovo_sito(horni_mez); var rozklad = new Array(); var try_limit = 80;  for each (var prvocislo in prvocisla){    	while (cislo % prvocislo == 0 && try_limit>0){      rozklad.push(prvocislo)      cislo /= prvocislo	}  	if (cislo != 1) rozklad.push(cislo)  }  return rozklad}function range(from:Number, to:*=null, by:*=null):Array{		var i:Number;	if (!to) {to = from; from = 0}	var nums:Array = new Array();	if (!by){		for (i=from; i<to; i++) nums.push(i);	} else {		for (i=from; i<to; i+=by) nums.push(i);	}	return nums;}function clone(o:*, cnt:Number):Array{		var output:Array = new Array();	for (var i=0; i<cnt; i++) output.push(o);	return output;};function eratosthenovo_sito(num):*{	  	num += 1	var i, j;	var sito:Array = clone(true, num);		for each ( i in range(2, num) ){			if (!sito[i]) continue;		for each ( j in range(i*2, num, i) ) {			sito[j]=false;		}  	}	  	var prvocisla= new Array();		for each ( i in range(2, num) ){		if (sito[i]) prvocisla.push(i)	}	return prvocisla;}trace("Rozklad:"+rozklad_delenim(128))//Metoda pocetCiferCisla vraci počet cifer čísla uvedeného v parametrufunction pocetCiferCisla(cislo:int):int{  var cifry:int  = 0;  //Dělí číslo 10 dokud není 0 a přičítá počet cifer za každé dělení  while (cislo > 0)  {     cislo /= 10;     cifry++;   }  return cifry;}trace(pocetCiferCisla(2889))//Metoda rozkladCislaNaCislice vrací pole jednotlivých číslic po rozkladu čísla v parametru//int rozkladoveCislo je číslo k rozkladu a pocetCifer se udává z důvodu velikosti polefunction rozkladCislaNaCislice(rozkladoveCislo:int, pocetCifer:int){	  var cislice:int = 0;  var poleCislic:Array = new Array();  //Dokud není rozkladové číslo 0 je jeho zbytek po dělení 10 (%) ukládán jako cislice do poleCislic  for (var i:int = 0; i<rozkladoveCislo; i++){	      cislice = rozkladoveCislo % 10;    rozkladoveCislo /= 10;    poleCislic[i] = cislice;   }//Číslice se do pole vkládají od konce je tedy dobré jej nakonci otočit metodou Array.Reverse()//Array.Reverse(poleCislic);   return poleCislic;}trace(rozkladCislaNaCislice(255, 15))