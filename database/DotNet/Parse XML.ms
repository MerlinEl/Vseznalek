_template_1 = (		"<?xml version='1.0' encoding='UTF-8'?>" +		"<bookstore>" +			"<book category='COOKING'>" +				"<title lang='en'>Everyday Italian</title>" +				"<author>Giada De Laurentiis</author>" +				"<year>2005</year>" +				"<price>30.00</price>" +			"</book>" +			"<book category='CHILDREN'>" +				"<title lang='en'>Harry Potter</title>" +				"<author>J K. Rowling</author>" +				"<year>2005</year>" +				"<price>29.99</price>" +			"</book>" +			"<book category='WEB'>" +				"<title lang='en'>XQuery Kick Start</title>" +				"<author>James McGovern</author>" +				"<author>Per Bothner</author>" +				"<author>Kurt Cagle</author>" +				"<author>James Linn</author>" +				"<author>Vaidyanathan Nagarajan</author>" +				"<year>2003</year>" +				"<price>49.99</price>" +			"</book>" +			"<book category='WEB'>" +				"<title lang='en'>Learning XML</title>" +				"<author>Erik T. Ray</author>" +				"<year>2003</year>" +				"<price>39.95</price>" +			"</book>" +			"<book genre='novel' ISBN='1-861001-57-5'>" +			"<title>Pride And Prejudice</title>" +			"</book>" +		"</bookstore>"	)		xmlDoc = dotNetObject "system.xml.xmlDocument"local sw = dotNetObject "System.IO.StringWriter"xmlDoc.LoadXml _template_1xmlDoc.Save(sw)sw.ToString()orpublic static string PrintXML(string xml){    string result = "";    MemoryStream mStream = new MemoryStream();    XmlTextWriter writer = new XmlTextWriter(mStream, Encoding.Unicode);    XmlDocument document = new XmlDocument();    try    {        // Load the XmlDocument with the XML.        document.LoadXml(xml);        writer.Formatting = Formatting.Indented;        // Write the XML into a formatting XmlTextWriter        document.WriteContentTo(writer);        writer.Flush();        mStream.Flush();        // Have to rewind the MemoryStream in order to read        // its contents.        mStream.Position = 0;        // Read MemoryStream contents into a StreamReader.        StreamReader sReader = new StreamReader(mStream);        // Extract the text from the StreamReader.        string formattedXml = sReader.ReadToEnd();        result = formattedXml;    }    catch (XmlException)    {        // Handle the exception    }    mStream.Close();    writer.Close();    return result;}string FormatXml(string xml){     try     {         XDocument doc = XDocument.Parse(xml);         return doc.ToString();     }     catch (Exception)     {         // Handle and throw if fatal exception here; don't just ignore them         return xml;     } }   static string PrettyXml(string xml){    var stringBuilder = new StringBuilder();    var element = XElement.Parse(xml);    var settings = new XmlWriterSettings();    settings.OmitXmlDeclaration = true;    settings.Indent = true;    settings.NewLineOnAttributes = true;    using (var xmlWriter = XmlWriter.Create(stringBuilder, settings))    {        element.Save(xmlWriter);    }    return stringBuilder.ToString();}