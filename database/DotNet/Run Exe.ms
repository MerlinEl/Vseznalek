 using System;using System.Management;// This sample demonstrates invoking // a WMI method using parameter objectspublic class InvokeMethod {        public static void Main()     {        // Get the object on which the method will be invoked        ManagementClass processClass =             new ManagementClass("Win32_Process");        // Get an input parameters object for this method        ManagementBaseObject inParams =            processClass.GetMethodParameters("Create");        // Fill in input parameter values        inParams["CommandLine"] = "calc.exe";        // Execute the method        ManagementBaseObject outParams =            processClass.InvokeMethod ("Create",            inParams, null);        // Display results        // Note: The return code of the method is        // provided in the "returnValue" property        // of the outParams object        Console.WriteLine(            "Creation of calculator process returned: "            + outParams["returnValue"]);        Console.WriteLine("Process ID: "             + outParams["processId"]);    }}dotnet.loadAssembly @"System.Management.dll" mc = dotNetObject "System.Management.ManagementClass" "Win32_Processor" moc = dotNetClass "System.Management.ManagementObjectCollection" moc = mc.GetInstances() enumerator = moc.GetEnumerator() while enumerator.MoveNext() do (	 mo = enumerator.current	 append CPUID ( mo.Properties.Item["ProcessorId"].value ) )processClass = dotNetObject "System.Management.ManagementClass" "Win32_Process"inParams = processClass.GetMethodParameters "Create"inParams.Item "CommandLine" = "calc.exe"inParams["a"] "CommandLine"inParams.ContainerinParams.ClassPathinParams.toString()processClass.InvokeMethod ("Create",inParams, null) --Run Windows Calc