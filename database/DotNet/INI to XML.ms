/**	*@Usage				INPUT: Actions.ini file		[Object]		Gallery_3D			= 221, Micra.fileInVersion 3DGallery,3D Gallery		Align				= 63, mcMax.alignObject(),Align		Align_By_2Edges		= 198,mcAction.objectAlignByTwoEdges(), Align By 2Edges		[Pivot]		Afect_Pivot_Only	= 51, mcAction.pivot_affect_only(), Afect Pivot Only		Align_To_Edge		= 134, mcAction.pivot_align_to_edge(), Pivot To Edge			...		OUTPUT: Actios.xml file		<Object>			<Gallery_3D icon="221" cmd="Micra.fileInVersion 3DGallery" tooltip="3D Gallery" />			<Align icon="63" cmd="mcMax.alignObject()" tooltip="Align" />			<Align_By_2Edges icon="198" cmd="mcAction.objectAlignByTwoEdges()" tooltip="Align By 2Edges" />		</Object>		<Pivot>			<Afect_Pivot_Only icon="51" cmd="mcAction.pivot_affect_only()" tooltip="Afect Pivot Only" />			<Align_To_Edge icon="134" cmd="mcAction.pivot_align_to_edge()" tooltip="Pivot To Edge" />		<Pivot>		...	*@Example		keys_pattern = #("icon", "cmd", "tooltip")		xml.addChildrenFromINI Micra.ActionsINI "Object" keys_pattern override:true		xml.toString()	*@Optional		maybe add xml_path where nodes will be aded-replaced	*/	fn addFromINI ini_file head keys_pattern override:false = (			if not loaded do (print "You must create root node first"; return false)		if override do (					--remove node if exists		)		local ini_keys = getIniSetting ini_file head		for key in ini_keys do (					local data = mcActionsEditor.getActionData head key			--format "key:% data:%\n" key (data.toString())			if superClassOf data != StructDef do continue			local attribs = #()			for attr in attr_keys do (							local val_str = data.get attr				val_str = trimLeft val_str --remove spaces at begin				val_str = trimRight val_str --remove spaces at end				attribs += #(mcXMLAttrib attr val_str)			)			--format "attribs:%\n" attribs			local node_path = "//"+root_node_name+"/" + head			addNode node_path key attr:attribs		)		true	),	/**	*@Usage		One way to Convert(serialize) ini file to xml file		ini file input:		//icon[1] , action[2] , Tooltip[3],		[Object]		Gallery_3D			= 221, Micra.fileInVersion 3DGallery,3D Gallery		Align				= 63, mcMax.alignObject(),Align		Align_By_2Edges    = 198,mcAction.objectAlignByTwoEdges(), Align By 2Edges		[Pivot]		Afect_Pivot_Only   = 51, mcAction.pivot_affect_only(), Afect Pivot Only		Align_To_Edge      = 134, mcAction.pivot_align_to_edge(), Pivot To Edge		...		xml file output:		<?xml version="1.0" encoding="utf-8"?>		<ACTIONS>			<Object>				<Gallery_3D icon="221" cmd="Micra.fileInVersion 3DGallery" tooltip="3D Gallery" />				<Align icon="63" cmd="mcMax.alignObject()" tooltip="Align" />				<Align_By_2Edges icon="198" cmd="mcAction.objectAlignByTwoEdges()" tooltip="Align By 2Edges" />			</Object>			<Pivot>				<Afect_Pivot_Only icon="51" cmd="mcAction.pivot_affect_only()" tooltip="Afect Pivot Only" />				<Align_To_Edge icon="134" cmd="mcAction.pivot_align_to_edge()" tooltip="Pivot To Edge" />			<Pivot>		...		</ACTIONS>	*@Example		--Write		xml = mcXML(Micra.RootDir + "Actions.xml") --set save location		attr_keys = #("icon", "cmd", "tooltip") --define attribute keys		xml.fromINI "ACTIONS" Micra.ActionsINI attr_keys override:true --convert ini to xml		xml.toString() --debug test output		xml.save() --save file to defined url location		--Read		xml = mcXML(Micra.RootDir + "Actions.xml") --load xml		mc_node = xml.getNode "//ACTIONS/Object/Detach_By_ID"		mc_node.getAttribute "icon"	*/	fn fromINI root_node_name ini_file attr_keys override:false = (			if url == undefined do (print "Url is not defined"; return false)		if override and doesFileExist url do deleteFile url		addRootNode root_node_name		local ini_heads = getIniSetting ini_file		for head in ini_heads do (					local ini_keys = getIniSetting ini_file head			for key in ini_keys do (				local data = mcActionsEditor.getActionData head key				--format "key:% data:%\n" key (data.toString())				if superClassOf data != StructDef do continue				local attribs = #()				for attr in attr_keys do (									local val_str = data.get attr					val_str = trimLeft val_str --remove spaces at begin					val_str = trimRight val_str --remove spaces at end					attribs += #(mcXMLAttrib attr val_str)				)				--format "attribs:%\n" attribs				local node_path = "//"+root_node_name+"/" + head				addNode node_path key attr:attribs			)		)		true	),