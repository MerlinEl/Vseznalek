// Walker Player Options (used by LoadFile(fpath, options))type OWPlayer = Record   AutoPlay : Boolean;   FullScreen : Boolean;   FitToScreen : Boolean;   CenterToScreen : Boolean; end;procedure LoadFile(fpath: WideString; options: TDictionary<String, OWPlayer>); safecall;procedure TForm1.BtnShowPlayerClick(Sender: TObject);var  fpath : WideString;  Dictionary: TDictionary<String, OWPlayer>;  options, Value: OWPlayer;begin  // Open walker player and load a file in to it  fpath := CbxBookDirs.Text + '\' + getSubdir() + '\' +  CbxSwfFiles.Text;  Log('LoadFile > fpath:' + fpath);  WPlayer.Display(True);  { Create the dictionary. }  Dictionary := TDictionary<String, OWPlayer>.Create;  { Add some key-value pairs to the dictionary. }  options.AutoPlay := ChkAutoPlay.Checked;  options.FullScreen := ChkFullScreen.Checked;  Dictionary.Add('Iasi', options);  WPlayer.LoadFile(fpath, Dictionary);end;// OR// Walker Player Options (used by LoadFile(fpath, options))type    OWPlayer = (AutoPlay, FullScreen, FitToScreen, CenterToScreen); //    s := GetEnumName(TypeInfo(OWPlayer), integer(AutoPlay));function OpStr(enumVal: OWPlayer): string;begin    Result := GetEnumName(TypeInfo(OWPlayer), Ord(enumVal));end;procedure LoadFile(fpath: WideString; options: TArray<string>); safecall;procedure TForm1.BtnShowPlayerClick(Sender: TObject);var    fpath: WideString;    options: TDictionary<String, String>;    s: string;begin    // Open walker player and load a file in to it    fpath := CbxBookDirs.Text + '\' + getSubdir() + '\' + CbxSwfFiles.Text;    Log('LoadFile > fpath:' + fpath);    WPlayer.Display(True);    { Create the dictionary. }    options := TDictionary<String, String>.Create;    { Add some key-value pairs to the dictionary. }    options.Add(OpStr(OWPlayer.AutoPlay), ChkAutoPlay.Checked.ToString());    options.Add(OpStr(OWPlayer.FullScreen), ChkFullScreen.Checked.ToString());    WPlayer.LoadFile(fpath, options);end;