(	local compilerParams = dotNetObject "System.CodeDom.Compiler.CompilerParameters" #(			"System.dll", 		"System.Core.dll", 		getDir #maxRoot + "Autodesk.Max.dll",		getDir #maxRoot + "\bin\assemblies\Autodesk.Max.Wrappers.dll"	)	compilerParams.GenerateInMemory = on 	local compilerResults = (dotNetObject "Microsoft.CSharp.CSharpCodeProvider").CompileAssemblyFromSource compilerParams #(		"using System;		using System.Linq;		using System.Collections.Generic;		using Autodesk.Max;		using Autodesk.Max.Wrappers; 		internal static class TabExtensions {			public static IEnumerable<T> ToEnumerable<T>(this ITab<T> tab) {				for (int i = 0; i < tab.Count; i++)					yield return tab[i];			}		} 		class Poly {			internal static readonly IGlobal Global = GlobalInterface.Instance; 			public static int[] GetSelectedObjMatIDs() {				var pIgame = Global.IGameInterface;				pIgame.InitialiseIGame(true);				pIgame.SetStaticFrame(0); 				using (var currNode = Global.COREInterface.GetSelNode(0))				using (var gameNode = pIgame.GetIGameNode(currNode))				using (var gameMesh = Global.IGameMesh.Marshal((gameNode.IGameObject as Autodesk.Max.Wrappers.IGameObject).INativeObject__NativePointer)) {					return gameMesh.InitializeData ? gameMesh.ActiveMatIDs.ToEnumerable().Select(id => id + 1).ToArray() : new int[0];				}			}		}"	)	::poly = compilerResults.CompiledAssembly.CreateInstance "Poly")if selection.count == 1 and isKindOf $ GeometryClass do Poly.GetSelectedObjMatIDs()