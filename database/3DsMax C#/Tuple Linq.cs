                IEnumerable<Node> all_objs = Kernel.Scene.AllObjects();                Kernel.WriteLine("\tGeometry objects:{0}", all_objs.Count());                //collect selected geometry objects volumes                var volumes = sel_objs                    .Where(n => n.IsSuperClassOf(SuperClassID.GeometricObject))                    .Select(n => {                        Kernel.WriteLine("process node:{0}", n.Name);                        double v = n.GetMesh().GetVolume();                        Kernel.WriteLine("\t\tget area:{0}", v);                        return new Tuple<Node, double>(n, v);                    }).ToList();                Kernel.WriteLine("\tvolumes count:{0}", volumes.Count());                //get prototypes with unique size                List<Tuple<Node, double>> uniques = volumes                  .GroupBy(p => p.Item2)                  .Select(g => g.First())                  .ToList();                Kernel.WriteLine("\tuniques count:{0}", uniques.Count());                uniques.ForEach(tuple => Kernel.WriteLine("\t\tget obj:{0} area:{1}", tuple.Item1.Name, tuple.Item2));