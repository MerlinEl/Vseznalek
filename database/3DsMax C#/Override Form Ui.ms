protected override void OnFormClosing(FormClosingEventArgs e){    if (  e.CloseReason == CloseReason.WindowsShutDown         ||e.CloseReason == CloseReason.ApplicationExitCall        ||e.CloseReason == CloseReason.TaskManagerClosing) {        return;     }    e.Cancel = true;    //assuming you want the close-button to only hide the form,     //and are overriding the form's OnFormClosing method:    this.Hide();}//override closing form event protected override void OnFormClosing(FormClosingEventArgs e) {     e.Cancel = !AllowFormExit;     if ( !AllowFormExit ) this.Hide();}//ORprotected override void OnFormClosing(FormClosingEventArgs e){    base.OnFormClosing(e);    if (e.CloseReason == CloseReason.WindowsShutDown) return;    // Confirm user wants to close    switch (MessageBox.Show(this, "Are you sure you want to close?", "Closing", MessageBoxButtons.YesNo))    {    case DialogResult.No:        e.Cancel = true;        break;    default:        break;    }        }//OR//how to override close (X) button in a Windows Formprivate void LicenseFile_FormClosing(object sender, FormClosingEventArgs e){     if (e.CloseReason == CloseReason.UserClosing)    {        e.Cancel = true; // or false if you want to continue closing                // your code    }} protected override void WndProc(ref Message m)    {        if (m.Msg == 0x0010) // WM_CLOSE        {            // If we don't want to close this window             if (ShowConfirmation("Are you sure?") != DialogResult.Yes) return;        }        base.WndProc(ref m);    }