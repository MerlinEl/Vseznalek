if classof ::GetUsedMtlIDs != dotNetMethod do ( 	local source = "using Autodesk.Max;	using System;	using System.Collections;	using System.Collections.Generic; 	class MeshMaterialIDs	{	static private IGlobal global = GlobalInterface.Instance; 	static private IMesh GetMeshFromNode( IINode node )	{            		IObject obj = node.EvalWorldState( 0, true ).Obj;		IClass_ID triClass = global.Class_ID.Create( 9, 0 );		IClass_ID polyClass = global.Class_ID.Create( 1562457754, 0 );		IClass_ID patchClass = global.Class_ID.Create( 4144, 0 ); 		if ( obj.IsSubClassOf( triClass ) )		{			return ((ITriObject)obj).Mesh;		}		else if ( obj.IsSubClassOf( polyClass ) )		{                			ITriObject mesh = (ITriObject)((IPolyObject)obj).ConvertToType( 0, triClass );			return mesh.Mesh;		}		else if ( obj.IsSubClassOf( patchClass ) )		{			return ((IPatchObject)obj).GetMesh( 0 );		}		else if ( obj.CanConvertToType( triClass ) == 1 )		{			ITriObject tri = (ITriObject)obj.ConvertToType( 0, triClass );			return tri.Mesh_;		}		else		{			return null;		}	} 	static public int[] GetUsedMtlIDs( uint handle )	{		IINode node = global.COREInterface.GetINodeByHandle( handle );		IMesh mesh = GetMeshFromNode( node ); 		if ( mesh == null ) return null; 		BitArray used_ids = new BitArray( ushort.MaxValue );		List<int> material_ids = new List<int>( ushort.MaxValue ); 		foreach ( IFace face in mesh.Faces )		{			if ( used_ids.Get( face.MatID ) == false )			{				material_ids.Add( face.MatID + 1 );				used_ids.Set( face.MatID, true );			} 		} 		return material_ids.ToArray(); 	} 	}" 	csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"	compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"	compilerParams.ReferencedAssemblies.Add("System.dll");			compilerParams.ReferencedAssemblies.Add((getdir #maxroot) + "Autodesk.Max.dll");				compilerParams.GenerateInMemory = on	compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(source)  	if (compilerResults.Errors.Count > 0 ) then	(		local errs = stringstream ""		for i = 0 to (compilerResults.Errors.Count-1) do		(			local err = compilerResults.Errors.Item[i]			format "Error:% Line:% Column:% %\n" err.ErrorNumber err.Line err.Column err.ErrorText to:errs		)		format "%\n" errs		undefined	) 	local assembly = compilerResults.CompiledAssembly.CreateInstance "MeshMaterialIDs"		global GetUsedMtlIDs = assembly.GetUsedMtlIDs)-- use it like thisGetUsedMtlIDs $.inode.handle