--Create Assemblt Functionfn createAssembly src = (	    local csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"     local compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"	  compilerParams.ReferencedAssemblies.Add("System.dll");  compilerParams.ReferencedAssemblies.Add("System.Core.dll");    compilerParams.GenerateInMemory = true	compilerParams.GenerateExecutable = false     local compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(src)        if (compilerResults.Errors.Count > 0 ) then    (        local errs = stringstream ""        for i = 0 to (compilerResults.Errors.Count-1) do        (            local err = compilerResults.Errors.Item[i]            format "Error:% Line:% Column:% %\n" err.ErrorNumber err.Line err.Column err.ErrorText to:errs         )        MessageBox (errs as string) title: "Errors encountered while compiling C# code"        return undefined    )    compilerResults.CompiledAssembly)--C# code as Stringsource = "using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace MyNameSpace {    public class MyClassWithArg {        public string arg;        public MyClassWithArg(string thisArg) {            arg = thisArg;        }        public string sayArg() {           return (\"MyClassWithArg.sayArg has been called.MyClassWithArg.arg = \"+ arg + \".\");        }    }}"--Pass Argument in to c# Classa = createAssembly sourceobj_type = a.getType("MyNameSpace.MyClassWithArg") --pickup object by nameargs = dotNet.ValueToDotNetObject #("sfs") (dotNetObject "System.Object") --construct argumentsactivator = dotNetClass "System.Activator"new_object = activator.CreateInstance obj_type argsnew_object.sayArg()