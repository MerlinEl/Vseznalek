Global mcUnwrapToolbardialogif ::mcUnwrapToolbardialog != undefined do try(mcUnwrapToolbardialog.close())catch()	(-->Locals-----------------------------------------------------------------local last_profile = execute (mcFile.readSettings Micra.UserSettings "Interface/lastprofile")local profiles = #("DefaultColor", "UserColor", "ForestColor", "EarthColor", "MoonColor", "SeaColor", "SunColor", "Close")local head_str = profiles[last_profile]local bar_height      = 14local form_bounds     = 2local form_offset     = 4 --border linelocal btn_size        = 24local form_width       = 236local form_height       = 420local form_default_width = 224 --? don't know why but this is the default size (maybe form min max?)local form_edit_width = 600local cp_width        = 48local debug = 0-->Components-----------------------------------------------------------------------local form = dotNetObject "Form" local form = dotNetObject "MaxCustomControls.Maxform"struct UNWRAP_COMPONENTS_TAB1_STRUCT ( created = false, form_height = 200, items = #())struct UNWRAP_COMPONENTS_TAB2_STRUCT ( created = false, form_height = 420, items = #())struct UNWRAP_COMPONENTS_TAB3_STRUCT ( created = false, form_height = 300, items = #())struct UNWRAP_COMPONENTS_STRUCT(	--variables	lblT    = dotNetObject "label" ,	ToolTip = dotnetobject "ToolTip",	btnMin  = dotNetObject  "button",	tlp_main = dotNetObject "TableLayoutPanel",	tab     = dotNetObject "TableLayoutPanel",	tab_buttons = #(),	tab_1 = UNWRAP_COMPONENTS_TAB1_STRUCT(),	tab_2 = UNWRAP_COMPONENTS_TAB2_STRUCT(),	tab_3 = UNWRAP_COMPONENTS_TAB3_STRUCT(),	start_mouse_pos, --mouse pos on dialog	old_height, 	minimized = false	--interface)form.tag = dotNetMXSValue (UNWRAP_COMPONENTS_STRUCT()) --store structure here for events use--|	--Form movefn onLblTMouseMove s a = (  --drag form		local form = s.parent	local mcs = form.tag.value	if a.Button == a.Button.left do  mcDialog.snapForm form mcs.start_mouse_pos)fn onLblTMouseDown s a = ( --start drag			local form = s.parent	local mcs = form.tag.value	form.cursor.current = netCursors.Hand	if a.Button == a.Button.left do ( --enable drag		mcs.start_mouse_pos = [form.MousePosition.x, form.MousePosition.y] - [form.left, form.top]  	))fn onLblTMouseUp s a = (	local form = s.parent	case a.Button.ToString() of (			"Left"	: (			--format " save form:%  pos:% size:%\n" form.name (form.location.toString()) (form.size.toString())			mcFile.saveDialogSettings form.name "Properties_2" --save form position after drag		)		"Right"	: (					form.hide()		)		"Middle"	: (				)	))fn onBtnMinMouseUp s a = (	local form = s.parent	s.text == "+"	if form == unsupplied do form = s.parent	local mcs = form.tag.value	mcs.minimized = not mcs.minimized	if mcs.minimized	then 	(		mcs.btnMin.text = "+"		mcs.old_height = form.height 		form.height = bar_height + form_bounds*2		mcs.tlp_main.hide()	)	else	(		mcs.btnMin.text = "-"		form.height = mcs.old_height		mcs.tlp_main.show()	))fn onTabButtonClick s a = (	format "button clicked s:% a:%\n" s a)fn createButton mcs btn_text i = (	local bname = "btn_"+ i as string	local btn = dotNetObject "button"	btn.text = btn_text	btn.size = netDrSize [btn_size, btn_size]	-- btn.BackColor = mcDotnet.uiColor #back	-- btn.ForeColor = mcDotnet.uiColor #text	btn.flatstyle = btn.flatstyle.flat	btn.FlatAppearance.BorderColor = netDrColor (mcUIColors.get #back)	btn.AllowDrop = true	btn.FlatAppearance.BorderSize = 1	--btn.cursor = btn.cursor.Current	btn.margin =  dotnetobject "padding" 0	btn.name   = bname	-- btn.tag    = baction	-- if btooltip != undefined do mcs.ToolTip.SetToolTip btn btooltip	-- if bicn != undefined do btn.Image  = bicn		dotNet.addeventhandler btn "Click" onTabButtonClick	btn)--INTERFACE INITfn addTab num mcs = (	if debug == 1 do format "addTab > tab index:% \n" num	--Remove All controls from Layout	mcs.tab.Controls.Clear()		--Fill layout by components of chossen type	case num of(		--SELECT		1: (					--Create Interface Components---------------------------------------------------------------------			if not mcs.tab_1.created do(							local button_labels = #("A", "B", "C")				local buttons = for i=1 to button_labels.count collect createButton mcs button_labels[i] i				append mcs.tab_1.items buttons								form.height = mcs.tab_1.form_height				mcs.tab.ColumnCount = form.width / btn_size				mcs.tab.RowCount = form.height / btn_size				mcs.tab.Controls.addRange ( buttons )			)			)		--MOVE		2: (			--Create Interface Components---------------------------------------------------------------------			if not mcs.tab_2.created do (					form.height = mcs.tab_2.form_height			)		)		--TRANSFORM		3: ( 			--Create Interface Components---------------------------------------------------------------------			if not mcs.tab_3.created do (				form.height = mcs.tab_3.form_height			)		)	)	mcs.tab.height = form.height - bar_height - btn_size - form_offset*2	)fn checkTheButton b = (		local mcs = b.parent.parent.tag.value	b.BackColor = mcDotnet.uiColor #fore	b.Forecolor = mcDotnet.uiColor #back --green--	for i in mcs.tab_buttons where not i.Equals b do 	(		i.BackColor = undefined 		i.Forecolor = mcDotnet.uiColor #text	))fn switchTabTo s a = (		checkTheButton s	local tab_struct = s.parent.parent.tag.value	addTab s.tag tab_struct)fn addTabButtons mcs = (		local tab_text_array = #("Select", "Move", "Transform")	for i = 1 to tab_text_array.count do	(		local b = dotNetObject "Button"		b.size  = netDrSize [btn_size*3, btn_size]		b.FlatStyle = b.FlatStyle.flat		b.FlatAppearance.BorderColor = mcDotnet.uiColor #back				b.Forecolor = mcDotnet.uiColor #text		b.FlatAppearance.BorderSize = 1		b.margin =  dotnetobject "padding" 0		b.name = "btn_"+((i as integer) as string)		b.text = tab_text_array[i]		b.tag = i		mcs.toolTip.SetToolTip b b.text		dotNet.addEventHandler b "MouseUp" switchTabTo		mcs.tab_buttons += #(b)	)	mcs.tlp_main.controls.addRange (mcs.tab_buttons))fn onFormVisibilityChanged s a = (	case s.visible of (			true:(			--print "UnwrapToolbar shown"					)		false:(					--print "UnwrapToolbar hide"			mcFile.saveDialogSettings s.name "Properties_2" --save form position after close		)	))fn onFormCreated s a = ( --only when created, not open		switchTabTo s.tag.value.tab_buttons[1] a --activate first tab	s.BackColor = mcDotnet.uiColor #fore)fn inicializeInterface form mcs =(	form.name = "mcUnwrapToolbardialog"	form.ControlBox  = false --hide main bar	local fpos = execute (mcFile.readSettings Micra.UserProfile "Properties_2/mcUnwrapToolbardialog" type:"pos")	format "mcUnwrapToolbardialog load pos:%\n" fpos	form.StartPosition = form.StartPosition.Manual	if fpos != OK do form.bounds = netDrRect fpos [form_width, form_height]	form.FormBorderStyle = form.FormBorderStyle.none	form.BackColor = mcDotnet.uiColor #fore --yellow	form.ShowInTaskbar = false	form.opacity = mcUIColors.get #opacity		mcs.lblT.bounds = netDrRect [form_offset/2, form_offset/2] [form_width - form_offset*5 , bar_height]	mcs.lblT.BackColor = mcDotnet.uiColor #back	mcs.lblT.ForeColor = mcDotnet.uiColor #text	local version = " v" + (mcFile.getScriptVersion "Customize") --get cript version	mcs.lblT.Text = "UVW Toolbar:" +(if version != undefined then version else "")		mcs.btnMin.bounds = netDrRect [form_width - 42, form_offset/2] [btn_size, bar_height]	mcs.btnMin.FlatStyle = mcs.btnMin.FlatStyle.flat	mcs.btnMin.BackColor = mcDotnet.uiColor #btn --(color 124 196 22)	mcs.btnMin.ForeColor = netDrColor (mcUIColors.get #text)	mcs.btnMin.text = "-"		--add default layout panel	mcs.tlp_main.bounds = netDrRect [form_offset/2, bar_height+form_offset] [form_width - form_offset*5, btn_size]	mcs.tlp_main.backColor = mcDotnet.uiColor #btn	mcs.tlp_main.ColumnCount = 3		mcs.tab.bounds = netDrRect [form_offset/2, bar_height*2+form_offset*4] [form_width - form_offset*5, form_height - bar_height - btn_size - form_offset*6]	mcs.tab.backColor = mcDotnet.uiColor #btn --yellow --	--add handlers	dotNet.addEventHandler mcs.lblT   "MouseMove" onLblTMouseMove	dotNet.addEventHandler mcs.lblT   "MouseDown" onLblTMouseDown 	dotNet.addEventHandler mcs.lblT   "MouseUp"   onLblTMouseUp	dotNet.addEventHandler mcs.btnMin "MouseClick"  onBtnMinMouseUp	dotnet.addEventHandler form "Shown" onFormCreated	dotnet.addEventHandler form "VisibleChanged" onFormVisibilityChanged		--add controls	addTabButtons mcs	form.controls.addRange( #(mcs.btnMin, mcs.lblT, mcs.tlp_main, mcs.tab) ))inicializeInterface form form.tag.valuemcUnwrapToolbardialog = formmcDotnet.dShow mcUnwrapToolbardialog)