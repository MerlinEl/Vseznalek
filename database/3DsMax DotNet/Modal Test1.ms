/************** Compile C# ON FLY ******************/fn getInputClass = ( source = "" source += "using System.Runtime.InteropServices;" source += "class Input " source += "{" source += "	[DllImport(\"user32.dll\")]" source += "	public static extern bool BlockInput(bool fBlockIt);" source += "}" -- Compile on fly csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider" compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters" compilerParams.GenerateInMemory = on compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(source)  input = compilerResults.CompiledAssembly.CreateInstance "Input") /************ Sample ******************/try(destroydialog theRol) catch()global theTimer -- it's better to have it global rollout theRol "Block Input by denisT"( label lb "" align:#left offset:[0,2] local ticks = 0, input fn testTimer = (  fn printTime =   (   lb.text = "Local Time: " + localtime   ticks += 1   if keyboard.escpressed or ticks > 10 do -- keyboard.escpressed BLOCKED   (	theTimer.stop()	input.BlockInput off -- UNBLOCK Input	try(destroydialog theRol) catch()   )  )  theTimer = dotNetObject "System.Windows.Forms.Timer" --create Timer for 10 ticks  dotnet.addEventHandler theTimer "tick" printTime  theTimer.interval = 1000  theTimer.start()  theTimer ) on theRol open do  (  input = getInputClass()  lb.text = "Local Time: " + localtime  input.BlockInput on -- BLOCK Input  theTimer = testTimer() ))createDialog theRol width:200 height:30 modal:on -- (it might not be modal)/***************************************/