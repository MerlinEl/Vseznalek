fn createdotnetimage =(    source = "    using System.Drawing;    public class getopimage    {      static void Main()    {    }    	public Image myimage;        public getopimage(Bitmap m, int r, int g, int b)        {            Image img = m;            Bitmap bmp = new Bitmap(img);            for (int i = 0; i < bmp.Width; i++)            {                for (int j = 0; j < bmp.Height; j++)                {                    Color bmpcolor = bmp.GetPixel(i, j);                    int a = bmpcolor.A;                    byte A = (byte)a;                    byte R = (byte)r;                    byte G = (byte)g;                    byte B = (byte)b;                    bmpcolor = Color.FromArgb(A, R, G, B);                    bmp.SetPixel(i, j, bmpcolor);                }            }            myimage =bmp;       }     }"    csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"    compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"    compilerParams.ReferencedAssemblies.Add("System.Drawing.dll")    CompilerParams.GenerateExecutable = true    CompilerParams.GenerateInMemory = true    compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(source)    compilerResults.CompiledAssembly)createdotnetimage ()image =  imagepathrgbcolor=#(255,255,255) --rgb color yourcontrols.image = ((DotNetClass "System.Activator").CreateInstance (DotNetClass "getopimage")  #((dotnetclass "System.Drawing.Image").FromFile image,rgbcolor[1],rgbcolor[2],rgbcolor[3])).myimage--(dotnetclass "System.Drawing.Image").FromFile image   can change to the base64 image