fn CreateWindowOps =(	source = ""	source += "using System;"	source += "using System.Windows.Forms;"	source += "using System.Runtime.InteropServices;"	source += "namespace WindowOps"	source += "{"	source += "	public class MessageEventArgs : EventArgs"	source += "	{"	source += "		public MessageEventArgs(Message message) { this.message = message; }"	source += "		public Message message;"	source += "	}"	source += "	public class WindowHooker : NativeWindow"	source += "	{"	source += "		private const int WM_DESTROY = 0x02;"	source += "		public WindowHooker() { }"	source += "		public event EventHandler MessageReceived;"	source += "		protected override void WndProc(ref Message m)"	source += "		{"	source += "			switch (m.Msg)"	source += "			{"	source += "				case WM_DESTROY:"	source += "					MessageReceived(this, new MessageEventArgs(m));"	source += "					break;"	source += "				default:"	source += "					break;"	source += "			}"	source += "			base.WndProc(ref m);"	source += "		}"	source += "	}"	source += "}"	csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"	compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"	compilerParams.ReferencedAssemblies.AddRange #("System.dll", "System.Windows.Forms.dll")	compilerParams.GenerateInMemory = true	compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(source)			compilerResults.CompiledAssembly)global WindowOps = CreateWindowOps()fn onMessageReceived s e =(	format "window: % destroy: %" (uiaccessor.getwindowtext e.message.hwnd) (formattedPrint e.message.msg format:"#x"))/*rollout testrol "Test Rollout" width:200(	button close_bt "Close" width:100	on close_bt pressed do destroydialog testrol )createdialog testrolhook = WindowOps.createInstance "WindowOps.WindowHooker"hook.AssignHandle (dotnetobject "IntPtr" testrol.hwnd)dotnet.addEventHandler hook "MessageReceived" onMessageReceived*/