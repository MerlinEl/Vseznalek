// define                List<bool> fill;        int rowCount = 8;        int colCount = 5;        int cellSize = 30;        int x = 40, y = 40;// initfill = new List<bool>(new bool[rowCount * colCount]);// paint        protected override void OnPaint(PaintEventArgs e) {            base.OnPaint(e);            e.Graphics.DrawGrid(x, y, cellSize, rowCount, colCount, Pens.Black, Brushes.Aqua, fill);        }//mouse click on cell private void Form1_MouseClick(object sender, MouseEventArgs e)        {            // by mouse click, determine which cell was clicked            int colNumber = (e.X - x) / cellSize;            int rowNumber = (e.Y - y) / cellSize;            //determine if the cell is in our grid            if (colNumber > colCount - 1 || rowNumber > rowCount - 1) return;            //if we mark in our grid that it should be painted over            fill[rowNumber * colCount + colNumber] = true;           //call redraw the form            this.Invalidate();        }// extensionpublic static class DrawingExtension {        //this method draws the grid        //x,y top left corner coordinates        //cellSize - cell size        //rowCount and colCount - the number of rows and columns, respectively        //pen - border pencil        //brush - paint brush        //fill - whether to fill cells        public static void DrawGrid(this Graphics g, int x, int y, int cellSize, int rowCount, int colCount, Pen pen, Brush brush, List<bool> fill = null) {            // by default, cells are unpainted            if (fill == null) fill = new List<bool>(new bool[rowCount * colCount]);            //the number of values must match the number of cells            if (fill.Count != rowCount * colCount) throw new ArgumentException();            // go left to right            for (int i = 0; i < colCount; i++) {                // go from top to bottom                for (int j = 0; j < rowCount; j++) {                    //draw a blank cell                    g.DrawRectangle(pen, x + i * cellSize, y + j * cellSize, cellSize, cellSize);                    // if necessary, paint over the cell                    if (fill[j * colCount + i]) {                        // fill the cell with the brush                        g.FillRectangle(brush, x + i * cellSize + pen.Width / 2, y + j * cellSize + pen.Width / 2, cellSize - pen.Width / 2, cellSize - pen.Width / 2);                    }                }            }        }    }