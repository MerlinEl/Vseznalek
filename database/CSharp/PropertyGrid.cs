    public enum AnimationSetName {        Wait,        Yes,        No,        Hurrah,        Bonus    }public interface IGuideProperty {            [CategoryAttribute("VLASTNOSTI"),            DisplayName("Animace"),            DescriptionAttribute("NÃ¡zev Animace")            ]            AnimationSetName AnimationSet { get; set; }}        [TypeDescriptionProvider(typeof(IUTypeDescriptionProvider<IGuideProperty>))]        public class GuideSprite : Sprite, IGuideProperty {        private AnimationSetName animationSetName = AnimationSetName.Wait;        [Browsable(true)]        public AnimationSetName AnimationSet {            get { return animationSetName; }            set {                animationSetName = value;                Invalidate();            }        }}//https://www.codeproject.com/Articles/271589/Show-Properties-of-a-Class-on-a-PropertyGridpublic class MyCustomClass {    public int MyIntProperty { get; set; }    public string MyStringProperty { get; set; }    public override string ToString() {        return "...";    }}public partial class MyCutomUsercontrol : UserControl {    public MyCutomUsercontrol() {        InitializeComponent();    }    private MyCustomClass _MyCustomClass = new MyCustomClass();    public int Property1 { get; set; }    public string Property2 { get; set; }    [TypeConverter(typeof(ExpandableObjectConverter))]    [EditorBrowsable(EditorBrowsableState.Always)]    public MyCustomClass Property3 {        get {            return _MyCustomClass;        }        set {            _MyCustomClass = value;        }    }}