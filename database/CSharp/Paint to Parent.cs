        Parent.Paint += new PaintEventHandler(OnParentPaint);        public void OnParentPaint(object sender, PaintEventArgs e) {            Graphics g = e.Graphics;            if (ShowBounds) {                using (Pen p = new Pen(Color.Blue, 2)) {                    // draw bounds rect                    g.DrawRectangle(p, new Rectangle(Location.X, Location.Y, Width, Height));                }                using (Pen p2 = new Pen(Color.Red, 2)) {                    // draw pivot                    g.DrawEllipse(p2, new Rectangle(Location.X - 5, Location.Y - 5, 10, 10));                }                using (Pen p3 = new Pen(Color.Fuchsia, 2)) {                    // draw bounds circle                    g.DrawEllipse(p3, new Rectangle(Location.X, Location.Y, ClientRectangle.Width, ClientRectangle.Height));                }                using (Pen p4 = new Pen(Color.Black, 1)) {                    // draw axis                    g.DrawLine(p4, Location.X, Location.Y + Height / 2, Location.X + Width, Location.Y + Height / 2);                    g.DrawLine(p4, Location.X + Width / 2, Location.Y, Location.X + Width / 2, Location.Y + Height);                }            }        }// debugParent.Paint += new PaintEventHandler(OnParentPaint);public void OnParentPaint(object sender, PaintEventArgs e) {    if (Parent == null || lastShape == null) return;    Graphics g = e.Graphics;    using (Pen pen2 = new Pen(Color.Red, 2)) {        var p1 = lastShape[0];        g.DrawEllipse(pen2, new RectangleF(Location.X + p1.X - 5, Location.Y + p1.Y - 5, 10, 10));    }    using (Pen pen3 = new Pen(Color.Lime, 2)) {        var p2 = lastShape[1];        g.DrawEllipse(pen3, new RectangleF(Location.X + p2.X - 5, Location.Y + p2.Y - 5, 10, 10));    }// Draw Object Axis drawObjectAxis(g, Width, Height, Color.Blue);drawObjectAxis(g, Width, Height, Color.Yellow, Location.X, Location.Y);}        private void drawObjectAxis(Graphics g, int w, int h, Color color, int offsetX = 0, int offsetY = 0) {    var pathX = new GraphicsPath();    var pathY = new GraphicsPath();    pathX.AddLine(offsetX, offsetY + h / 2, offsetX + w, offsetY + h / 2);    pathY.AddLine(offsetX + w / 2, offsetY, offsetX + w / 2, offsetY + h);    using (Pen pen = new Pen(color, 1)) {        g.DrawPath(pen, pathX);        g.DrawPath(pen, pathY);    }}