GetAllWindows()                .Select(GetTitle)                .Where(x => x.Contains("Download & Save Viki Videos"))                .ToList()                .ForEach(Console.WriteLine);        public delegate bool Win32Callback(IntPtr hwnd, IntPtr lParam);        [DllImport("user32.dll")]        protected static extern bool EnumWindows(Win32Callback enumProc, IntPtr lParam);        private static bool EnumWindow(IntPtr handle, IntPtr pointer) {            List<IntPtr> pointers = GCHandle.FromIntPtr(pointer).Target as List<IntPtr>;            pointers.Add(handle);            return true;        }        private static List<IntPtr> GetAllWindows() {            Win32Callback enumCallback = new Win32Callback(EnumWindow);            List<IntPtr> pointers = new List<IntPtr>();            GCHandle listHandle = GCHandle.Alloc(pointers);            try {                EnumWindows(enumCallback, GCHandle.ToIntPtr(listHandle));            } finally {                if ( listHandle.IsAllocated ) listHandle.Free();            }            return pointers;        }        [DllImport("User32", CharSet = CharSet.Auto, SetLastError = true)]        public static extern int GetWindowText(IntPtr windowHandle, StringBuilder stringBuilder, int nMaxCount);        [DllImport("user32.dll", EntryPoint = "GetWindowTextLength", SetLastError = true)]        internal static extern int GetWindowTextLength(IntPtr hwnd);        private static string GetTitle(IntPtr handle) {            int length = GetWindowTextLength(handle);            StringBuilder sb = new StringBuilder(length + 1);            GetWindowText(handle, sb, sb.Capacity);            return sb.ToString();        }