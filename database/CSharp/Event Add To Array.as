Below implementation will show message whenever new item into ArrayList will be added.    public delegate void EventHandler(object sender, EventArgs e);      public class Publisher: ArrayList      {          public event EventHandler ProdcutAddedInfo;          protected virtual void OnChanged(EventArgs e)          {              if (ProdcutAddedInfo != null) ProdcutAddedInfo(this, e);          }          public override int Add(Object product)          {              int added = base.Add(product);              OnChanged(EventArgs.Empty);              return added;          }          public override void Clear()          {              base.Clear();              OnChanged(EventArgs.Empty);          }          public override object this[int index]          {              set              {                  base[index] = value;                  OnChanged(EventArgs.Empty);              }          }      }  Now,    public class Subscriber      {          private Publisher publishers;          public Subscriber(Publisher publisher)          {              this.publishers = publisher;              publishers.ProdcutAddedInfo += publishers_ProdcutAddedInfo;          }          void publishers_ProdcutAddedInfo(object sender, EventArgs e)          {              if (sender == null)              {                  Console.WriteLine("No New Product Added.");                  return;              }              Console.WriteLine("A New Prodct Added.");          }          public void UnSubscribeEvent()          {              publishers.ProdcutAddedInfo -= publishers_ProdcutAddedInfo;          }      }  Execute Code    class Program      {          static void Main(string[] args)          {              Publisher publisher = new Publisher();              Subscriber subscriber = new Subscriber(publisher);              publisher.Add(new Product              {                  ProductName = "Complan", Price = 20              });              publisher.Add(new Product              {                  ProductName = "Horlics", Price = 120              });              publisher.Add(new Product              {                  ProductName = "Boost", Price = 200              });              subscriber.UnSubscribeEvent();              Console.ReadKey();          }      }  OutputA New Product Added.A New Product Added.A New Product Added.Question: Can we use Events without Delegate? Answer No, Events use Delegates internally. Events are encapsulation over Delegates. There is already defined Delegate "EventHandler" that can be used like below:     public event EventHandler MyEvents;  So, it also used Delegate Internally.I have attached sample code. Read and debug the code very carefully so you will understand the concept of Event in C#.