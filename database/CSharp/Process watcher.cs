------------------------------------------------------------------------------------------------//program must run at Admin rights (app.manifest)<requestedExecutionLevel level="requireAdministrator" uiAccess="false" />------------------------------------------------------------------------------------------------/ConnectionOptions options = new ConnectionOptions();            //options.Username = "USERNAME";            //options.Password = "PASSWORD";            //options.EnablePrivileges = true;            //options.Impersonation = ImpersonationLevel.Impersonate;            //if ( Environment.MachineName.ToLower() != "Local_PC_Name" ) {            //    //options.Username = "administrator";            //    //options.Password = pwd;            //    options.EnablePrivileges = true;            //    options.Impersonation = ImpersonationLevel.Impersonate;            //}            //string scopeString = "\\\\" + System.Environment.MachineName + "\\root\\CIMV2";            //ManagementScope scope = new ManagementScope(scopeString);            //scope.Options = options;            //ManagementScope scope = new ManagementScope(string.Format("\\\\{0}\\root\\cimv2", remoteIP.Trim()), options);            //scope.Connect();            //var scope = new ManagementScope();            //scope.Options = options;            //scope.Options.Username = "adminuser";            //scope.Options.Password = "adminpass";            //scope.Options.Impersonation = ImpersonationLevel.Impersonate;            //scope.Options.EnablePrivileges = true;            //scope.Options.Username = "remoteserver\adminuser";            //scope.Options.Impersonation = ImpersonationLevel.Impersonate;            //scope.Options.Authentication = AuthenticationLevel.Connect;            ManagementEventWatcher startWatch = new ManagementEventWatcher {                Query = new WqlEventQuery("SELECT * FROM Win32_ProcessStartTrace"),                //Scope = scope            };            startWatch.EventArrived += new EventArrivedEventHandler(startWatch_EventArrived);            startWatch.Start();            ManagementEventWatcher stopWatch = new ManagementEventWatcher {                Query = new WqlEventQuery("SELECT * FROM Win32_ProcessStopTrace"),                //Scope = scope            };            stopWatch.EventArrived += new EventArrivedEventHandler(stopWatch_EventArrived);            stopWatch.Start();            Console.WriteLine("Press ENTER to exit");            Console.ReadLine();            startWatch.Stop();            stopWatch.Stop();        }        static void stopWatch_EventArrived(object sender, EventArrivedEventArgs e) {            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();            Console.WriteLine("Process started. Name: " + processName + " | ID: " + processID);        }        static void startWatch_EventArrived(object sender, EventArrivedEventArgs e) {            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();            Console.WriteLine("Process stopped. Name: " + processName + " | ID: " + processID);        }