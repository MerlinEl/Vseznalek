http://wiki.sk89q.com/wiki/WorldEdit/Expression_syntaxArbitrary shapes: //g[en[erate]] <block> <expression>Example: Torus of major radius 0.75 and minor radius 0.25   ( = (pr2)(2pr) = 2p2 Rr2)//g stone (0.75-sqrt(x^2+y^2))^2+z^2 < 0.25^2Example: Gnarled hollow tree//g -h log (0.5+sin(atan2(x,z)*8)*0.2)*(sqrt(x*x+z*z)/0.5)^(-2)-1.2 < yExample: Rainbow Torus//g wool data=(32+15/2/pi*atan2(x,y))%16; (0.75-sqrt(x^2+y^2))^2+z^2 < 0.25^2Example: Rainbow Egg//g wool data=(32+y*16+1)%16; y^2/9+x^2/6*(1/(1-0.4*y))+z^2/6*(1/(1-0.4*y))<0.08Example: a heart//g wool:red (z/2)^2+x^2+(5*y/4-sqrt(abs(x)))^2<0.6Example: Sine wave//g -h glass sin(x*5)/2<yExample: Radial cosine wave//g -h glass cos(sqrt(x^2+z^2)*5)/2<yExample: Circular Hyperboloid//g stone -(z^2/12)+(y^2/4)-(x^2/12)>-0.03Example: //g -h snowblock sqrt(x^2+z^2-y^2)-1Sqrt(x^2+z^2-y^2)-1 sqrt(x^2-z^2+y^2)-1 Cbrt(x^3-z^3+y^3)-1--sphere of radius 5 = r <= 5 (but WorldEdit gives you x,y,z and not r so you must use the formula for Euclidean distance to compute the radius yourself)//g sqrt(x^2+y^2+z^2) <= 5  or //g x^2+y^2+z^2 <= 5^2.--The torus formula they give works by computing the xy plane distance from a circle //g 0.75-sqrt(x^2+y^2)--This will create an 10×10×10 object which looks like a right triangle in the yz plane. The first two parts give it a limited extent in the x direction (WorldEdit probably has some limit on this anyway), the next two are the straight sides of the triangle, and the fifth is the sloped side.//g a*x + b*y + c*z <= dTESTYParaboloids//g -h snowblock (x^2/2^2+z^2/2^2-y/3)-0.5//g -h snowblock (x^2/2^2+z^2/2^2+y/3)-0.5//g -h snowblock (x^2/2^2+z^2/2^2+y/6)-0.5//SELECTION--irst you load the worldedit plugin:WorldEditPlugin worldEdit = (WorldEditPlugin) getServer().getPluginManager().getPlugin("WorldEdit");--After that you do this to get the selection:Selection selection = worldedit.getSelection(player);--Then it's just a simple getMinimumPoint, getMaximumPoint to get the locations:selection.getMinimumPoint();selection.getMaximumPoint();