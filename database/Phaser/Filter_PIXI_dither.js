PIXI.dither = function(){    PIXI.AbstractFilter.call( this );     this.passes = [this];     // set the uniforms    this.uniforms = {        scale: {type: '1f', value:1},        angle: {type: '1f', value:5},        dimensions:   {type: '4fv', value:[0,0,0,0]}    };    this.fragmentSrc = [          'precision mediump float;',            'uniform sampler2D uSampler;',            'varying vec2 vTextureCoord;',            'float scale = 0.5;',            'float find_closest(int x, int y, float c0) {',                          'vec4 dither0 = vec4( 1.0, 33.0, 9.0, 41.0);',                'vec4 dither1 = vec4(49.0, 17.0, 57.0, 25.0);',                'vec4 dither2 = vec4(13.0, 45.0, 5.0, 37.0);',                'vec4 dither3 = vec4(61.0, 29.0, 53.0, 21.0);',                'float limit = 0.0;',                'float value = 0.0;',                                'vec4 dither;',                                'if(x == 0) {',                    'dither = dither0;',                '} else if(x == 1) {',                    'dither = dither1;',                '} else if(x == 2) {',                    'dither = dither2;',                '} else if(x == 3) {',                    'dither = dither3;',                '}',                                'if(x < 5) {',                    'if(y == 0) {',                        'value = dither[0];',                    '} else if(y == 1) {',                        'value = dither[1];',                    '} else if(y == 2) {',                        'value = dither[2];',                    '} else if(y == 3) {',                        'value = dither[3];',                    '}',                                    'limit = (value + 1.0) / 64.0;',                '}',                'if(c0 < limit) {',                    'return 0.0;',                '} else {',                    'return 1.0;',                '}',            '}',            'void main() {',                                   'vec3 lum = vec3(0.299, 0.587, 0.114);',                'float grayscale = dot(texture2D(uSampler, vTextureCoord).rgb, lum);',                'vec3 rgb = texture2D(uSampler, vTextureCoord).rgb;',                'vec2 xy = gl_FragCoord.xy * scale;',                'int x = int(mod(xy.x, 4.0));',                'int y = int(mod(xy.y, 4.0));',                'vec3 finalRGB;',                'finalRGB.r = find_closest(x, y, rgb.r);',                'finalRGB.g = find_closest(x, y, rgb.g);',                'finalRGB.b = find_closest(x, y, rgb.b);',                'gl_FragColor = vec4(finalRGB, 1.0);',            '}'    ];};PIXI.dither.prototype = Object.create( PIXI.AbstractFilter.prototype );PIXI.dither.prototype.constructor = PIXI.dither; /** * The scale of the effect. * @property scale * @type Number */Object.defineProperty(PIXI.dither.prototype, 'scale', {    get: function() {        return this.uniforms.scale.value;    },    set: function(value) {        this.dirty = true;        this.uniforms.scale.value = value;    }}); /** * The radius of the effect. * @property angle * @type Number */Object.defineProperty(PIXI.dither.prototype, 'angle', {    get: function() {        return this.uniforms.angle.value;    },    set: function(value) {        this.dirty = true;        this.uniforms.angle.value = value;    }});