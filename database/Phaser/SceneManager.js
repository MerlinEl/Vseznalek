// https://github.com/photonstorm/phaser/blob/v3.52.0/src/scene/SceneManager.jsvar scene = Phaser.Scenes.SceneManager.getScene: function (key)scene.pause, resume, sleep, wake, isSleeping ,  isPaused, isVisible  * Runs the given Scene.     *     * If the given Scene is paused, it will resume it. If sleeping, it will wake it.     * If not running at all, it will be started.     *     * Use this if you wish to open a modal Scene by calling `pause` on the current     * Scene, then `run` on the modal Scene.* @param {string} key - The Scene to run.* @param {object} [data] - A data object that will be passed to the Scene on start, wake, or resume.run: function (key, data)this.scene.start(levelName);	   /**     * Starts the given Scene.     *     * @method Phaser.Scenes.SceneManager#start     * @since 3.0.0     *     * @param {string} key - The Scene to start.     * @param {object} [data] - Optional data object to pass to `Scene.Settings` and `Scene.init`, and `Scene.create`.     *     * @return {Phaser.Scenes.SceneManager} This SceneManager.     */    start: function (key, data)    /**     * Sleeps one one Scene and starts the other.     *     * @method Phaser.Scenes.SceneManager#switch     * @since 3.0.0     *     * @param {string} from - The Scene to sleep.     * @param {string} to - The Scene to start.     *     * @return {Phaser.Scenes.SceneManager} This SceneManager.     */    switch: function (from, to)this.game.scene.add(levelName, eval(levelName));    /**     * Adds a new Scene into the SceneManager.     * You must give each Scene a unique key by which you'll identify it.     *     * The `sceneConfig` can be:     *     * * A `Phaser.Scene` object, or an object that extends it.     * * A plain JavaScript object     * * A JavaScript ES6 Class that extends `Phaser.Scene`     * * A JavaScript ES5 prototype based Class     * * A JavaScript function     *     * If a function is given then a new Scene will be created by calling it.     *     * @method Phaser.Scenes.SceneManager#add     * @since 3.0.0     *     * @param {string} key - A unique key used to reference the Scene, i.e. `MainMenu` or `Level1`.     * @param {(Phaser.Scene|Phaser.Types.Scenes.SettingsConfig|Phaser.Types.Scenes.CreateSceneFromObjectConfig|function)} sceneConfig - The config for the Scene     * @param {boolean} [autoStart=false] - If `true` the Scene will be started immediately after being added.     * @param {object} [data] - Optional data object. This will be set as `Scene.settings.data` and passed to `Scene.init`, and `Scene.create`.     *     * @return {?Phaser.Scene} The added Scene, if it was added immediately, otherwise `null`.     */    add: function (key, sceneConfig, autoStart, data)    /**     * Removes a Scene from the SceneManager.     *     * The Scene is removed from the local scenes array, it's key is cleared from the keys     * cache and Scene.Systems.destroy is then called on it.     *     * If the SceneManager is processing the Scenes when this method is called it will     * queue the operation for the next update sequence.     *     * @method Phaser.Scenes.SceneManager#remove     * @since 3.2.0     *     * @param {string} key - A unique key used to reference the Scene, i.e. `MainMenu` or `Level1`.     *     * @return {Phaser.Scenes.SceneManager} This SceneManager.     */    remove: function (key)    /**     * Handles load completion for a Scene's Loader.     *     * Starts the Scene that the Loader belongs to.     *     * @method Phaser.Scenes.SceneManager#loadComplete     * @private     * @since 3.0.0     *     * @param {Phaser.Loader.LoaderPlugin} loader - The loader that has completed loading.     */    loadComplete: function (loader)    {        var scene = loader.scene;        //  TODO - Remove. This should *not* be handled here        //  Try to unlock HTML5 sounds every time any loader completes        if (this.game.sound && this.game.sound.onBlurPausedSounds)        {            this.game.sound.unlock();        }        this.create(scene);    },