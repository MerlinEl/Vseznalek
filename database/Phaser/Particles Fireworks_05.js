//https://labs.phaser.io/edit.htmlvar config = {    type: Phaser.AUTO,    parent: 'phaser-example',    width: 800,    height: 600,    scene: {        preload: preload,        create: create,        update: update    }};var particles;var game = new Phaser.Game(config);function preload (){    this.load.atlas('flares', 'assets/particles/flares.png', 'assets/particles/flares.json');}function create (){    // create fireworks at random curve    var margin = 100;    var rect = new Phaser.Geom.Rectangle(margin/2, margin/2, config.width - margin, config.height - margin);    var path = new Phaser.Curves.Path(rect.x, rect.y);    var particles = this.add.particles('flares');    createFireworks(particles, rect, path, 5);    // draw safe bounds    var r1 = this.add.rectangle(rect.x + rect.width / 2, rect.y + rect.height / 2, rect.width, rect.height);    r1.setStrokeStyle(2, 0x1a65ac);    // draw curves    /*var graphics = this.add.graphics();    graphics.clear();    graphics.lineStyle(1, 0xffffff, 1);    path.draw(graphics);*/}function update(){    //createRandomFirework(this.particles, this.rect, this.path);}function createFireworks(particles, rect, path, count){    for (var i = 0; i < count; i++){        var curve = getRandomFireworkCurve(rect);        var randomColor = ['red', 'green', 'blue', 'white', 'yellow'][Phaser.Math.Between(0, 4)];        var emiter = particles.createEmitter({            frame: randomColor,            lifespan: 500,            speed: { min: 200, max: 600 },            alpha: { start: 1, end: 0 },            angle: {min:90, max:100},            gravityY: 100,            scale: { start: 0.2, end: 0 },            quantity: 4,            blendMode: 'ADD',            emitZone: { type: 'edge', source: curve, quantity: 150, yoyo: false },            repeat:0,            onComplete:function(){                console.log("done")                emiter.destroy();            }        });        path.add(curve);    }}function getRandomFireworkCurve(rect){    var startPoint = {        x:Phaser.Math.Between(rect.x, rect.width),         y:rect.height    };    var endPoint = {        x:startPoint.x + Phaser.Math.Between(-50, 50),         y:rect.y    };    var controlPoint1 = {        x:startPoint.x,         y:startPoint.y    };    var controlPoint2 = {        x:endPoint.x + Phaser.Math.Between(-20, 20),         y:endPoint.y    };    return new Phaser.Curves.CubicBezier(startPoint, controlPoint1, controlPoint2, endPoint);}