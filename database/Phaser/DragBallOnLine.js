//https://codepen.io/samme/pen/zYoBwgq?editors=0010/* global colors, Phaser */const config = {  width: 800,  height: 600,  scene: {    create: create,    update: update  }};const { white, red, yellow, blue, green } = colors.hexColors;const { Vector2 } = Phaser.Math;const SPEED = 0.00005;const pathPosition = new Vector2();const pathTangent = new Vector2();const distanceToPointer = new Vector2();const pathProjection = new Vector2();let t = 0.75;let path;let graphics;let sprite;function create() {  path = new Phaser.Curves.Path(50, 500);  path.splineTo([164, 446, 274, 542, 412, 457, 522, 541, 664, 464]);  // path.lineTo(700, 300);  // path.lineTo(600, 350);  path.ellipseTo(200, 100, 100, 250, false, 0);  path.cubicBezierTo(222, 119, 308, 107, 208, 368);  path.ellipseTo(60, 60, 0, 360, true);  sprite = this.add.circle(0, 0, 16, red, 0.5);  path.getPoint(t, pathPosition);  sprite.copyPosition(pathPosition);  graphics = this.add.graphics();    this.add.text(300, 150, 'ðŸ‘† Press to move the ball', { font: 'large system-ui' });}function update() {  const { activePointer } = this.input;  path.getPoint(t, pathPosition);  path.getTangent(t, pathTangent);  distanceToPointer.set(activePointer.worldX, activePointer.worldY).subtract(pathPosition);  const scalarProjection = distanceToPointer.dot(pathTangent);  pathProjection.copy(pathTangent).scale(scalarProjection);  sprite.copyPosition(pathPosition);  graphics.clear();  graphics.lineStyle(1, blue);  path.draw(graphics);  draw(distanceToPointer, sprite, green);  draw(pathProjection, sprite, yellow);  if (activePointer.isDown) {    t += scalarProjection * SPEED;  }}function draw(vector, start, color) {  graphics    .lineStyle(1, color)    .lineBetween(      start.x,      start.y,      start.x + vector.x,      start.y + vector.y    );}document.getElementById("version").textContent = "Phaser v" + Phaser.VERSION;const game = new Phaser.Game(config);