//The value of path, if set, is placed before any relative file path given. For example:this.load.path = "images/sprites/";this.load.image("ball", "ball.png");this.load.image("tree", "level1/oaktree.png");this.load.image("boom", "[http://server.com/explode.png](http://server.com/explode.png)");// on preload	// load list of all levels		this.load		.json("levels-asset-pack", "assets/levels-asset-pack.json")		.once("filecomplete-json-levels-asset-pack", (key, type, levels) => {						this.load			.script(levelName, "src/scenes/"+levelName+".js")			.once("filecomplete-script-" + levelName, (key, type, data) => {									this.game.scene.add(levelName, eval(levelName));			})		})// load first level		this.load.on(Phaser.Loader.Events.COMPLETE, () => {			this.scene.start(levelName);			})// OR	var levelName = "Menu_001";				// load list of all levels		this.load.json("levels-asset-pack", "assets/levels-asset-pack.json");		this.load		.once("filecomplete-json-levels-asset-pack", (key, type, levels) => {						Ctrace("key:{0} type:{1} levels:{2}", key, type, levels)			this.load.script(levelName, "src/scenes/"+levelName+".js");		})		.once("complete", ()=>{			Ctrace("SCRIPTS LOADED!");			this.game.scene.add(levelName, eval(levelName));			Ctrace("SCENE");			console.dir(this.scene);		})		// load Menu_001		this.load.on(Phaser.Loader.Events.COMPLETE, () => {			this.scene.start(levelName)				/*this.time.addEvent({				delay: 300,				callback: ()=>{										this.scene.start(levelName)				},				loop: false			})*/		})// ORvar levels = this.cache.json.get("levels-asset-pack");levels.section1.files.forEach(f=>{	Ctrace("\tscene:{0}", f.key)	this.load.script(f.key, f.url);	this.load	.once("filecomplete-script-" + f.key, (key, type, data) => {				Ctrace("\tscript:{0}", data)		console.dir(data);		// scene.add(key);	})	.once("complete", (scene)=>{		Ctrace("SCENE {0} LOADED!", scene)		console.dir(scene);	})})