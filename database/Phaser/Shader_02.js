//here, this is how I would do it.. first the Sprite FX:const fragShader = `#define SHADER_NAME GRAY_FSprecision mediump float;uniform sampler2D uMainSampler;uniform float uGray;varying vec2 outTexCoord;void main(){    gl_FragColor = texture2D(uMainSampler, outTexCoord);    gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.2126 * gl_FragColor.r + 0.7152 * gl_FragColor.g + 0.0722 * gl_FragColor.b), uGray);}`;export default class GrayScaleSpriteFX extends Phaser.Renderer.WebGL.Pipelines.SpriteFXPipeline{    constructor (game)    {        super({            game,            fragShader        });        this.gray = 1;    }    onDraw (target)    {        this.set1f('uGray', this.gray);        this.drawToGame(target);    }}//then the example:import GrayScaleSpriteFX from '../../spritefx/GrayScaleSpriteFX.js';export default class Example extends Phaser.Scene{    constructor ()    {        super();    }    preload ()    {        this.load.image('logo', 'assets/phaser3-logo.png');        this.load.image('poop', 'assets/poop.png');    }    create ()    {        const pipeline = this.renderer.pipelines.add('GrayScaleSpriteFX', new GrayScaleSpriteFX(this.game));        const logo = this.add.image(400, 200, 'logo').setPipeline(pipeline);        const poop = this.add.image(400, 400, 'poop').setPipeline(pipeline);        logo.setData('gray', 1.0);        poop.setData('gray', 0.4);        pipeline.onDrawSprite = sprite =>        {            pipeline.gray = sprite.getData('gray');        }        this.tweens.add({            targets: logo.data.values,            gray: 0,            repeat: -1,            yoyo: true,            duration: 500        });    }}const config = {    type: Phaser.WEBGL,    width: 800,    height: 600,    backgroundColor: '#0a0067',    parent: 'phaser-example',    scene: Example};let game = new Phaser.Game(config);