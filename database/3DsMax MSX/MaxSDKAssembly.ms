global MaxSDKAssemblyfn CreateMaxSDKAssembly forceRecompile:on =(	if forceRecompile or not iskindof ::MaxSDKAssembly dotnetobject or (::MaxSDKAssembly.GetType()).name != "Assembly" do	(source = ""source += "using System;\n"source += "using Autodesk.Max;\n"source += "public class MaxSDK\n"source += "{\n"source += "	public Object GetGlobal()\n"source += "	{\n"source += "		return Autodesk.Max.GlobalInterface.Instance;\n"source += "	}\n"source += "}\n"		csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"		compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"		compilerParams.ReferencedAssemblies.AddRange #("System.dll", getdir #maxroot + @"Autodesk.Max.dll")		compilerParams.GenerateInMemory = true		compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(source)				if (compilerResults.Errors.Count > 0 ) then		(			errs = stringstream ""			for i = 0 to (compilerResults.Errors.Count-1) do			(				err = compilerResults.Errors.Item[i]				format "Error:% Line:% Column:% %\n" err.ErrorNumber err.Line err.Column err.ErrorText to:errs 			)			MessageBox (errs as string) title: "Errors encountered while compiling C# code"			format "%\n" errs			undefined		)		else		(			MaxSDKAssembly = compilerResults.CompiledAssembly			MaxSDKAssembly.CreateInstance "MaxSDK"		)	))MaxSDK = CreateMaxSDKAssembly()using this snippet for max versions 2016+ (2015 maybe) we can get .net max global object:gi = MaxSDK.GetGlobal() after that get access to sdk interfaces like:gi.CoreInterface  after that get any node (INode), its material (IMaterial)...ask for number of Parameter Blocks, get a Block by index...get a list of PBlock2 parameters, find a parameter index by name, set and get a parameter by index, etc... and so on