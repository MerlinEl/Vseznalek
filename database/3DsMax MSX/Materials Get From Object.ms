fn getObjectMaterials obj = (	local mat = obj.material	--get all unique ids	local mats_id = #{}	for f = 1 to obj.faces.count do (		mats_id += #{polyop.getFaceMatID obj f}	)	--collect materials from ids	local used_mats = #()	for id in mats_id do (		for i = 1 to mat.materialList.count do (			if mat.materialIDList[i] != id do continue			format "ID:% MAT:%\n" id mat.materialList[i].name			appendIfUnique used_mats mat.materialList[i]		)	)	used_mats)fn getObjectsMaterials objs = (	local used_mats = #()	for o in objs do (				local obj_mats = getObjectMaterials o		for mat in obj_mats where findItem used_mats mat == 0 do (			append used_mats mat		)	)	used_mats)used_mats = getObjectsMaterials	(selection as array)used_mats.countfirst_mat = used_mats[1]for mat in used_mats do format "%\n" mat.namefor mat in used_mats do (	local m = case classOf mat of (		DirectX_9_Shader: (			mat.renderMaterial		)		LS3DMaterial: (			mat		)		default: undefined	)	if m == undefined do (format "undefined mat:%\n" mat.name; continue)	format "name:% type:% file:%\n" m.name (classOf m) (m.GetName())	--format "%\n" (m.GetName()))