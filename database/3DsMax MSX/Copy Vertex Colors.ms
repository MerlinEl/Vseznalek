fn getObjectColorDataPlus obj = (            local chnl = 0        struct FACE_COLOR_DATA (fCenter, color_values = #() )        local faces_data = for f = 1 to obj.faces.count collect (            local map_vers = polyOp.getMapFace obj chnl f            local face_verts = (polyOp.getFaceVerts obj f) as array            local color_values = for v in map_vers collect (polyOp.getMapVert obj chnl v)            local face_center = polyOp.getFaceCenter obj f            FACE_COLOR_DATA face_center color_values        )        faces_data)fn setFaceColors obj f color_values = (            local chnl = 0        local map_vers = polyOp.getMapFace obj chnl f        for i=1 to map_vers.count do (                        polyOp.setMapVert obj chnl map_vers[i] color_values[i]        )   )fn setFacesIdsByList obj idList tolerance:1= (        format "idList:%\n" idList.count      local faces = #{1..obj.faces.count}    for f in faces collect with redraw off (                local fcenter = (polyOp.getFaceCenter obj f)         for d in idList do (                        local identical_face_center = (distance d.fCenter fcenter) < tolerance            if not identical_face_center do continue            try (setFaceColors obj f d.color_values) catch (format "failed transfer colors to face:%\n" f)            exit        )    ))fn transferIDSFromObjToOBJ = (    local sel = selection as array    local source_obj = sel[1]    local target_obj = sel[2]    local old_pos = target_obj.pos    target_obj.pos = source_obj.pos    local face_ids = getObjectColorDataPlus source_obj    setFacesIdsByList target_obj face_ids tolerance:1    target_obj.pos = old_pos    convertToMesh target_obj    convertToPoly target_obj)undo "transfer vertex color" on transferIDSFromObjToOBJ()