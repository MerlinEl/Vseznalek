global NodeCallbackMonitor (	struct NodeCallbackStruct	(		eventCallback,		fn disposeCallback = if isstruct (d = NodeCallbackMonitor) do		(			d.eventCallback = undefined			gc light:on			ok		),		fn callbackMonitor event handles = 		(			format "event:% handles:%\n" event handles		),		on create do		(			disposeCallback()			eventCallback = NodeEventCallback all:callbackMonitor			eventCallback.enabled = on		)	)	NodeCallbackMonitor = NodeCallbackStruct()	ok)-------------------------------------------------------------------------------------------global EventCallbackWrapper(   if (globalvars.isglobal #EventCallbackWrapper) do   (      if isstruct (d = globalvars.get #EventCallbackWrapper) do d.destroyCallback owner:d   )   EventCallbackWrapper =   (      struct EventCallbackStruct      (         id,         callbackContainer,         fn doCallbacks event handles =          (            owner_def = valOps.current_frame_owner()            nodes = for handle in handles where isvalidnode (node = GetAnimByHandle handle) collect node                        format "> % %" event nodes            ------ format "> % %" event nodes <this struct instance id>   ------> try to make it works         ),         fn destroyCallback owner:this =         (            owner.callbackContainer = undefined            gc light:on         ),                     on create do         (            id = (random -1e9 1e9)            callbackContainer = NodeEventCallback all:doCallbacks         )      )   )   EventCallbackWrapper = EventCallbackWrapper()   ok)-------------------------------------------------------------------------------------------------global PolyFaceExtruder(   if (globalvars.isglobal #EventCallbackWrapper) do   (      if isstruct (d = globalvars.get #PolyFaceExtruder) do d.EventCallbackWrapper.destroy()   )   PolyFaceExtruderStruct =   (      struct PolyFaceExtruderStruct      (      public         EventCallbackStruct =         (            struct EventCallbackStruct            (            public               callbackContainer,                              fn doCallbacks event handles =                (                  --owner_def = valOps.current_frame_owner()                  nodes = for handle in handles where isvalidnode (node = GetAnimByHandle handle) collect node                                    format "callbacks > % %" event nodes               ),                              fn destroy =               (                  callbackContainer = undefined                  gc light:on               ),               fn create enabled:on =               (                  callbackContainer = NodeEventCallback all:doCallbacks enabled:enabled mouseUp:on               ),                           on create do               (                  create()               )            )         ),         EventCallbackWrapper = EventCallbackStruct(),                  extrude_amount = 10,         fn extrudePolyFaces node: faces:#selected quite:on =          (            callbacks_enabled = EventCallbackWrapper.callbackContainer.enabled            if quite do             (               EventCallbackWrapper.destroy()            )                        if node == unsupplied do node = selection[1]               format ">> % %" node faces            if iskindof node Editable_Poly do            (               if faces == #selected do faces = polyop.getfaceselection node               result = polyop.extrudeFaces node faces this.extrude_amount               redrawviews()            )                        if quite and callbacks_enabled do             (               EventCallbackWrapper.create()            )            result         ),         on create do         (         )      )   )      PolyFaceExtruder = PolyFaceExtruderStruct()   ok)(   delete objects   p = plane width:108 length:64 widthsegs:19 lengthsegs:11 wirecolor:blue   converttopoly p   polyop.setfaceselection p \   #{       21..24, 29, 34..36, 40, 44, 48, 52, 56, 59, 63,       67, 75, 78, 82, 86, 94, 97, 101, 105, 110..112,       116, 120, 124, 128, 135, 139, 143, 147, 154, 158,       162, 166, 170, 173..176, 179..183, 186..188 \   }   update p)/*-- #1: THERE IS NO CALLBACKSundo "Extrude" on PolyFaceExtruder.extrudePolyFaces()-- #2: THERE ARE CALLBACKS(   polyop.extrudeFaces $ (polyop.getfaceselection $) 10   redrawviews())*/