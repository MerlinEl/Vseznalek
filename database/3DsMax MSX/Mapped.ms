Using the mapped prefix on a function definition marks this function to be automatically mapped over collections.This means the function is automatically called repeatedly on the elements of a collection if the collection is given as the first argument to the function.This allows you to define scripted functions that behave in a similar manner to the mapped built-in functions such as, copy, delete, move, and so on, which can be applied to an object set, path name pattern, or array.See Collections for more information.mapped fn toggleSkinMorph_basedOnVis obj = (   modA = obj.modifiers   for m in modA do (      if classof m == Skin or classOf m == Morpher then (         m.enabled = not obj.isHidden      )   ))toggleSkinMorph_basedOnVis $geometry--I'm looking for the function to toggle an object's "By Object"/"By Layer" --property in Display Properties, specifically to "By Object". I haven't been able to get any of the functions here--How toggle by object/by layer in 3ds Max with maxscript?mapped fn Display_ByObject_ByLayer nodes state: =(    if isValidNode nodes do node.displaybylayer = state)--now you can test itif selection.count > 0 do Display_ByObject_ByLayer (selection as array) state:offglobal BCTP(    struct BCToolsPublic    (        include "Dropbox\\Scripts\\max_scripts\\BCToolsPublic\\src\\(lib)\\inputOps.ms",        include "Dropbox\\Scripts\\max_scripts\\BCToolsPublic\\src\\(lib)\modifierOps.ms",        include "Dropbox\\Scripts\\max_scripts\\BCToolsPublic\\src\\(lib)\\transformOps.ms",        include "Dropbox\\Scripts\\max_scripts\\BCToolsPublic\\src\\(lib)\\stackOps.ms",        include "Dropbox\\Scripts\\max_scripts\\BCToolsPublic\\src\\(lib)\\selectionOps.ms",        	mapped fn uninstall file =	(	    format "Uninstalling - %\n" file	    deleteFile file	),		        mapped fn install file =        (	    format "Installing - %\n" file	    fileIn file        ),                on create do        (	    uninstall ( getFiles ((getDir #userMacros) + "\\BCTools_Public*.mcr") )            install (getFiles "Dropbox\\Scripts\\max_scripts\\BCToolsPublic\\src\\(macros)\\*.mcr")        )    )    BCTP = BCToolsPublic()    )n factorial n = if n <= 0 then 1 else n * factorial (n - 1)mapped function rand_color x = x.wireColor = random (color 0 0 0) (color 255 255 255)fn starfield count extent:[200,200,200] pos:[0,0,0] debug:false = (		local t = pos + extent / 2 --min	local f = pos - extent / 2 --max	if debug do (		local box_pos = [pos.x, pos.y, pos.z - extent.z/2]		local b = box name:"space" width:extent.x height:extent.y length:extent.z pos:box_pos		b.xray = true		point name: "min" pos:t wirecolor:green		point name: "max" pos:f wirecolor:red	)	for i = 1 to count do (				sphere name: "star" radius:(random 0.1 2.0) pos:(random f t) segs:4 smooth:false	))starfield 500 debug:true 