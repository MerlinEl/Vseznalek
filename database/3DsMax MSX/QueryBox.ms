-- Maxif queryBox "Do you want to exit?" beep:true then print "EXIT" else print "RETURN"-- Custom 1-- instantiate the objecttheObj = dotNetObject "MaxCustomControls.RenameInstanceDialog" "Type in new name here"theobj.text ="A terribly useful dotnet input dialog"DialogResult = theObj.Showmodal()--test if the ok button was presseddotnet.compareenums TheObj.DialogResult ((dotnetclass "System.Windows.Forms.DialogResult").OK)--get the new text stringNewStringEntered = theobj.InstanceName -- Custom 2struct myCoolDialogs ( 	labelStr,  	stringQuery = rollout stringQuery "String Query" 	( 		local returnStr 	 		label lblHeader 		editText etInput  		fn launch label: = 		( 			destroyDialog myCoolDialogs.stringQuery 			if label != unsupplied then 				myCoolDialogs.labelStr = label 			else myCoolDialogs.labelStr = "Enter some text:" 			createDialog myCoolDialogs.stringQuery modal:true 			returnStr -- only put it here if the dialog is modal 		)  		on stringQuery open do 		( 			lblHeader.text = myCoolDialogs.labelStr 			setFocus etInput 		)  		on etInput entered str do 		( 			destroyDialog myCoolDialogs.stringQuery 			returnStr = str 		) 	) )  myCoolDialogs = myCoolDialogs() -- as there are variables, an instance is needed result = myCoolDialogs.stringQuery.launch label:"Enter your credentials"  format "Returned String: %\n" result