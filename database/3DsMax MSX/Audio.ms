		--remove all sound tracks		while prosound.NumTracks() > 0 do prosound.delete 1		--add current sound track		local sndpath = maxFilePath + "audio\\" + (getFilenameFile maxFileName) + ".wav"		format "Loading Audio [%] :" sndpath		if doesFileExist sndpath then (			format " success!\n"			prosound.append sndpath --adds a file			rootScene.controller = AudioFloat()						actionMan.executeAction 1 "280"  -- Track View: Add/Remove Keys			addNewKey rootScene[#Sound][#_Master_Waveform] 0f #select			rootScene[#Sound][#_Master_Waveform].keys[1].value = 0.1												mySphere = Sphere()			mySphere.radius.controller = AudioFloat()			wavSound.filename = "c:\temp\\sonar.wav"			at time wavsound.start with animate on ( mySphere.radius = 1.0 )			at time wavsound.end with animate on ( mySphere.radius = 100.0 )					) else format " failed!\n"theNode = trackViewNodes.Audio_Test  if theNode == undefined do 	theNode = newTrackViewNode trackViewNodes "Audio Test" 	 try 	theTrack = theNode.Audio_Track catch 	theTrack = addTrackViewController theNode (audiofloat()) "Audio Track"global rotAttr = attributes "rotAttr"(	parameters params 	(		weight type:#float default:1.0 animatable:on		rot type:#float	))delete objectsp = point size:20 box:on cross:on wirecolor:oranges = p.rotation.controller[2].controller = float_script()custattributes.add s rotAttr w = s.weight.controller = waveform_float()s.addtarget "w0" w offset:0s.addtarget "w1" w offset:1s.setexpression "this.rot += abs(w1 - w0)"  --ASSIGN WAVE FILE MANUALLY  for t = 1 to 100 do 	format "%" (at time t theTrack.value)