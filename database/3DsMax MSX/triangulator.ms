 fn MyCallbackFn msg ir obj faceNum shift ctrl alt =  (          local breaked = false      case msg of      (         -- #freeMove: myStr += " [freeMove]"  -- means the mouse is moved without a button being pressed          #mousePoint: (			print " [left click]" -- means the left mouse button has just been pressed		  )         -- #mouseMove: myStr += " [left drag]" --means the mouse is being dragged with the left button down          #mouseAbort: (			print " [righ click]" --means the right mouse button was clicked, normally meaning cancel			breaked = true		  )      )     if not breaked then #continue  else #stop  )  mouseTrack trackCallback:MyCallbackFn tool triangulator (	local last_p = [0,0,0]	on mousePoint clickno do (				format "clicked pos:%\n" worldPoint		)	on mouseAbort clickno do (		last_p = pickpoint snap:#3D ruberband:last_p		print "Ending - if more than 2 positions are picked create new mesh"		format "End with: %\n" clickno				--polyOp.createPolygon $ #(177, 145, 146, 178)	)	on start do (		print "Starting"	))startTool triangulatormacroscript alignVertexToPlanecategory:"miauu"tooltip:"Align vertex to plane"buttonText:"Align vertex to plane"(  local p1 = pickPoint snap:#3D  local p2 = pickPoint snap:#3D rubberBand:p1  local p3 = pickPoint snap:#3D rubberBand:p2   local theTM = matrixFromNormal (normalize (cross (p3-p2) (p2-p1)))  theTM.translation = (p1+p2+p3)/3  local obj = selection[1]  in coordSys theTM for v in polyOp.getVertSelection obj do    polyOp.setVert obj v ((polyOp.getVert obj v) * [1,1,0]))