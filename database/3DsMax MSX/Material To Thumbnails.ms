fn correctPath str = (	str = substituteString str "\n" "\\n"	str = substituteString str "\t" "\\t"	str = substituteString str "/" "\\"	str = substituteString str "\\\\" "\\") fn isNodeType node_name tex_type = (	local key_str = (filterString node_name "_")[2] --cut prefix	--cut last integer	local num_str = "0123456789"	if findString num_str key_str[key_str.count] != undefined do (		key_str = substring key_str 1 (key_str.count-1)	)	(toLower key_str) == (toLower tex_type))fn isTextureType file_name tex_type = (	local type = case tex_type of (			"DiffuseTexture"	: "d"		"NormalTexture"	: "n"		"Glossiness"		: "g"	)	local file_name = getFilenameFile file_name	local last_letter = file_name[file_name.count]	--format "isTextureType > file_name:% last_letter:% type:%\n" file_name last_letter type	toLower last_letter == type)fn getTexturesFromMaterial mat_xml tex_type = (	local result = #()	if not (doesFileExist mat_xml) do (			format "Unable to found XML File:%\n" mat_xml		return #()	)	try (		local xDoc = XMLDocument()										--Create an XMLDcoument		xDoc.LoadXML mat_xml												--Load XML from file		local rNode = xDoc.GetRootNode()									--Get the Root Node THIS MUST BE CALLED!				local nParam = rNode.GetChild 3				if (toLower(nParam.GetTag()) != "parameters") do (				--invalid Shader XML (node parameters not found)					format "Node 'parameters' not found. Invalid format. Skipping:% , texture type:%\n" mat_xml tex_type			return #()		) 				local nParamChildren = nParam.GetChildren()		for child in nParamChildren do (					local nName = child.GetChild 0			if (toLower(nName.GetTag()) != "name") do ( --missing node name , skip							format "Unable to found node 'name'. Invalid Format.Skipping:% , texture type:%\n" mat_xml tex_type				continue			)			local node_name = toLower(nName.GetText())			--format "Search str:% in NODE:%  found:%\n" tex_type node_name (findString node_name tex_type == undefined)			if (not (isNodeType node_name tex_type)) do continue					local nValue = child.GetChild 1			local sValue = toLower (nValue.GetTag())			local file_name = nValue.GetText()						--format "check fname:%\n" file_name						if (not (isTextureType file_name tex_type)) do continue						if (sValue == "value") do append result file_name			-- format "Found DIFFUSE:% at NODE:% XML PATH:%\n" (nValue.GetText()) node_name mat_xml			)			) catch (			format "Unknown error while reading material XML. Invalid format. Skipping:% , texture type: % Exception:%\n " mat_xml tex_type (getcurrentException())	)	result)fn getTexturesFullPath mat = (	local ls3d_mat = case (classOf mat) of (			DirectX_9_Shader	: mat.renderMaterial		LS3DMaterial		: mat		Default				: undefined	)	format "getTexturesFullPath > mat:%\n" ls3d_mat	if ls3d_mat == undefined do return #()	local edit_path = LS3DGUP.LS3DGUP.EnginePath	local mat_xml = correctPath (edit_path + @"materials\" + ls3d_mat.GetName())	used_diffuse_textures = getTexturesFromMaterial mat_xml "DiffuseTexture"	--format "getTexturesFullPath > textures:%\n" used_diffuse_textures	for n in used_diffuse_textures collect (		local fpath = ""		LS3DGUP.LS3DGUP.GetFileVFSFullPath n &fpath		fpath = correctPath( edit_path + fpath + n )		if not (doesFileExist fpath) do (					format "Unable found Texture:%\n" fpath			continue		)		-- format "Texture Full Path:%\n" fpath		fpath	))fn projectTextureToCanvas canvas w h fpath = ( 	local bt = Bitmaptexture fileName:fpath --get Bitmaptexture from file	local bb = bitmap w h color:black --create new bitmap	rendermap bt into:bb size:[bb.width,bb.height] filter:on display:off --render texture resized	)fn ReverseArray arr = (	for i=arr.count to 1 by -1 collect arr[i])fn previewMaterial mat_id = (	local multi_mat = $.material	local mat = multi_mat[mat_id]	local material_textures = getTexturesFullPath mat	format "material_textures:%\n" material_textures	local canvas_w = 264	local canvas_h = 200	local combined_bitmap = Bitmap canvas_w canvas_h color:green 		if material_textures.count == 1 then (		combined_bitmap = projectTextureToCanvas combined_bitmap canvas_w canvas_h material_textures[1]			) else (		material_textures = reverseArray material_textures --revetse textures order		local shift_y = canvas_h / material_textures.count		current_y = 0		for fpath in material_textures do (			local bb = projectTextureToCanvas combined_bitmap canvas_w canvas_h fpath			pasteBitmap bb combined_bitmap [0,current_y] [0,0] --add bitmap to combined_bitmap			current_y += shift_y		)		--draw break lines between textures		current_y = 0		local line_colors = for i = 1 to canvas_w collect yellow		for i=1 to material_textures.count-1 do (					current_y += shift_y			setPixels combined_bitmap [0 , current_y] line_colors		)	)	display combined_bitmap )previewMaterial 3--output-- material_textures:#("D:\!2k_games\scotch_dev\edit\maps\city\lost_heaven\terrain\grass\lh_grass_c_v1---d.dds", "D:\!2k_games\scotch_dev\edit\maps\city\lost_heaven\terrain\grass\lh_grass_dead_c_v1---d.dds", "D:\!2k_games\scotch_dev\edit\maps\city\lost_heaven\terrain\ground\lh_mud_c_v1---d.dds")