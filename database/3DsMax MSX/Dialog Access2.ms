--showInterface UIAccessorstruct DIALOG_DLL (	RENDER_SETUP_WINDOW = "res3.dll",	RENDERED_FRAME_WINDOW = "bmm.dll")struct pos (x , y, z)fn getDialogHWNDbyName dll_name = (	local popup_dialogs = UIAccessor.GetPopupDialogs()	for x in popup_dialogs where (		local dll_path = UIAccessor.GetWindowDllFileName x		format "search:% in path:%\n" dll_name dll_path		findString dll_path dll_name	) != undefined do return x	return undefined)fn moveDialogByName dia_dll pos = (	--This gets me the hWnd for the window	local hWnd = getDialogHWndByName dia_dll	format "hwnd:%" hWnd		if hWnd	== undefined do return false	--Build Assembly script	fn createAssembly =(		str="using System;\n"		str+="using System.Runtime.InteropServices;\n"		str+="namespace Win32Helper\n"		str+="{\n"		str+=" class Win32HelperClass\n"		str+=" {\n"		str+=" [DllImport(\"user32.dll\")]\n"		str+=" [return: MarshalAs(UnmanagedType.Bool)]\n"		str+=" public static extern bool SetWindowPos(IntPtr hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);\n"		str+=" }\n"		str+="}\n"		local csharpProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"		local compilerParams = dotnetobject "System.CodeDom.Compiler.CompilerParameters"		compilerParams.ReferencedAssemblies.addRange #("System.dll")		compilerParams.GenerateInMemory = on		local compilerResults = csharpProvider.CompileAssemblyFromSource compilerParams #(str)		for er = 0 to compilerResults.errors.count-1 do print (compilerResults.errors.item[er].tostring())		return compilerResults.CompiledAssembly.createInstance "Win32Helper.Win32HelperClass"	)	--Compile Assembly and move Dialog	local win32Helper = createAssembly()	local hWndIntPtr = (dotNetObject "System.IntPtr" hWnd)	win32Helper.setWindowPos hWndIntPtr 0 pos.x pos.y 0 0 1 )	--"Render Setup:"moveDialogByName (dialog_dll()).RENDERED_FRAME_WINDOW  (pos x:600 y:200)