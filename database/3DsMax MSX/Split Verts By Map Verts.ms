--Bobo 2006fn SplitVertsByMapVerts theMesh =(--first collect two arrays of bitarrays - one containing the map vertices for each mesh vertex,--the other containing the faces using each mesh vertex:convertToMesh theMesh lastVert = theMesh.numvertslastFace = theMesh.numfacesVertsUsage = for v = 1 to lastVert collect #{}FaceUsage = for v = 1 to lastVert collect #{}for f = 1 to lastFace do(	theFace = getFace theMesh f	theMapFace = meshop.getMapFace theMesh 1 f	append VertsUsage[theFace.x] theMapFace.x	append VertsUsage[theFace.y] theMapFace.y	append VertsUsage[theFace.z] theMapFace.z	append FaceUsage [theFace.x] f	append FaceUsage [theFace.y] f	append FaceUsage [theFace.z] f)--Now we can go though the mesh vertex array and see if we have 2 or more map vertices.--If yes, we count from 2 to the number of map verts and create new mesh vertices with the--same position as the current mesh vertex. Then we go through the list of collected faces--using that vertex and see which of the 3 components matches the current vertex and its--corresponding map vertex matches the current map vertex. We repoint that component of the face--to the new mesh vertex. Thus, for each previously existing map vertex, we get a new mesh vertex--at the end of the vertex list. for v = 1 to VertsUsage.count do(	theMapVertsArray = VertsUsage[v] as array	if theMapVertsArray.count > 1 do	(		theFacesArray = FaceUsage[v] as array		theVertPos = getVert theMesh v		for mapv = 2 to theMapVertsArray.count do		(			theMapVert = theMapVertsArray[mapv]			newIndex = theMesh.numverts+1			setNumVerts theMesh newIndex true			setVert theMesh newIndex theVertPos 			for f in theFacesArray do			(				theFaceDef = getFace theMesh f				theMapFaceDef = meshOp.getMapFace theMesh 1 f				if theMapFaceDef.x == theMapVert and theFaceDef.x == v do 				(					theFaceDef.x = newIndex 					setFace theMesh f theFaceDef				)								if theMapFaceDef.y == theMapVert and theFaceDef.y == v do 				(					theFaceDef.y = newIndex 					setFace theMesh f theFaceDef				)								if theMapFaceDef.z == theMapVert and theFaceDef.z == v do 				(					theFaceDef.z = newIndex 					setFace theMesh f theFaceDef				)							)--end f loop		)--end v loop	))update theMesh)SplitVertsByMapVerts $Sphere01