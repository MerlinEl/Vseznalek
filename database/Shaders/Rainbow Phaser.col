//http://labs.phaser.io/edit.html?src=src/display/shaders/shader%20test%205.jsconst fragmentShader5 = `precision highp float;   /// iOS needs high?uniform float time;uniform vec2 resolution;varying vec2 fragCoord;// "[SH17A] Fireworks" by Martijn Steinrucken aka BigWings/Countfrolic - 2017// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.// Based on https://www.shadertoy.com/view/lscGRl#define N(h) fract(sin(vec4(6,9,1,0)*h) * 9e2)void main(void){  vec4 o;  vec2 u = fragCoord.xy/resolution.y;// proper pixelatefloat s = 500.;    u = floor(u * s) / s;  float e, d, i=0.;  vec4 p;  for(float i=1.; i<30.; i++) {    d = floor(e = i*9.1+time);    p = N(d)+.3;    e -= d;    for(float d=0.; d<5.;d++)      o += p*(2.9-e)/1e3/length(u-(p-e*(N(d*i)-.5)).xy);  }  gl_FragColor = vec4(o.rgb, 1.0);}`;class Example extends Phaser.Scene{    constructor()    {        super();    }    preload()    {        this.load.image('splat2', 'assets/pics/splat2.png');    }    create()    {        const shape1 = this.make.graphics().fillCircle(400, 300, 300);        const geomask1 = shape1.createGeometryMask();        geomask1.geometryMask.setName('geo1');        const maskImage2 = this.make.image({ x: 400, y: 300, key: 'splat2', add: false });        const bitmask2 = maskImage2.createBitmapMask();        // bitmask2.invertAlpha = true;        this.cameras.main.setMask(geomask1, false);        const container = this.add.container(400, 300);        const baseShader2 = new Phaser.Display.BaseShader('BufferShader2', fragmentShader5);        const shader2 = this.add.shader(baseShader2, 0, 0, 128, 128);        container.add([ shader2 ]);        container.setScale(3);        shader2.setMask(bitmask2, false);    }}const config = {    type: Phaser.WEBGL,    parent: 'phaser-example',    width: 800,    height: 600,    scene: [ Example ]};const game = new Phaser.Game(config);