package  {  import flash.display.Sprite;  import flash.events.MouseEvent;  import flash.text.TextField;  import flash.text.TextFormat;  import nid.ui.controls.VirtualKeyBoard;  /**   * ...   * @author Nidin P Vinayakan   */  public class Main extends Sprite {		    public function Main() {      VirtualKeyBoard.getInstance().init(this);      var txt:TextField = new TextField();      txt.width = 300;      txt.height = 100;      txt.background = true;      txt.backgroundColor = 0xCCCCCC;      txt.defaultTextFormat = new TextFormat("Arial", 25, 0x000000,true,null,null,null,null,"center");      txt.text = "PRESS HERE"      addChild(txt);      txt.x = 175;      txt.y = 10;      txt.addEventListener(MouseEvent.CLICK, toggleKeyboard);			    }    private function toggleKeyboard(e:MouseEvent):void {      VirtualKeyBoard.getInstance().target = { field:e.currentTarget, fieldName:"Test" };    }		  }}package  {            import flash.display.MovieClip;     import flash.events.SoftKeyboardEvent;     import flash.events.Event;     import flash.display.StageScaleMode;     import flash.display.StageAlign;     import flash.display.InteractiveObject;     import flash.text.TextFieldType;     import flash.text.TextField;          public class PanningExample extends MovieClip {                              private var textField:TextField = new TextField();                  public function PanningExample() {                         this.stage.scaleMode = StageScaleMode.NO_SCALE;             this.stage.align = StageAlign.TOP_LEFT;                          textField.y = this.stage.stageHeight - 201;             textField.width = this.stage.stageWidth;             textField.height = 200;             textField.type = TextFieldType.INPUT;             textField.border = true;             textField.wordWrap = true;             textField.multiline = true;                          this.addChild( textField );                          //track soft keyboard and stage resize events             textField.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE, onKeyboardChange );             textField.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE, onKeyboardChange );             this.stage.addEventListener( Event.RESIZE, onDisplayAreaChange );         }              private function onDisplayAreaChange( event:Event ):void         {             textField.y = this.stage.stageHeight - 201;             textField.width = this.stage.stageWidth;         }                  private function onKeyboardChange( event:SoftKeyboardEvent ):void         {             var field:InteractiveObject = textField;             var offset:int = 0;              //if the softkeyboard is open and the field is at least partially covered             if( (this.stage.softKeyboardRect.y != 0) && (field.y + field.height > this.stage.softKeyboardRect.y) )                 offset = field.y + field.height - this.stage.softKeyboardRect.y;                              //but don't push the top of the field above the top of the screen             if( field.y - offset < 0 ) offset += field.y - offset;                          this.y = -offset;                     }             } }textField.requestSoftKeyboard();textField..needsSoftKeyboard = true;var keyboard:SoftKeyboard = new SoftKeyboard(layout);full code for showing the keyboard in dialog:public void onFocusChange(View v, boolean hasFocus) {    Log.v("onFocusChange", hasFocus + " " + showkeyboard);    if (hasFocus) {        if (showkeyboard++ == 0) {            alertDialog.getWindow().clearFlags(                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE                    | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);            alertDialog.getWindow().setSoftInputMode(                    WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);        } else {            showkeyboard = 1;        }    }}For showing the soft keyboard on entering into the activity or to the dialog we can use this codingAdd the following code just before alert.show()InputMethodManager input = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);input.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);for hiding keyboardInputMethodManager input = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);input.hideSoftInputFromWindow(singleedittext.getWindowToken(),0);